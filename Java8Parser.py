# Generated from Java8Parser.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,107,2844,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,
        7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
        2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,
        7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,
        1,0,1,0,1,1,5,1,476,8,1,10,1,12,1,479,9,1,1,1,1,1,5,1,483,8,1,10,
        1,12,1,486,9,1,1,1,3,1,489,8,1,1,2,1,2,3,2,493,8,2,1,3,1,3,1,4,1,
        4,1,5,1,5,1,5,3,5,502,8,5,1,6,1,6,3,6,506,8,6,1,6,1,6,5,6,510,8,
        6,10,6,12,6,513,9,6,1,7,5,7,516,8,7,10,7,12,7,519,9,7,1,7,1,7,3,
        7,523,8,7,1,7,1,7,1,7,5,7,528,8,7,10,7,12,7,531,9,7,1,7,1,7,3,7,
        535,8,7,3,7,537,8,7,1,8,1,8,5,8,541,8,8,10,8,12,8,544,9,8,1,8,1,
        8,3,8,548,8,8,1,9,5,9,551,8,9,10,9,12,9,554,9,9,1,9,1,9,3,9,558,
        8,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,5,13,567,8,13,10,13,12,13,
        570,9,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        3,14,583,8,14,1,15,5,15,586,8,15,10,15,12,15,589,9,15,1,15,1,15,
        1,15,5,15,594,8,15,10,15,12,15,597,9,15,1,15,1,15,5,15,601,8,15,
        10,15,12,15,604,9,15,1,16,5,16,607,8,16,10,16,12,16,610,9,16,1,16,
        1,16,3,16,614,8,16,1,17,1,17,1,18,1,18,1,18,1,18,1,18,5,18,623,8,
        18,10,18,12,18,626,9,18,3,18,628,8,18,1,19,1,19,1,19,1,20,1,20,1,
        20,1,20,1,21,1,21,1,21,5,21,640,8,21,10,21,12,21,643,9,21,1,22,1,
        22,3,22,647,8,22,1,23,5,23,650,8,23,10,23,12,23,653,9,23,1,23,1,
        23,3,23,657,8,23,1,24,1,24,1,24,1,24,3,24,663,8,24,1,25,1,25,1,25,
        1,25,1,25,1,25,5,25,671,8,25,10,25,12,25,674,9,25,1,26,1,26,1,26,
        1,26,1,26,3,26,681,8,26,1,27,1,27,1,27,1,27,1,27,1,27,5,27,689,8,
        27,10,27,12,27,692,9,27,1,28,1,28,1,28,1,28,1,28,3,28,699,8,28,1,
        29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,5,30,709,8,30,10,30,12,30,
        712,9,30,1,31,3,31,715,8,31,1,31,5,31,718,8,31,10,31,12,31,721,9,
        31,1,31,5,31,724,8,31,10,31,12,31,727,9,31,1,31,1,31,1,32,5,32,732,
        8,32,10,32,12,32,735,9,32,1,32,1,32,1,32,1,32,1,33,1,33,1,34,1,34,
        1,34,1,34,3,34,747,8,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,
        1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,39,1,39,1,39,3,39,776,8,39,1,40,1,40,3,40,780,8,
        40,1,41,5,41,783,8,41,10,41,12,41,786,9,41,1,41,1,41,1,41,3,41,791,
        8,41,1,41,3,41,794,8,41,1,41,3,41,797,8,41,1,41,1,41,1,42,1,42,1,
        42,1,42,1,42,1,42,1,42,1,42,3,42,809,8,42,1,43,1,43,1,43,1,43,1,
        44,1,44,1,44,5,44,818,8,44,10,44,12,44,821,9,44,1,45,1,45,1,45,1,
        46,1,46,1,46,1,47,1,47,1,47,5,47,832,8,47,10,47,12,47,835,9,47,1,
        48,1,48,5,48,839,8,48,10,48,12,48,842,9,48,1,48,1,48,1,49,1,49,1,
        49,1,49,3,49,850,8,49,1,50,1,50,1,50,1,50,1,50,3,50,857,8,50,1,51,
        5,51,860,8,51,10,51,12,51,863,9,51,1,51,1,51,1,51,1,51,1,52,1,52,
        1,52,1,52,1,52,1,52,1,52,1,52,3,52,877,8,52,1,53,1,53,1,53,5,53,
        882,8,53,10,53,12,53,885,9,53,1,54,1,54,1,54,3,54,890,8,54,1,55,
        1,55,3,55,894,8,55,1,56,1,56,3,56,898,8,56,1,57,1,57,3,57,902,8,
        57,1,58,1,58,3,58,906,8,58,1,59,1,59,1,59,3,59,911,8,59,1,60,1,60,
        3,60,915,8,60,1,60,1,60,5,60,919,8,60,10,60,12,60,922,9,60,1,61,
        1,61,3,61,926,8,61,1,61,1,61,1,61,5,61,931,8,61,10,61,12,61,934,
        9,61,1,61,1,61,3,61,938,8,61,3,61,940,8,61,1,62,1,62,5,62,944,8,
        62,10,62,12,62,947,9,62,1,62,1,62,3,62,951,8,62,1,63,1,63,3,63,955,
        8,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,3,68,974,8,68,1,69,5,69,977,8,69,10,69,
        12,69,980,9,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,3,70,995,8,70,1,71,1,71,1,71,3,71,1000,8,71,1,71,
        1,71,5,71,1004,8,71,10,71,12,71,1007,9,71,1,71,1,71,1,71,3,71,1012,
        8,71,3,71,1014,8,71,1,72,1,72,3,72,1018,8,72,1,73,1,73,1,73,3,73,
        1023,8,73,1,73,1,73,3,73,1027,8,73,1,74,1,74,1,74,1,74,1,74,1,74,
        3,74,1035,8,74,1,75,1,75,1,75,5,75,1040,8,75,10,75,12,75,1043,9,
        75,1,75,1,75,1,75,5,75,1048,8,75,10,75,12,75,1051,9,75,3,75,1053,
        8,75,1,76,5,76,1056,8,76,10,76,12,76,1059,9,76,1,76,1,76,1,76,1,
        77,1,77,3,77,1066,8,77,1,78,5,78,1069,8,78,10,78,12,78,1072,9,78,
        1,78,1,78,5,78,1076,8,78,10,78,12,78,1079,9,78,1,78,1,78,1,78,1,
        78,3,78,1085,8,78,1,79,5,79,1088,8,79,10,79,12,79,1091,9,79,1,79,
        1,79,1,79,3,79,1096,8,79,1,79,1,79,1,80,1,80,1,80,1,81,1,81,1,81,
        5,81,1106,8,81,10,81,12,81,1109,9,81,1,82,1,82,3,82,1113,8,82,1,
        83,1,83,3,83,1117,8,83,1,84,1,84,1,85,1,85,1,85,1,86,5,86,1125,8,
        86,10,86,12,86,1128,9,86,1,86,1,86,3,86,1132,8,86,1,86,1,86,1,87,
        1,87,1,87,1,87,3,87,1140,8,87,1,88,3,88,1143,8,88,1,88,1,88,1,88,
        3,88,1148,8,88,1,88,1,88,1,89,1,89,1,90,1,90,3,90,1156,8,90,1,90,
        3,90,1159,8,90,1,90,1,90,1,91,3,91,1164,8,91,1,91,1,91,1,91,3,91,
        1169,8,91,1,91,1,91,1,91,3,91,1174,8,91,1,91,1,91,1,91,3,91,1179,
        8,91,1,91,1,91,1,91,1,91,1,91,3,91,1186,8,91,1,91,1,91,1,91,3,91,
        1191,8,91,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1199,8,91,1,91,1,91,
        1,91,3,91,1204,8,91,1,91,1,91,1,91,3,91,1209,8,91,1,92,5,92,1212,
        8,92,10,92,12,92,1215,9,92,1,92,1,92,1,92,3,92,1220,8,92,1,92,1,
        92,1,93,1,93,3,93,1226,8,93,1,93,3,93,1229,8,93,1,93,3,93,1232,8,
        93,1,93,1,93,1,94,1,94,1,94,5,94,1239,8,94,10,94,12,94,1242,9,94,
        1,95,5,95,1245,8,95,10,95,12,95,1248,9,95,1,95,1,95,1,95,3,95,1253,
        8,95,1,95,3,95,1256,8,95,1,95,3,95,1259,8,95,1,96,1,96,1,97,1,97,
        5,97,1265,8,97,10,97,12,97,1268,9,97,1,98,1,98,3,98,1272,8,98,1,
        99,5,99,1275,8,99,10,99,12,99,1278,9,99,1,99,1,99,1,99,3,99,1283,
        8,99,1,99,3,99,1286,8,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,
        1,100,1,100,3,100,1297,8,100,1,101,1,101,1,101,1,102,1,102,5,102,
        1304,8,102,10,102,12,102,1307,9,102,1,102,1,102,1,103,1,103,1,103,
        1,103,1,103,3,103,1316,8,103,1,104,5,104,1319,8,104,10,104,12,104,
        1322,9,104,1,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,3,105,
        1332,8,105,1,106,5,106,1335,8,106,10,106,12,106,1338,9,106,1,106,
        1,106,1,106,1,107,1,107,1,107,1,107,1,107,1,107,3,107,1349,8,107,
        1,108,5,108,1352,8,108,10,108,12,108,1355,9,108,1,108,1,108,1,108,
        1,108,1,108,1,109,1,109,5,109,1364,8,109,10,109,12,109,1367,9,109,
        1,109,1,109,1,110,1,110,1,110,1,110,1,110,3,110,1376,8,110,1,111,
        5,111,1379,8,111,10,111,12,111,1382,9,111,1,111,1,111,1,111,1,111,
        1,111,3,111,1389,8,111,1,111,3,111,1392,8,111,1,111,1,111,1,112,
        1,112,1,112,3,112,1399,8,112,1,113,1,113,1,113,1,114,1,114,1,114,
        3,114,1407,8,114,1,115,1,115,1,115,1,115,3,115,1413,8,115,1,115,
        1,115,1,116,1,116,1,116,5,116,1420,8,116,10,116,12,116,1423,9,116,
        1,117,1,117,1,117,1,117,1,118,1,118,1,118,3,118,1432,8,118,1,119,
        1,119,3,119,1436,8,119,1,119,3,119,1439,8,119,1,119,1,119,1,120,
        1,120,1,120,5,120,1446,8,120,10,120,12,120,1449,9,120,1,121,1,121,
        1,121,1,122,1,122,1,122,1,122,1,122,1,122,1,123,1,123,3,123,1462,
        8,123,1,123,3,123,1465,8,123,1,123,1,123,1,124,1,124,1,124,5,124,
        1472,8,124,10,124,12,124,1475,9,124,1,125,1,125,3,125,1479,8,125,
        1,125,1,125,1,126,4,126,1484,8,126,11,126,12,126,1485,1,127,1,127,
        1,127,3,127,1491,8,127,1,128,1,128,1,128,1,129,5,129,1497,8,129,
        10,129,12,129,1500,9,129,1,129,1,129,1,129,1,130,1,130,1,130,1,130,
        1,130,1,130,3,130,1511,8,130,1,131,1,131,1,131,1,131,1,131,3,131,
        1518,8,131,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,1,132,
        1,132,1,132,1,132,3,132,1532,8,132,1,133,1,133,1,134,1,134,1,134,
        1,134,1,135,1,135,1,135,1,135,1,136,1,136,1,136,1,137,1,137,1,137,
        1,137,1,137,1,137,1,137,3,137,1554,8,137,1,138,1,138,1,138,1,138,
        1,138,1,138,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,140,
        1,140,1,140,1,140,1,140,1,140,1,140,1,140,1,141,1,141,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,3,141,1588,8,141,1,142,1,142,
        1,142,1,142,1,142,1,142,1,143,1,143,5,143,1598,8,143,10,143,12,143,
        1601,9,143,1,143,5,143,1604,8,143,10,143,12,143,1607,9,143,1,143,
        1,143,1,144,1,144,1,144,1,145,1,145,5,145,1616,8,145,10,145,12,145,
        1619,9,145,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,1,146,
        1,146,3,146,1631,8,146,1,147,1,147,1,148,1,148,1,148,1,148,1,148,
        1,148,1,149,1,149,1,149,1,149,1,149,1,149,1,150,1,150,1,150,1,150,
        1,150,1,150,1,150,1,150,1,151,1,151,3,151,1657,8,151,1,152,1,152,
        3,152,1661,8,152,1,153,1,153,1,153,3,153,1666,8,153,1,153,1,153,
        3,153,1670,8,153,1,153,1,153,3,153,1674,8,153,1,153,1,153,1,153,
        1,154,1,154,1,154,3,154,1682,8,154,1,154,1,154,3,154,1686,8,154,
        1,154,1,154,3,154,1690,8,154,1,154,1,154,1,154,1,155,1,155,3,155,
        1697,8,155,1,156,1,156,1,157,1,157,1,157,5,157,1704,8,157,10,157,
        12,157,1707,9,157,1,158,1,158,1,158,5,158,1712,8,158,10,158,12,158,
        1715,9,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,159,1,159,
        1,159,5,159,1727,8,159,10,159,12,159,1730,9,159,1,159,1,159,1,159,
        1,159,1,159,1,159,1,159,1,160,1,160,3,160,1741,8,160,1,160,1,160,
        1,161,1,161,3,161,1747,8,161,1,161,1,161,1,162,1,162,3,162,1753,
        8,162,1,162,1,162,1,163,1,163,1,163,1,163,1,164,1,164,1,164,1,164,
        1,164,1,164,1,165,1,165,1,165,1,165,1,165,1,165,1,165,3,165,1774,
        8,165,1,165,1,165,1,165,3,165,1779,8,165,1,166,1,166,5,166,1783,
        8,166,10,166,12,166,1786,9,166,1,167,1,167,1,167,1,167,1,167,1,167,
        1,168,5,168,1795,8,168,10,168,12,168,1798,9,168,1,168,1,168,1,168,
        1,169,1,169,1,169,5,169,1806,8,169,10,169,12,169,1809,9,169,1,170,
        1,170,1,170,1,171,1,171,1,171,1,171,3,171,1818,8,171,1,171,3,171,
        1821,8,171,1,172,1,172,1,172,3,172,1826,8,172,1,172,1,172,1,173,
        1,173,1,173,5,173,1833,8,173,10,173,12,173,1836,9,173,1,174,5,174,
        1839,8,174,10,174,12,174,1842,9,174,1,174,1,174,1,174,1,174,1,174,
        1,175,1,175,3,175,1851,8,175,1,175,5,175,1854,8,175,10,175,12,175,
        1857,9,175,1,176,1,176,1,176,1,176,5,176,1863,8,176,10,176,12,176,
        1866,9,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,
        1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,1,176,
        3,176,1888,8,176,1,177,1,177,1,178,1,178,1,178,1,178,5,178,1896,
        8,178,10,178,12,178,1899,9,178,1,178,1,178,1,178,1,178,1,178,1,178,
        1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,
        1,178,1,178,3,178,1920,8,178,1,179,1,179,1,179,1,179,1,179,3,179,
        1927,8,179,1,180,1,180,1,181,1,181,1,181,1,181,3,181,1935,8,181,
        1,182,1,182,1,182,1,182,5,182,1941,8,182,10,182,12,182,1944,9,182,
        1,182,1,182,1,182,1,182,1,182,1,182,5,182,1952,8,182,10,182,12,182,
        1955,9,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,
        1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,
        3,182,1977,8,182,1,183,1,183,1,184,1,184,1,184,1,184,5,184,1985,
        8,184,10,184,12,184,1988,9,184,1,184,1,184,1,184,1,184,1,184,1,184,
        5,184,1996,8,184,10,184,12,184,1999,9,184,1,184,1,184,1,184,1,184,
        1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,
        1,184,1,184,1,184,1,184,3,184,2020,8,184,1,185,1,185,3,185,2024,
        8,185,1,185,5,185,2027,8,185,10,185,12,185,2030,9,185,1,185,1,185,
        1,185,5,185,2035,8,185,10,185,12,185,2038,9,185,1,185,5,185,2041,
        8,185,10,185,12,185,2044,9,185,1,185,3,185,2047,8,185,1,185,1,185,
        3,185,2051,8,185,1,185,1,185,3,185,2055,8,185,1,185,1,185,1,185,
        1,185,3,185,2061,8,185,1,185,5,185,2064,8,185,10,185,12,185,2067,
        9,185,1,185,1,185,3,185,2071,8,185,1,185,1,185,3,185,2075,8,185,
        1,185,1,185,3,185,2079,8,185,1,185,1,185,1,185,1,185,3,185,2085,
        8,185,1,185,5,185,2088,8,185,10,185,12,185,2091,9,185,1,185,1,185,
        3,185,2095,8,185,1,185,1,185,3,185,2099,8,185,1,185,1,185,3,185,
        2103,8,185,3,185,2105,8,185,1,186,1,186,1,186,3,186,2110,8,186,1,
        186,5,186,2113,8,186,10,186,12,186,2116,9,186,1,186,1,186,3,186,
        2120,8,186,1,186,1,186,3,186,2124,8,186,1,186,1,186,3,186,2128,8,
        186,1,187,1,187,3,187,2132,8,187,1,187,5,187,2135,8,187,10,187,12,
        187,2138,9,187,1,187,1,187,1,187,5,187,2143,8,187,10,187,12,187,
        2146,9,187,1,187,5,187,2149,8,187,10,187,12,187,2152,9,187,1,187,
        3,187,2155,8,187,1,187,1,187,3,187,2159,8,187,1,187,1,187,3,187,
        2163,8,187,1,187,1,187,1,187,1,187,3,187,2169,8,187,1,187,5,187,
        2172,8,187,10,187,12,187,2175,9,187,1,187,1,187,3,187,2179,8,187,
        1,187,1,187,3,187,2183,8,187,1,187,1,187,3,187,2187,8,187,3,187,
        2189,8,187,1,188,1,188,1,188,3,188,2194,8,188,1,189,1,189,1,189,
        1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,1,189,3,189,
        2209,8,189,1,190,1,190,1,190,1,191,1,191,1,191,1,191,1,191,1,191,
        1,191,1,191,1,191,3,191,2223,8,191,1,192,1,192,1,192,1,192,1,192,
        1,192,1,192,1,192,1,192,1,192,3,192,2235,8,192,1,192,1,192,1,192,
        1,192,1,192,5,192,2242,8,192,10,192,12,192,2245,9,192,1,193,1,193,
        1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,5,193,2257,8,193,
        10,193,12,193,2260,9,193,1,194,1,194,1,194,1,194,1,194,1,194,1,194,
        1,194,1,194,1,194,3,194,2272,8,194,1,194,1,194,1,194,1,194,1,194,
        5,194,2279,8,194,10,194,12,194,2282,9,194,1,195,1,195,1,195,3,195,
        2287,8,195,1,195,1,195,1,195,1,195,1,195,3,195,2294,8,195,1,195,
        1,195,1,195,3,195,2299,8,195,1,195,1,195,1,195,1,195,1,195,3,195,
        2306,8,195,1,195,1,195,1,195,3,195,2311,8,195,1,195,1,195,1,195,
        1,195,1,195,3,195,2318,8,195,1,195,1,195,1,195,3,195,2323,8,195,
        1,195,1,195,1,195,1,195,1,195,3,195,2330,8,195,1,195,1,195,1,195,
        3,195,2335,8,195,1,195,1,195,1,195,1,195,1,195,1,195,3,195,2343,
        8,195,1,195,1,195,1,195,3,195,2348,8,195,1,195,1,195,3,195,2352,
        8,195,1,196,1,196,3,196,2356,8,196,1,196,1,196,1,196,3,196,2361,
        8,196,1,196,1,196,1,197,1,197,1,197,3,197,2368,8,197,1,197,1,197,
        1,197,1,197,1,197,3,197,2375,8,197,1,197,1,197,1,197,3,197,2380,
        8,197,1,197,1,197,1,197,1,197,1,197,3,197,2387,8,197,1,197,1,197,
        1,197,3,197,2392,8,197,1,197,1,197,1,197,1,197,1,197,3,197,2399,
        8,197,1,197,1,197,1,197,3,197,2404,8,197,1,197,1,197,1,197,1,197,
        1,197,1,197,3,197,2412,8,197,1,197,1,197,1,197,3,197,2417,8,197,
        1,197,1,197,3,197,2421,8,197,1,198,1,198,1,198,5,198,2426,8,198,
        10,198,12,198,2429,9,198,1,199,1,199,1,199,3,199,2434,8,199,1,199,
        1,199,1,199,1,199,1,199,3,199,2441,8,199,1,199,1,199,1,199,1,199,
        1,199,3,199,2448,8,199,1,199,1,199,1,199,1,199,1,199,3,199,2455,
        8,199,1,199,1,199,1,199,1,199,1,199,1,199,3,199,2463,8,199,1,199,
        1,199,1,199,1,199,1,199,3,199,2470,8,199,1,199,1,199,1,199,1,199,
        1,199,1,199,3,199,2478,8,199,1,200,1,200,3,200,2482,8,200,1,200,
        1,200,1,201,1,201,1,201,3,201,2489,8,201,1,201,1,201,1,201,1,201,
        1,201,3,201,2496,8,201,1,201,1,201,1,201,1,201,1,201,3,201,2503,
        8,201,1,201,1,201,1,201,1,201,1,201,1,201,3,201,2511,8,201,1,201,
        1,201,1,201,1,201,1,201,3,201,2518,8,201,1,201,1,201,1,201,1,201,
        1,201,1,201,3,201,2526,8,201,1,202,1,202,1,202,1,202,3,202,2532,
        8,202,1,202,1,202,1,202,1,202,3,202,2538,8,202,1,202,1,202,1,202,
        1,202,1,202,1,202,1,202,1,202,1,202,1,202,3,202,2550,8,202,1,203,
        1,203,5,203,2554,8,203,10,203,12,203,2557,9,203,1,204,5,204,2560,
        8,204,10,204,12,204,2563,9,204,1,204,1,204,1,204,1,204,1,205,1,205,
        1,206,1,206,3,206,2573,8,206,1,207,1,207,1,207,1,207,1,208,1,208,
        1,208,3,208,2582,8,208,1,208,1,208,1,208,1,208,1,208,3,208,2589,
        8,208,1,209,1,209,1,209,5,209,2594,8,209,10,209,12,209,2597,9,209,
        1,210,1,210,3,210,2601,8,210,1,211,1,211,3,211,2605,8,211,1,212,
        1,212,1,212,1,212,1,213,1,213,1,213,3,213,2614,8,213,1,214,1,214,
        1,215,1,215,1,215,1,215,1,215,1,215,1,215,3,215,2625,8,215,1,216,
        1,216,1,216,1,216,1,216,1,216,5,216,2633,8,216,10,216,12,216,2636,
        9,216,1,217,1,217,1,217,1,217,1,217,1,217,5,217,2644,8,217,10,217,
        12,217,2647,9,217,1,218,1,218,1,218,1,218,1,218,1,218,5,218,2655,
        8,218,10,218,12,218,2658,9,218,1,219,1,219,1,219,1,219,1,219,1,219,
        5,219,2666,8,219,10,219,12,219,2669,9,219,1,220,1,220,1,220,1,220,
        1,220,1,220,5,220,2677,8,220,10,220,12,220,2680,9,220,1,221,1,221,
        1,221,1,221,1,221,1,221,1,221,1,221,1,221,5,221,2691,8,221,10,221,
        12,221,2694,9,221,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,
        1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,5,222,
        2714,8,222,10,222,12,222,2717,9,222,1,223,1,223,1,223,1,223,1,223,
        1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,
        5,223,2735,8,223,10,223,12,223,2738,9,223,1,224,1,224,1,224,1,224,
        1,224,1,224,1,224,1,224,1,224,5,224,2749,8,224,10,224,12,224,2752,
        9,224,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,1,225,
        1,225,1,225,5,225,2766,8,225,10,225,12,225,2769,9,225,1,226,1,226,
        1,226,1,226,1,226,1,226,1,226,3,226,2778,8,226,1,227,1,227,1,227,
        1,228,1,228,1,228,1,229,1,229,1,229,1,229,1,229,1,229,3,229,2792,
        8,229,1,230,1,230,3,230,2796,8,230,1,230,1,230,5,230,2800,8,230,
        10,230,12,230,2803,9,230,1,231,1,231,1,231,1,232,1,232,1,233,1,233,
        1,233,1,234,1,234,1,235,1,235,1,235,1,235,1,235,1,235,1,235,1,235,
        5,235,2823,8,235,10,235,12,235,2826,9,235,1,235,1,235,1,235,1,235,
        1,235,1,235,5,235,2834,8,235,10,235,12,235,2837,9,235,1,235,1,235,
        1,235,3,235,2842,8,235,1,235,0,13,50,54,60,432,434,436,438,440,442,
        444,446,448,450,236,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
        116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
        148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
        180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
        212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,
        244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,
        276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,
        308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,
        340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,
        372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,
        404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,
        436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,
        468,470,0,4,1,0,51,56,5,0,5,5,8,8,27,27,29,29,37,37,2,0,14,14,20,
        20,2,0,66,66,91,101,3085,0,472,1,0,0,0,2,488,1,0,0,0,4,492,1,0,0,
        0,6,494,1,0,0,0,8,496,1,0,0,0,10,501,1,0,0,0,12,505,1,0,0,0,14,536,
        1,0,0,0,16,538,1,0,0,0,18,552,1,0,0,0,20,559,1,0,0,0,22,561,1,0,
        0,0,24,563,1,0,0,0,26,568,1,0,0,0,28,582,1,0,0,0,30,587,1,0,0,0,
        32,608,1,0,0,0,34,615,1,0,0,0,36,627,1,0,0,0,38,629,1,0,0,0,40,632,
        1,0,0,0,42,636,1,0,0,0,44,646,1,0,0,0,46,651,1,0,0,0,48,662,1,0,
        0,0,50,664,1,0,0,0,52,680,1,0,0,0,54,682,1,0,0,0,56,698,1,0,0,0,
        58,700,1,0,0,0,60,702,1,0,0,0,62,714,1,0,0,0,64,733,1,0,0,0,66,740,
        1,0,0,0,68,746,1,0,0,0,70,748,1,0,0,0,72,752,1,0,0,0,74,758,1,0,
        0,0,76,765,1,0,0,0,78,775,1,0,0,0,80,779,1,0,0,0,82,784,1,0,0,0,
        84,808,1,0,0,0,86,810,1,0,0,0,88,814,1,0,0,0,90,822,1,0,0,0,92,825,
        1,0,0,0,94,828,1,0,0,0,96,836,1,0,0,0,98,849,1,0,0,0,100,856,1,0,
        0,0,102,861,1,0,0,0,104,876,1,0,0,0,106,878,1,0,0,0,108,886,1,0,
        0,0,110,891,1,0,0,0,112,897,1,0,0,0,114,901,1,0,0,0,116,905,1,0,
        0,0,118,910,1,0,0,0,120,914,1,0,0,0,122,939,1,0,0,0,124,941,1,0,
        0,0,126,952,1,0,0,0,128,956,1,0,0,0,130,958,1,0,0,0,132,960,1,0,
        0,0,134,962,1,0,0,0,136,973,1,0,0,0,138,978,1,0,0,0,140,994,1,0,
        0,0,142,1013,1,0,0,0,144,1017,1,0,0,0,146,1019,1,0,0,0,148,1034,
        1,0,0,0,150,1052,1,0,0,0,152,1057,1,0,0,0,154,1065,1,0,0,0,156,1084,
        1,0,0,0,158,1089,1,0,0,0,160,1099,1,0,0,0,162,1102,1,0,0,0,164,1112,
        1,0,0,0,166,1116,1,0,0,0,168,1118,1,0,0,0,170,1120,1,0,0,0,172,1126,
        1,0,0,0,174,1139,1,0,0,0,176,1142,1,0,0,0,178,1151,1,0,0,0,180,1153,
        1,0,0,0,182,1208,1,0,0,0,184,1213,1,0,0,0,186,1223,1,0,0,0,188,1235,
        1,0,0,0,190,1246,1,0,0,0,192,1260,1,0,0,0,194,1262,1,0,0,0,196,1271,
        1,0,0,0,198,1276,1,0,0,0,200,1296,1,0,0,0,202,1298,1,0,0,0,204,1301,
        1,0,0,0,206,1315,1,0,0,0,208,1320,1,0,0,0,210,1331,1,0,0,0,212,1336,
        1,0,0,0,214,1348,1,0,0,0,216,1353,1,0,0,0,218,1361,1,0,0,0,220,1375,
        1,0,0,0,222,1380,1,0,0,0,224,1398,1,0,0,0,226,1400,1,0,0,0,228,1406,
        1,0,0,0,230,1408,1,0,0,0,232,1416,1,0,0,0,234,1424,1,0,0,0,236,1431,
        1,0,0,0,238,1433,1,0,0,0,240,1442,1,0,0,0,242,1450,1,0,0,0,244,1453,
        1,0,0,0,246,1459,1,0,0,0,248,1468,1,0,0,0,250,1476,1,0,0,0,252,1483,
        1,0,0,0,254,1490,1,0,0,0,256,1492,1,0,0,0,258,1498,1,0,0,0,260,1510,
        1,0,0,0,262,1517,1,0,0,0,264,1531,1,0,0,0,266,1533,1,0,0,0,268,1535,
        1,0,0,0,270,1539,1,0,0,0,272,1543,1,0,0,0,274,1553,1,0,0,0,276,1555,
        1,0,0,0,278,1561,1,0,0,0,280,1569,1,0,0,0,282,1587,1,0,0,0,284,1589,
        1,0,0,0,286,1595,1,0,0,0,288,1610,1,0,0,0,290,1613,1,0,0,0,292,1630,
        1,0,0,0,294,1632,1,0,0,0,296,1634,1,0,0,0,298,1640,1,0,0,0,300,1646,
        1,0,0,0,302,1656,1,0,0,0,304,1660,1,0,0,0,306,1662,1,0,0,0,308,1678,
        1,0,0,0,310,1696,1,0,0,0,312,1698,1,0,0,0,314,1700,1,0,0,0,316,1708,
        1,0,0,0,318,1723,1,0,0,0,320,1738,1,0,0,0,322,1744,1,0,0,0,324,1750,
        1,0,0,0,326,1756,1,0,0,0,328,1760,1,0,0,0,330,1778,1,0,0,0,332,1780,
        1,0,0,0,334,1787,1,0,0,0,336,1796,1,0,0,0,338,1802,1,0,0,0,340,1810,
        1,0,0,0,342,1813,1,0,0,0,344,1822,1,0,0,0,346,1829,1,0,0,0,348,1840,
        1,0,0,0,350,1850,1,0,0,0,352,1887,1,0,0,0,354,1889,1,0,0,0,356,1919,
        1,0,0,0,358,1926,1,0,0,0,360,1928,1,0,0,0,362,1934,1,0,0,0,364,1976,
        1,0,0,0,366,1978,1,0,0,0,368,2019,1,0,0,0,370,2104,1,0,0,0,372,2106,
        1,0,0,0,374,2188,1,0,0,0,376,2193,1,0,0,0,378,2208,1,0,0,0,380,2210,
        1,0,0,0,382,2222,1,0,0,0,384,2234,1,0,0,0,386,2246,1,0,0,0,388,2271,
        1,0,0,0,390,2351,1,0,0,0,392,2353,1,0,0,0,394,2420,1,0,0,0,396,2422,
        1,0,0,0,398,2477,1,0,0,0,400,2479,1,0,0,0,402,2525,1,0,0,0,404,2549,
        1,0,0,0,406,2551,1,0,0,0,408,2561,1,0,0,0,410,2568,1,0,0,0,412,2572,
        1,0,0,0,414,2574,1,0,0,0,416,2588,1,0,0,0,418,2590,1,0,0,0,420,2600,
        1,0,0,0,422,2604,1,0,0,0,424,2606,1,0,0,0,426,2613,1,0,0,0,428,2615,
        1,0,0,0,430,2624,1,0,0,0,432,2626,1,0,0,0,434,2637,1,0,0,0,436,2648,
        1,0,0,0,438,2659,1,0,0,0,440,2670,1,0,0,0,442,2681,1,0,0,0,444,2695,
        1,0,0,0,446,2718,1,0,0,0,448,2739,1,0,0,0,450,2753,1,0,0,0,452,2777,
        1,0,0,0,454,2779,1,0,0,0,456,2782,1,0,0,0,458,2791,1,0,0,0,460,2795,
        1,0,0,0,462,2804,1,0,0,0,464,2807,1,0,0,0,466,2809,1,0,0,0,468,2812,
        1,0,0,0,470,2841,1,0,0,0,472,473,7,0,0,0,473,1,1,0,0,0,474,476,3,
        228,114,0,475,474,1,0,0,0,476,479,1,0,0,0,477,475,1,0,0,0,477,478,
        1,0,0,0,478,480,1,0,0,0,479,477,1,0,0,0,480,489,3,4,2,0,481,483,
        3,228,114,0,482,481,1,0,0,0,483,486,1,0,0,0,484,482,1,0,0,0,484,
        485,1,0,0,0,485,487,1,0,0,0,486,484,1,0,0,0,487,489,5,3,0,0,488,
        477,1,0,0,0,488,484,1,0,0,0,489,3,1,0,0,0,490,493,3,6,3,0,491,493,
        3,8,4,0,492,490,1,0,0,0,492,491,1,0,0,0,493,5,1,0,0,0,494,495,7,
        1,0,0,495,7,1,0,0,0,496,497,7,2,0,0,497,9,1,0,0,0,498,502,3,12,6,
        0,499,502,3,26,13,0,500,502,3,28,14,0,501,498,1,0,0,0,501,499,1,
        0,0,0,501,500,1,0,0,0,502,11,1,0,0,0,503,506,3,18,9,0,504,506,3,
        24,12,0,505,503,1,0,0,0,505,504,1,0,0,0,506,511,1,0,0,0,507,510,
        3,16,8,0,508,510,3,22,11,0,509,507,1,0,0,0,509,508,1,0,0,0,510,513,
        1,0,0,0,511,509,1,0,0,0,511,512,1,0,0,0,512,13,1,0,0,0,513,511,1,
        0,0,0,514,516,3,228,114,0,515,514,1,0,0,0,516,519,1,0,0,0,517,515,
        1,0,0,0,517,518,1,0,0,0,518,520,1,0,0,0,519,517,1,0,0,0,520,522,
        5,102,0,0,521,523,3,40,20,0,522,521,1,0,0,0,522,523,1,0,0,0,523,
        537,1,0,0,0,524,525,3,12,6,0,525,529,5,65,0,0,526,528,3,228,114,
        0,527,526,1,0,0,0,528,531,1,0,0,0,529,527,1,0,0,0,529,530,1,0,0,
        0,530,532,1,0,0,0,531,529,1,0,0,0,532,534,5,102,0,0,533,535,3,40,
        20,0,534,533,1,0,0,0,534,535,1,0,0,0,535,537,1,0,0,0,536,517,1,0,
        0,0,536,524,1,0,0,0,537,15,1,0,0,0,538,542,5,65,0,0,539,541,3,228,
        114,0,540,539,1,0,0,0,541,544,1,0,0,0,542,540,1,0,0,0,542,543,1,
        0,0,0,543,545,1,0,0,0,544,542,1,0,0,0,545,547,5,102,0,0,546,548,
        3,40,20,0,547,546,1,0,0,0,547,548,1,0,0,0,548,17,1,0,0,0,549,551,
        3,228,114,0,550,549,1,0,0,0,551,554,1,0,0,0,552,550,1,0,0,0,552,
        553,1,0,0,0,553,555,1,0,0,0,554,552,1,0,0,0,555,557,5,102,0,0,556,
        558,3,40,20,0,557,556,1,0,0,0,557,558,1,0,0,0,558,19,1,0,0,0,559,
        560,3,14,7,0,560,21,1,0,0,0,561,562,3,16,8,0,562,23,1,0,0,0,563,
        564,3,18,9,0,564,25,1,0,0,0,565,567,3,228,114,0,566,565,1,0,0,0,
        567,570,1,0,0,0,568,566,1,0,0,0,568,569,1,0,0,0,569,571,1,0,0,0,
        570,568,1,0,0,0,571,572,5,102,0,0,572,27,1,0,0,0,573,574,3,2,1,0,
        574,575,3,30,15,0,575,583,1,0,0,0,576,577,3,12,6,0,577,578,3,30,
        15,0,578,583,1,0,0,0,579,580,3,26,13,0,580,581,3,30,15,0,581,583,
        1,0,0,0,582,573,1,0,0,0,582,576,1,0,0,0,582,579,1,0,0,0,583,29,1,
        0,0,0,584,586,3,228,114,0,585,584,1,0,0,0,586,589,1,0,0,0,587,585,
        1,0,0,0,587,588,1,0,0,0,588,590,1,0,0,0,589,587,1,0,0,0,590,591,
        5,61,0,0,591,602,5,62,0,0,592,594,3,228,114,0,593,592,1,0,0,0,594,
        597,1,0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,598,1,0,0,0,597,
        595,1,0,0,0,598,599,5,61,0,0,599,601,5,62,0,0,600,595,1,0,0,0,601,
        604,1,0,0,0,602,600,1,0,0,0,602,603,1,0,0,0,603,31,1,0,0,0,604,602,
        1,0,0,0,605,607,3,34,17,0,606,605,1,0,0,0,607,610,1,0,0,0,608,606,
        1,0,0,0,608,609,1,0,0,0,609,611,1,0,0,0,610,608,1,0,0,0,611,613,
        5,102,0,0,612,614,3,36,18,0,613,612,1,0,0,0,613,614,1,0,0,0,614,
        33,1,0,0,0,615,616,3,228,114,0,616,35,1,0,0,0,617,618,5,17,0,0,618,
        628,3,26,13,0,619,620,5,17,0,0,620,624,3,12,6,0,621,623,3,38,19,
        0,622,621,1,0,0,0,623,626,1,0,0,0,624,622,1,0,0,0,624,625,1,0,0,
        0,625,628,1,0,0,0,626,624,1,0,0,0,627,617,1,0,0,0,627,619,1,0,0,
        0,628,37,1,0,0,0,629,630,5,85,0,0,630,631,3,20,10,0,631,39,1,0,0,
        0,632,633,5,68,0,0,633,634,3,42,21,0,634,635,5,67,0,0,635,41,1,0,
        0,0,636,641,3,44,22,0,637,638,5,64,0,0,638,640,3,44,22,0,639,637,
        1,0,0,0,640,643,1,0,0,0,641,639,1,0,0,0,641,642,1,0,0,0,642,43,1,
        0,0,0,643,641,1,0,0,0,644,647,3,10,5,0,645,647,3,46,23,0,646,644,
        1,0,0,0,646,645,1,0,0,0,647,45,1,0,0,0,648,650,3,228,114,0,649,648,
        1,0,0,0,650,653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,654,
        1,0,0,0,653,651,1,0,0,0,654,656,5,71,0,0,655,657,3,48,24,0,656,655,
        1,0,0,0,656,657,1,0,0,0,657,47,1,0,0,0,658,659,5,17,0,0,659,663,
        3,10,5,0,660,661,5,40,0,0,661,663,3,10,5,0,662,658,1,0,0,0,662,660,
        1,0,0,0,663,49,1,0,0,0,664,665,6,25,-1,0,665,666,5,102,0,0,666,672,
        1,0,0,0,667,668,10,1,0,0,668,669,5,65,0,0,669,671,5,102,0,0,670,
        667,1,0,0,0,671,674,1,0,0,0,672,670,1,0,0,0,672,673,1,0,0,0,673,
        51,1,0,0,0,674,672,1,0,0,0,675,681,5,102,0,0,676,677,3,54,27,0,677,
        678,5,65,0,0,678,679,5,102,0,0,679,681,1,0,0,0,680,675,1,0,0,0,680,
        676,1,0,0,0,681,53,1,0,0,0,682,683,6,27,-1,0,683,684,5,102,0,0,684,
        690,1,0,0,0,685,686,10,1,0,0,686,687,5,65,0,0,687,689,5,102,0,0,
        688,685,1,0,0,0,689,692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,
        691,55,1,0,0,0,692,690,1,0,0,0,693,699,5,102,0,0,694,695,3,60,30,
        0,695,696,5,65,0,0,696,697,5,102,0,0,697,699,1,0,0,0,698,693,1,0,
        0,0,698,694,1,0,0,0,699,57,1,0,0,0,700,701,5,102,0,0,701,59,1,0,
        0,0,702,703,6,30,-1,0,703,704,5,102,0,0,704,710,1,0,0,0,705,706,
        10,1,0,0,706,707,5,65,0,0,707,709,5,102,0,0,708,705,1,0,0,0,709,
        712,1,0,0,0,710,708,1,0,0,0,710,711,1,0,0,0,711,61,1,0,0,0,712,710,
        1,0,0,0,713,715,3,64,32,0,714,713,1,0,0,0,714,715,1,0,0,0,715,719,
        1,0,0,0,716,718,3,68,34,0,717,716,1,0,0,0,718,721,1,0,0,0,719,717,
        1,0,0,0,719,720,1,0,0,0,720,725,1,0,0,0,721,719,1,0,0,0,722,724,
        3,78,39,0,723,722,1,0,0,0,724,727,1,0,0,0,725,723,1,0,0,0,725,726,
        1,0,0,0,726,728,1,0,0,0,727,725,1,0,0,0,728,729,5,0,0,1,729,63,1,
        0,0,0,730,732,3,66,33,0,731,730,1,0,0,0,732,735,1,0,0,0,733,731,
        1,0,0,0,733,734,1,0,0,0,734,736,1,0,0,0,735,733,1,0,0,0,736,737,
        5,32,0,0,737,738,3,50,25,0,738,739,5,63,0,0,739,65,1,0,0,0,740,741,
        3,228,114,0,741,67,1,0,0,0,742,747,3,70,35,0,743,747,3,72,36,0,744,
        747,3,74,37,0,745,747,3,76,38,0,746,742,1,0,0,0,746,743,1,0,0,0,
        746,744,1,0,0,0,746,745,1,0,0,0,747,69,1,0,0,0,748,749,5,25,0,0,
        749,750,3,52,26,0,750,751,5,63,0,0,751,71,1,0,0,0,752,753,5,25,0,
        0,753,754,3,54,27,0,754,755,5,65,0,0,755,756,5,83,0,0,756,757,5,
        63,0,0,757,73,1,0,0,0,758,759,5,25,0,0,759,760,5,38,0,0,760,761,
        3,52,26,0,761,762,5,65,0,0,762,763,5,102,0,0,763,764,5,63,0,0,764,
        75,1,0,0,0,765,766,5,25,0,0,766,767,5,38,0,0,767,768,3,52,26,0,768,
        769,5,65,0,0,769,770,5,83,0,0,770,771,5,63,0,0,771,77,1,0,0,0,772,
        776,3,80,40,0,773,776,3,196,98,0,774,776,5,63,0,0,775,772,1,0,0,
        0,775,773,1,0,0,0,775,774,1,0,0,0,776,79,1,0,0,0,777,780,3,82,41,
        0,778,780,3,184,92,0,779,777,1,0,0,0,779,778,1,0,0,0,780,81,1,0,
        0,0,781,783,3,84,42,0,782,781,1,0,0,0,783,786,1,0,0,0,784,782,1,
        0,0,0,784,785,1,0,0,0,785,787,1,0,0,0,786,784,1,0,0,0,787,788,5,
        9,0,0,788,790,5,102,0,0,789,791,3,86,43,0,790,789,1,0,0,0,790,791,
        1,0,0,0,791,793,1,0,0,0,792,794,3,90,45,0,793,792,1,0,0,0,793,794,
        1,0,0,0,794,796,1,0,0,0,795,797,3,92,46,0,796,795,1,0,0,0,796,797,
        1,0,0,0,797,798,1,0,0,0,798,799,3,96,48,0,799,83,1,0,0,0,800,809,
        3,228,114,0,801,809,5,35,0,0,802,809,5,34,0,0,803,809,5,33,0,0,804,
        809,5,1,0,0,805,809,5,38,0,0,806,809,5,18,0,0,807,809,5,39,0,0,808,
        800,1,0,0,0,808,801,1,0,0,0,808,802,1,0,0,0,808,803,1,0,0,0,808,
        804,1,0,0,0,808,805,1,0,0,0,808,806,1,0,0,0,808,807,1,0,0,0,809,
        85,1,0,0,0,810,811,5,68,0,0,811,812,3,88,44,0,812,813,5,67,0,0,813,
        87,1,0,0,0,814,819,3,32,16,0,815,816,5,64,0,0,816,818,3,32,16,0,
        817,815,1,0,0,0,818,821,1,0,0,0,819,817,1,0,0,0,819,820,1,0,0,0,
        820,89,1,0,0,0,821,819,1,0,0,0,822,823,5,17,0,0,823,824,3,14,7,0,
        824,91,1,0,0,0,825,826,5,24,0,0,826,827,3,94,47,0,827,93,1,0,0,0,
        828,833,3,20,10,0,829,830,5,64,0,0,830,832,3,20,10,0,831,829,1,0,
        0,0,832,835,1,0,0,0,833,831,1,0,0,0,833,834,1,0,0,0,834,95,1,0,0,
        0,835,833,1,0,0,0,836,840,5,59,0,0,837,839,3,98,49,0,838,837,1,0,
        0,0,839,842,1,0,0,0,840,838,1,0,0,0,840,841,1,0,0,0,841,843,1,0,
        0,0,842,840,1,0,0,0,843,844,5,60,0,0,844,97,1,0,0,0,845,850,3,100,
        50,0,846,850,3,168,84,0,847,850,3,170,85,0,848,850,3,172,86,0,849,
        845,1,0,0,0,849,846,1,0,0,0,849,847,1,0,0,0,849,848,1,0,0,0,850,
        99,1,0,0,0,851,857,3,102,51,0,852,857,3,138,69,0,853,857,3,80,40,
        0,854,857,3,196,98,0,855,857,5,63,0,0,856,851,1,0,0,0,856,852,1,
        0,0,0,856,853,1,0,0,0,856,854,1,0,0,0,856,855,1,0,0,0,857,101,1,
        0,0,0,858,860,3,104,52,0,859,858,1,0,0,0,860,863,1,0,0,0,861,859,
        1,0,0,0,861,862,1,0,0,0,862,864,1,0,0,0,863,861,1,0,0,0,864,865,
        3,114,57,0,865,866,3,106,53,0,866,867,5,63,0,0,867,103,1,0,0,0,868,
        877,3,228,114,0,869,877,5,35,0,0,870,877,5,34,0,0,871,877,5,33,0,
        0,872,877,5,38,0,0,873,877,5,18,0,0,874,877,5,46,0,0,875,877,5,49,
        0,0,876,868,1,0,0,0,876,869,1,0,0,0,876,870,1,0,0,0,876,871,1,0,
        0,0,876,872,1,0,0,0,876,873,1,0,0,0,876,874,1,0,0,0,876,875,1,0,
        0,0,877,105,1,0,0,0,878,883,3,108,54,0,879,880,5,64,0,0,880,882,
        3,108,54,0,881,879,1,0,0,0,882,885,1,0,0,0,883,881,1,0,0,0,883,884,
        1,0,0,0,884,107,1,0,0,0,885,883,1,0,0,0,886,889,3,110,55,0,887,888,
        5,66,0,0,888,890,3,112,56,0,889,887,1,0,0,0,889,890,1,0,0,0,890,
        109,1,0,0,0,891,893,5,102,0,0,892,894,3,30,15,0,893,892,1,0,0,0,
        893,894,1,0,0,0,894,111,1,0,0,0,895,898,3,412,206,0,896,898,3,246,
        123,0,897,895,1,0,0,0,897,896,1,0,0,0,898,113,1,0,0,0,899,902,3,
        116,58,0,900,902,3,118,59,0,901,899,1,0,0,0,901,900,1,0,0,0,902,
        115,1,0,0,0,903,906,3,4,2,0,904,906,5,3,0,0,905,903,1,0,0,0,905,
        904,1,0,0,0,906,117,1,0,0,0,907,911,3,120,60,0,908,911,3,134,67,
        0,909,911,3,136,68,0,910,907,1,0,0,0,910,908,1,0,0,0,910,909,1,0,
        0,0,911,119,1,0,0,0,912,915,3,126,63,0,913,915,3,132,66,0,914,912,
        1,0,0,0,914,913,1,0,0,0,915,920,1,0,0,0,916,919,3,124,62,0,917,919,
        3,130,65,0,918,916,1,0,0,0,918,917,1,0,0,0,919,922,1,0,0,0,920,918,
        1,0,0,0,920,921,1,0,0,0,921,121,1,0,0,0,922,920,1,0,0,0,923,925,
        5,102,0,0,924,926,3,40,20,0,925,924,1,0,0,0,925,926,1,0,0,0,926,
        940,1,0,0,0,927,928,3,120,60,0,928,932,5,65,0,0,929,931,3,228,114,
        0,930,929,1,0,0,0,931,934,1,0,0,0,932,930,1,0,0,0,932,933,1,0,0,
        0,933,935,1,0,0,0,934,932,1,0,0,0,935,937,5,102,0,0,936,938,3,40,
        20,0,937,936,1,0,0,0,937,938,1,0,0,0,938,940,1,0,0,0,939,923,1,0,
        0,0,939,927,1,0,0,0,940,123,1,0,0,0,941,945,5,65,0,0,942,944,3,228,
        114,0,943,942,1,0,0,0,944,947,1,0,0,0,945,943,1,0,0,0,945,946,1,
        0,0,0,946,948,1,0,0,0,947,945,1,0,0,0,948,950,5,102,0,0,949,951,
        3,40,20,0,950,949,1,0,0,0,950,951,1,0,0,0,951,125,1,0,0,0,952,954,
        5,102,0,0,953,955,3,40,20,0,954,953,1,0,0,0,954,955,1,0,0,0,955,
        127,1,0,0,0,956,957,3,122,61,0,957,129,1,0,0,0,958,959,3,124,62,
        0,959,131,1,0,0,0,960,961,3,126,63,0,961,133,1,0,0,0,962,963,5,102,
        0,0,963,135,1,0,0,0,964,965,3,116,58,0,965,966,3,30,15,0,966,974,
        1,0,0,0,967,968,3,120,60,0,968,969,3,30,15,0,969,974,1,0,0,0,970,
        971,3,134,67,0,971,972,3,30,15,0,972,974,1,0,0,0,973,964,1,0,0,0,
        973,967,1,0,0,0,973,970,1,0,0,0,974,137,1,0,0,0,975,977,3,140,70,
        0,976,975,1,0,0,0,977,980,1,0,0,0,978,976,1,0,0,0,978,979,1,0,0,
        0,979,981,1,0,0,0,980,978,1,0,0,0,981,982,3,142,71,0,982,983,3,166,
        83,0,983,139,1,0,0,0,984,995,3,228,114,0,985,995,5,35,0,0,986,995,
        5,34,0,0,987,995,5,33,0,0,988,995,5,1,0,0,989,995,5,38,0,0,990,995,
        5,18,0,0,991,995,5,42,0,0,992,995,5,30,0,0,993,995,5,39,0,0,994,
        984,1,0,0,0,994,985,1,0,0,0,994,986,1,0,0,0,994,987,1,0,0,0,994,
        988,1,0,0,0,994,989,1,0,0,0,994,990,1,0,0,0,994,991,1,0,0,0,994,
        992,1,0,0,0,994,993,1,0,0,0,995,141,1,0,0,0,996,997,3,144,72,0,997,
        999,3,146,73,0,998,1000,3,160,80,0,999,998,1,0,0,0,999,1000,1,0,
        0,0,1000,1014,1,0,0,0,1001,1005,3,86,43,0,1002,1004,3,228,114,0,
        1003,1002,1,0,0,0,1004,1007,1,0,0,0,1005,1003,1,0,0,0,1005,1006,
        1,0,0,0,1006,1008,1,0,0,0,1007,1005,1,0,0,0,1008,1009,3,144,72,0,
        1009,1011,3,146,73,0,1010,1012,3,160,80,0,1011,1010,1,0,0,0,1011,
        1012,1,0,0,0,1012,1014,1,0,0,0,1013,996,1,0,0,0,1013,1001,1,0,0,
        0,1014,143,1,0,0,0,1015,1018,3,114,57,0,1016,1018,5,48,0,0,1017,
        1015,1,0,0,0,1017,1016,1,0,0,0,1018,145,1,0,0,0,1019,1020,5,102,
        0,0,1020,1022,5,57,0,0,1021,1023,3,148,74,0,1022,1021,1,0,0,0,1022,
        1023,1,0,0,0,1023,1024,1,0,0,0,1024,1026,5,58,0,0,1025,1027,3,30,
        15,0,1026,1025,1,0,0,0,1026,1027,1,0,0,0,1027,147,1,0,0,0,1028,1035,
        3,158,79,0,1029,1030,3,150,75,0,1030,1031,5,64,0,0,1031,1032,3,156,
        78,0,1032,1035,1,0,0,0,1033,1035,3,156,78,0,1034,1028,1,0,0,0,1034,
        1029,1,0,0,0,1034,1033,1,0,0,0,1035,149,1,0,0,0,1036,1041,3,152,
        76,0,1037,1038,5,64,0,0,1038,1040,3,152,76,0,1039,1037,1,0,0,0,1040,
        1043,1,0,0,0,1041,1039,1,0,0,0,1041,1042,1,0,0,0,1042,1053,1,0,0,
        0,1043,1041,1,0,0,0,1044,1049,3,158,79,0,1045,1046,5,64,0,0,1046,
        1048,3,152,76,0,1047,1045,1,0,0,0,1048,1051,1,0,0,0,1049,1047,1,
        0,0,0,1049,1050,1,0,0,0,1050,1053,1,0,0,0,1051,1049,1,0,0,0,1052,
        1036,1,0,0,0,1052,1044,1,0,0,0,1053,151,1,0,0,0,1054,1056,3,154,
        77,0,1055,1054,1,0,0,0,1056,1059,1,0,0,0,1057,1055,1,0,0,0,1057,
        1058,1,0,0,0,1058,1060,1,0,0,0,1059,1057,1,0,0,0,1060,1061,3,114,
        57,0,1061,1062,3,110,55,0,1062,153,1,0,0,0,1063,1066,3,228,114,0,
        1064,1066,5,18,0,0,1065,1063,1,0,0,0,1065,1064,1,0,0,0,1066,155,
        1,0,0,0,1067,1069,3,154,77,0,1068,1067,1,0,0,0,1069,1072,1,0,0,0,
        1070,1068,1,0,0,0,1070,1071,1,0,0,0,1071,1073,1,0,0,0,1072,1070,
        1,0,0,0,1073,1077,3,114,57,0,1074,1076,3,228,114,0,1075,1074,1,0,
        0,0,1076,1079,1,0,0,0,1077,1075,1,0,0,0,1077,1078,1,0,0,0,1078,1080,
        1,0,0,0,1079,1077,1,0,0,0,1080,1081,5,104,0,0,1081,1082,3,110,55,
        0,1082,1085,1,0,0,0,1083,1085,3,152,76,0,1084,1070,1,0,0,0,1084,
        1083,1,0,0,0,1085,157,1,0,0,0,1086,1088,3,228,114,0,1087,1086,1,
        0,0,0,1088,1091,1,0,0,0,1089,1087,1,0,0,0,1089,1090,1,0,0,0,1090,
        1092,1,0,0,0,1091,1089,1,0,0,0,1092,1095,3,114,57,0,1093,1094,5,
        102,0,0,1094,1096,5,65,0,0,1095,1093,1,0,0,0,1095,1096,1,0,0,0,1096,
        1097,1,0,0,0,1097,1098,5,43,0,0,1098,159,1,0,0,0,1099,1100,5,45,
        0,0,1100,1101,3,162,81,0,1101,161,1,0,0,0,1102,1107,3,164,82,0,1103,
        1104,5,64,0,0,1104,1106,3,164,82,0,1105,1103,1,0,0,0,1106,1109,1,
        0,0,0,1107,1105,1,0,0,0,1107,1108,1,0,0,0,1108,163,1,0,0,0,1109,
        1107,1,0,0,0,1110,1113,3,14,7,0,1111,1113,3,26,13,0,1112,1110,1,
        0,0,0,1112,1111,1,0,0,0,1113,165,1,0,0,0,1114,1117,3,250,125,0,1115,
        1117,5,63,0,0,1116,1114,1,0,0,0,1116,1115,1,0,0,0,1117,167,1,0,0,
        0,1118,1119,3,250,125,0,1119,169,1,0,0,0,1120,1121,5,38,0,0,1121,
        1122,3,250,125,0,1122,171,1,0,0,0,1123,1125,3,174,87,0,1124,1123,
        1,0,0,0,1125,1128,1,0,0,0,1126,1124,1,0,0,0,1126,1127,1,0,0,0,1127,
        1129,1,0,0,0,1128,1126,1,0,0,0,1129,1131,3,176,88,0,1130,1132,3,
        160,80,0,1131,1130,1,0,0,0,1131,1132,1,0,0,0,1132,1133,1,0,0,0,1133,
        1134,3,180,90,0,1134,173,1,0,0,0,1135,1140,3,228,114,0,1136,1140,
        5,35,0,0,1137,1140,5,34,0,0,1138,1140,5,33,0,0,1139,1135,1,0,0,0,
        1139,1136,1,0,0,0,1139,1137,1,0,0,0,1139,1138,1,0,0,0,1140,175,1,
        0,0,0,1141,1143,3,86,43,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,
        1144,1,0,0,0,1144,1145,3,178,89,0,1145,1147,5,57,0,0,1146,1148,3,
        148,74,0,1147,1146,1,0,0,0,1147,1148,1,0,0,0,1148,1149,1,0,0,0,1149,
        1150,5,58,0,0,1150,177,1,0,0,0,1151,1152,5,102,0,0,1152,179,1,0,
        0,0,1153,1155,5,59,0,0,1154,1156,3,182,91,0,1155,1154,1,0,0,0,1155,
        1156,1,0,0,0,1156,1158,1,0,0,0,1157,1159,3,252,126,0,1158,1157,1,
        0,0,0,1158,1159,1,0,0,0,1159,1160,1,0,0,0,1160,1161,5,60,0,0,1161,
        181,1,0,0,0,1162,1164,3,40,20,0,1163,1162,1,0,0,0,1163,1164,1,0,
        0,0,1164,1165,1,0,0,0,1165,1166,5,43,0,0,1166,1168,5,57,0,0,1167,
        1169,3,396,198,0,1168,1167,1,0,0,0,1168,1169,1,0,0,0,1169,1170,1,
        0,0,0,1170,1171,5,58,0,0,1171,1209,5,63,0,0,1172,1174,3,40,20,0,
        1173,1172,1,0,0,0,1173,1174,1,0,0,0,1174,1175,1,0,0,0,1175,1176,
        5,40,0,0,1176,1178,5,57,0,0,1177,1179,3,396,198,0,1178,1177,1,0,
        0,0,1178,1179,1,0,0,0,1179,1180,1,0,0,0,1180,1181,5,58,0,0,1181,
        1209,5,63,0,0,1182,1183,3,56,28,0,1183,1185,5,65,0,0,1184,1186,3,
        40,20,0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,1187,1,0,0,0,1187,
        1188,5,40,0,0,1188,1190,5,57,0,0,1189,1191,3,396,198,0,1190,1189,
        1,0,0,0,1190,1191,1,0,0,0,1191,1192,1,0,0,0,1192,1193,5,58,0,0,1193,
        1194,5,63,0,0,1194,1209,1,0,0,0,1195,1196,3,350,175,0,1196,1198,
        5,65,0,0,1197,1199,3,40,20,0,1198,1197,1,0,0,0,1198,1199,1,0,0,0,
        1199,1200,1,0,0,0,1200,1201,5,40,0,0,1201,1203,5,57,0,0,1202,1204,
        3,396,198,0,1203,1202,1,0,0,0,1203,1204,1,0,0,0,1204,1205,1,0,0,
        0,1205,1206,5,58,0,0,1206,1207,5,63,0,0,1207,1209,1,0,0,0,1208,1163,
        1,0,0,0,1208,1173,1,0,0,0,1208,1182,1,0,0,0,1208,1195,1,0,0,0,1209,
        183,1,0,0,0,1210,1212,3,84,42,0,1211,1210,1,0,0,0,1212,1215,1,0,
        0,0,1213,1211,1,0,0,0,1213,1214,1,0,0,0,1214,1216,1,0,0,0,1215,1213,
        1,0,0,0,1216,1217,5,16,0,0,1217,1219,5,102,0,0,1218,1220,3,92,46,
        0,1219,1218,1,0,0,0,1219,1220,1,0,0,0,1220,1221,1,0,0,0,1221,1222,
        3,186,93,0,1222,185,1,0,0,0,1223,1225,5,59,0,0,1224,1226,3,188,94,
        0,1225,1224,1,0,0,0,1225,1226,1,0,0,0,1226,1228,1,0,0,0,1227,1229,
        5,64,0,0,1228,1227,1,0,0,0,1228,1229,1,0,0,0,1229,1231,1,0,0,0,1230,
        1232,3,194,97,0,1231,1230,1,0,0,0,1231,1232,1,0,0,0,1232,1233,1,
        0,0,0,1233,1234,5,60,0,0,1234,187,1,0,0,0,1235,1240,3,190,95,0,1236,
        1237,5,64,0,0,1237,1239,3,190,95,0,1238,1236,1,0,0,0,1239,1242,1,
        0,0,0,1240,1238,1,0,0,0,1240,1241,1,0,0,0,1241,189,1,0,0,0,1242,
        1240,1,0,0,0,1243,1245,3,192,96,0,1244,1243,1,0,0,0,1245,1248,1,
        0,0,0,1246,1244,1,0,0,0,1246,1247,1,0,0,0,1247,1249,1,0,0,0,1248,
        1246,1,0,0,0,1249,1255,5,102,0,0,1250,1252,5,57,0,0,1251,1253,3,
        396,198,0,1252,1251,1,0,0,0,1252,1253,1,0,0,0,1253,1254,1,0,0,0,
        1254,1256,5,58,0,0,1255,1250,1,0,0,0,1255,1256,1,0,0,0,1256,1258,
        1,0,0,0,1257,1259,3,96,48,0,1258,1257,1,0,0,0,1258,1259,1,0,0,0,
        1259,191,1,0,0,0,1260,1261,3,228,114,0,1261,193,1,0,0,0,1262,1266,
        5,63,0,0,1263,1265,3,98,49,0,1264,1263,1,0,0,0,1265,1268,1,0,0,0,
        1266,1264,1,0,0,0,1266,1267,1,0,0,0,1267,195,1,0,0,0,1268,1266,1,
        0,0,0,1269,1272,3,198,99,0,1270,1272,3,216,108,0,1271,1269,1,0,0,
        0,1271,1270,1,0,0,0,1272,197,1,0,0,0,1273,1275,3,200,100,0,1274,
        1273,1,0,0,0,1275,1278,1,0,0,0,1276,1274,1,0,0,0,1276,1277,1,0,0,
        0,1277,1279,1,0,0,0,1278,1276,1,0,0,0,1279,1280,5,28,0,0,1280,1282,
        5,102,0,0,1281,1283,3,86,43,0,1282,1281,1,0,0,0,1282,1283,1,0,0,
        0,1283,1285,1,0,0,0,1284,1286,3,202,101,0,1285,1284,1,0,0,0,1285,
        1286,1,0,0,0,1286,1287,1,0,0,0,1287,1288,3,204,102,0,1288,199,1,
        0,0,0,1289,1297,3,228,114,0,1290,1297,5,35,0,0,1291,1297,5,34,0,
        0,1292,1297,5,33,0,0,1293,1297,5,1,0,0,1294,1297,5,38,0,0,1295,1297,
        5,39,0,0,1296,1289,1,0,0,0,1296,1290,1,0,0,0,1296,1291,1,0,0,0,1296,
        1292,1,0,0,0,1296,1293,1,0,0,0,1296,1294,1,0,0,0,1296,1295,1,0,0,
        0,1297,201,1,0,0,0,1298,1299,5,17,0,0,1299,1300,3,94,47,0,1300,203,
        1,0,0,0,1301,1305,5,59,0,0,1302,1304,3,206,103,0,1303,1302,1,0,0,
        0,1304,1307,1,0,0,0,1305,1303,1,0,0,0,1305,1306,1,0,0,0,1306,1308,
        1,0,0,0,1307,1305,1,0,0,0,1308,1309,5,60,0,0,1309,205,1,0,0,0,1310,
        1316,3,208,104,0,1311,1316,3,212,106,0,1312,1316,3,80,40,0,1313,
        1316,3,196,98,0,1314,1316,5,63,0,0,1315,1310,1,0,0,0,1315,1311,1,
        0,0,0,1315,1312,1,0,0,0,1315,1313,1,0,0,0,1315,1314,1,0,0,0,1316,
        207,1,0,0,0,1317,1319,3,210,105,0,1318,1317,1,0,0,0,1319,1322,1,
        0,0,0,1320,1318,1,0,0,0,1320,1321,1,0,0,0,1321,1323,1,0,0,0,1322,
        1320,1,0,0,0,1323,1324,3,114,57,0,1324,1325,3,106,53,0,1325,1326,
        5,63,0,0,1326,209,1,0,0,0,1327,1332,3,228,114,0,1328,1332,5,35,0,
        0,1329,1332,5,38,0,0,1330,1332,5,18,0,0,1331,1327,1,0,0,0,1331,1328,
        1,0,0,0,1331,1329,1,0,0,0,1331,1330,1,0,0,0,1332,211,1,0,0,0,1333,
        1335,3,214,107,0,1334,1333,1,0,0,0,1335,1338,1,0,0,0,1336,1334,1,
        0,0,0,1336,1337,1,0,0,0,1337,1339,1,0,0,0,1338,1336,1,0,0,0,1339,
        1340,3,142,71,0,1340,1341,3,166,83,0,1341,213,1,0,0,0,1342,1349,
        3,228,114,0,1343,1349,5,35,0,0,1344,1349,5,1,0,0,1345,1349,5,12,
        0,0,1346,1349,5,38,0,0,1347,1349,5,39,0,0,1348,1342,1,0,0,0,1348,
        1343,1,0,0,0,1348,1344,1,0,0,0,1348,1345,1,0,0,0,1348,1346,1,0,0,
        0,1348,1347,1,0,0,0,1349,215,1,0,0,0,1350,1352,3,200,100,0,1351,
        1350,1,0,0,0,1352,1355,1,0,0,0,1353,1351,1,0,0,0,1353,1354,1,0,0,
        0,1354,1356,1,0,0,0,1355,1353,1,0,0,0,1356,1357,5,103,0,0,1357,1358,
        5,28,0,0,1358,1359,5,102,0,0,1359,1360,3,218,109,0,1360,217,1,0,
        0,0,1361,1365,5,59,0,0,1362,1364,3,220,110,0,1363,1362,1,0,0,0,1364,
        1367,1,0,0,0,1365,1363,1,0,0,0,1365,1366,1,0,0,0,1366,1368,1,0,0,
        0,1367,1365,1,0,0,0,1368,1369,5,60,0,0,1369,219,1,0,0,0,1370,1376,
        3,222,111,0,1371,1376,3,208,104,0,1372,1376,3,80,40,0,1373,1376,
        3,196,98,0,1374,1376,5,63,0,0,1375,1370,1,0,0,0,1375,1371,1,0,0,
        0,1375,1372,1,0,0,0,1375,1373,1,0,0,0,1375,1374,1,0,0,0,1376,221,
        1,0,0,0,1377,1379,3,224,112,0,1378,1377,1,0,0,0,1379,1382,1,0,0,
        0,1380,1378,1,0,0,0,1380,1381,1,0,0,0,1381,1383,1,0,0,0,1382,1380,
        1,0,0,0,1383,1384,3,114,57,0,1384,1385,5,102,0,0,1385,1386,5,57,
        0,0,1386,1388,5,58,0,0,1387,1389,3,30,15,0,1388,1387,1,0,0,0,1388,
        1389,1,0,0,0,1389,1391,1,0,0,0,1390,1392,3,226,113,0,1391,1390,1,
        0,0,0,1391,1392,1,0,0,0,1392,1393,1,0,0,0,1393,1394,5,63,0,0,1394,
        223,1,0,0,0,1395,1399,3,228,114,0,1396,1399,5,35,0,0,1397,1399,5,
        1,0,0,1398,1395,1,0,0,0,1398,1396,1,0,0,0,1398,1397,1,0,0,0,1399,
        225,1,0,0,0,1400,1401,5,12,0,0,1401,1402,3,236,118,0,1402,227,1,
        0,0,0,1403,1407,3,230,115,0,1404,1407,3,242,121,0,1405,1407,3,244,
        122,0,1406,1403,1,0,0,0,1406,1404,1,0,0,0,1406,1405,1,0,0,0,1407,
        229,1,0,0,0,1408,1409,5,103,0,0,1409,1410,3,52,26,0,1410,1412,5,
        57,0,0,1411,1413,3,232,116,0,1412,1411,1,0,0,0,1412,1413,1,0,0,0,
        1413,1414,1,0,0,0,1414,1415,5,58,0,0,1415,231,1,0,0,0,1416,1421,
        3,234,117,0,1417,1418,5,64,0,0,1418,1420,3,234,117,0,1419,1417,1,
        0,0,0,1420,1423,1,0,0,0,1421,1419,1,0,0,0,1421,1422,1,0,0,0,1422,
        233,1,0,0,0,1423,1421,1,0,0,0,1424,1425,5,102,0,0,1425,1426,5,66,
        0,0,1426,1427,3,236,118,0,1427,235,1,0,0,0,1428,1432,3,430,215,0,
        1429,1432,3,238,119,0,1430,1432,3,228,114,0,1431,1428,1,0,0,0,1431,
        1429,1,0,0,0,1431,1430,1,0,0,0,1432,237,1,0,0,0,1433,1435,5,59,0,
        0,1434,1436,3,240,120,0,1435,1434,1,0,0,0,1435,1436,1,0,0,0,1436,
        1438,1,0,0,0,1437,1439,5,64,0,0,1438,1437,1,0,0,0,1438,1439,1,0,
        0,0,1439,1440,1,0,0,0,1440,1441,5,60,0,0,1441,239,1,0,0,0,1442,1447,
        3,236,118,0,1443,1444,5,64,0,0,1444,1446,3,236,118,0,1445,1443,1,
        0,0,0,1446,1449,1,0,0,0,1447,1445,1,0,0,0,1447,1448,1,0,0,0,1448,
        241,1,0,0,0,1449,1447,1,0,0,0,1450,1451,5,103,0,0,1451,1452,3,52,
        26,0,1452,243,1,0,0,0,1453,1454,5,103,0,0,1454,1455,3,52,26,0,1455,
        1456,5,57,0,0,1456,1457,3,236,118,0,1457,1458,5,58,0,0,1458,245,
        1,0,0,0,1459,1461,5,59,0,0,1460,1462,3,248,124,0,1461,1460,1,0,0,
        0,1461,1462,1,0,0,0,1462,1464,1,0,0,0,1463,1465,5,64,0,0,1464,1463,
        1,0,0,0,1464,1465,1,0,0,0,1465,1466,1,0,0,0,1466,1467,5,60,0,0,1467,
        247,1,0,0,0,1468,1473,3,112,56,0,1469,1470,5,64,0,0,1470,1472,3,
        112,56,0,1471,1469,1,0,0,0,1472,1475,1,0,0,0,1473,1471,1,0,0,0,1473,
        1474,1,0,0,0,1474,249,1,0,0,0,1475,1473,1,0,0,0,1476,1478,5,59,0,
        0,1477,1479,3,252,126,0,1478,1477,1,0,0,0,1478,1479,1,0,0,0,1479,
        1480,1,0,0,0,1480,1481,5,60,0,0,1481,251,1,0,0,0,1482,1484,3,254,
        127,0,1483,1482,1,0,0,0,1484,1485,1,0,0,0,1485,1483,1,0,0,0,1485,
        1486,1,0,0,0,1486,253,1,0,0,0,1487,1491,3,256,128,0,1488,1491,3,
        80,40,0,1489,1491,3,260,130,0,1490,1487,1,0,0,0,1490,1488,1,0,0,
        0,1490,1489,1,0,0,0,1491,255,1,0,0,0,1492,1493,3,258,129,0,1493,
        1494,5,63,0,0,1494,257,1,0,0,0,1495,1497,3,154,77,0,1496,1495,1,
        0,0,0,1497,1500,1,0,0,0,1498,1496,1,0,0,0,1498,1499,1,0,0,0,1499,
        1501,1,0,0,0,1500,1498,1,0,0,0,1501,1502,3,114,57,0,1502,1503,3,
        106,53,0,1503,259,1,0,0,0,1504,1511,3,264,132,0,1505,1511,3,268,
        134,0,1506,1511,3,276,138,0,1507,1511,3,278,139,0,1508,1511,3,296,
        148,0,1509,1511,3,302,151,0,1510,1504,1,0,0,0,1510,1505,1,0,0,0,
        1510,1506,1,0,0,0,1510,1507,1,0,0,0,1510,1508,1,0,0,0,1510,1509,
        1,0,0,0,1511,261,1,0,0,0,1512,1518,3,264,132,0,1513,1518,3,270,135,
        0,1514,1518,3,280,140,0,1515,1518,3,298,149,0,1516,1518,3,304,152,
        0,1517,1512,1,0,0,0,1517,1513,1,0,0,0,1517,1514,1,0,0,0,1517,1515,
        1,0,0,0,1517,1516,1,0,0,0,1518,263,1,0,0,0,1519,1532,3,250,125,0,
        1520,1532,3,266,133,0,1521,1532,3,272,136,0,1522,1532,3,282,141,
        0,1523,1532,3,284,142,0,1524,1532,3,300,150,0,1525,1532,3,320,160,
        0,1526,1532,3,322,161,0,1527,1532,3,324,162,0,1528,1532,3,328,164,
        0,1529,1532,3,326,163,0,1530,1532,3,330,165,0,1531,1519,1,0,0,0,
        1531,1520,1,0,0,0,1531,1521,1,0,0,0,1531,1522,1,0,0,0,1531,1523,
        1,0,0,0,1531,1524,1,0,0,0,1531,1525,1,0,0,0,1531,1526,1,0,0,0,1531,
        1527,1,0,0,0,1531,1528,1,0,0,0,1531,1529,1,0,0,0,1531,1530,1,0,0,
        0,1532,265,1,0,0,0,1533,1534,5,63,0,0,1534,267,1,0,0,0,1535,1536,
        5,102,0,0,1536,1537,5,72,0,0,1537,1538,3,260,130,0,1538,269,1,0,
        0,0,1539,1540,5,102,0,0,1540,1541,5,72,0,0,1541,1542,3,262,131,0,
        1542,271,1,0,0,0,1543,1544,3,274,137,0,1544,1545,5,63,0,0,1545,273,
        1,0,0,0,1546,1554,3,424,212,0,1547,1554,3,454,227,0,1548,1554,3,
        456,228,0,1549,1554,3,462,231,0,1550,1554,3,466,233,0,1551,1554,
        3,390,195,0,1552,1554,3,370,185,0,1553,1546,1,0,0,0,1553,1547,1,
        0,0,0,1553,1548,1,0,0,0,1553,1549,1,0,0,0,1553,1550,1,0,0,0,1553,
        1551,1,0,0,0,1553,1552,1,0,0,0,1554,275,1,0,0,0,1555,1556,5,22,0,
        0,1556,1557,5,57,0,0,1557,1558,3,412,206,0,1558,1559,5,58,0,0,1559,
        1560,3,260,130,0,1560,277,1,0,0,0,1561,1562,5,22,0,0,1562,1563,5,
        57,0,0,1563,1564,3,412,206,0,1564,1565,5,58,0,0,1565,1566,3,262,
        131,0,1566,1567,5,15,0,0,1567,1568,3,260,130,0,1568,279,1,0,0,0,
        1569,1570,5,22,0,0,1570,1571,5,57,0,0,1571,1572,3,412,206,0,1572,
        1573,5,58,0,0,1573,1574,3,262,131,0,1574,1575,5,15,0,0,1575,1576,
        3,262,131,0,1576,281,1,0,0,0,1577,1578,5,2,0,0,1578,1579,3,412,206,
        0,1579,1580,5,63,0,0,1580,1588,1,0,0,0,1581,1582,5,2,0,0,1582,1583,
        3,412,206,0,1583,1584,5,72,0,0,1584,1585,3,412,206,0,1585,1586,5,
        63,0,0,1586,1588,1,0,0,0,1587,1577,1,0,0,0,1587,1581,1,0,0,0,1588,
        283,1,0,0,0,1589,1590,5,41,0,0,1590,1591,5,57,0,0,1591,1592,3,412,
        206,0,1592,1593,5,58,0,0,1593,1594,3,286,143,0,1594,285,1,0,0,0,
        1595,1599,5,59,0,0,1596,1598,3,288,144,0,1597,1596,1,0,0,0,1598,
        1601,1,0,0,0,1599,1597,1,0,0,0,1599,1600,1,0,0,0,1600,1605,1,0,0,
        0,1601,1599,1,0,0,0,1602,1604,3,292,146,0,1603,1602,1,0,0,0,1604,
        1607,1,0,0,0,1605,1603,1,0,0,0,1605,1606,1,0,0,0,1606,1608,1,0,0,
        0,1607,1605,1,0,0,0,1608,1609,5,60,0,0,1609,287,1,0,0,0,1610,1611,
        3,290,145,0,1611,1612,3,252,126,0,1612,289,1,0,0,0,1613,1617,3,292,
        146,0,1614,1616,3,292,146,0,1615,1614,1,0,0,0,1616,1619,1,0,0,0,
        1617,1615,1,0,0,0,1617,1618,1,0,0,0,1618,291,1,0,0,0,1619,1617,1,
        0,0,0,1620,1621,5,6,0,0,1621,1622,3,410,205,0,1622,1623,5,72,0,0,
        1623,1631,1,0,0,0,1624,1625,5,6,0,0,1625,1626,3,294,147,0,1626,1627,
        5,72,0,0,1627,1631,1,0,0,0,1628,1629,5,12,0,0,1629,1631,5,72,0,0,
        1630,1620,1,0,0,0,1630,1624,1,0,0,0,1630,1628,1,0,0,0,1631,293,1,
        0,0,0,1632,1633,5,102,0,0,1633,295,1,0,0,0,1634,1635,5,50,0,0,1635,
        1636,5,57,0,0,1636,1637,3,412,206,0,1637,1638,5,58,0,0,1638,1639,
        3,260,130,0,1639,297,1,0,0,0,1640,1641,5,50,0,0,1641,1642,5,57,0,
        0,1642,1643,3,412,206,0,1643,1644,5,58,0,0,1644,1645,3,262,131,0,
        1645,299,1,0,0,0,1646,1647,5,13,0,0,1647,1648,3,260,130,0,1648,1649,
        5,50,0,0,1649,1650,5,57,0,0,1650,1651,3,412,206,0,1651,1652,5,58,
        0,0,1652,1653,5,63,0,0,1653,301,1,0,0,0,1654,1657,3,306,153,0,1655,
        1657,3,316,158,0,1656,1654,1,0,0,0,1656,1655,1,0,0,0,1657,303,1,
        0,0,0,1658,1661,3,308,154,0,1659,1661,3,318,159,0,1660,1658,1,0,
        0,0,1660,1659,1,0,0,0,1661,305,1,0,0,0,1662,1663,5,21,0,0,1663,1665,
        5,57,0,0,1664,1666,3,310,155,0,1665,1664,1,0,0,0,1665,1666,1,0,0,
        0,1666,1667,1,0,0,0,1667,1669,5,63,0,0,1668,1670,3,412,206,0,1669,
        1668,1,0,0,0,1669,1670,1,0,0,0,1670,1671,1,0,0,0,1671,1673,5,63,
        0,0,1672,1674,3,312,156,0,1673,1672,1,0,0,0,1673,1674,1,0,0,0,1674,
        1675,1,0,0,0,1675,1676,5,58,0,0,1676,1677,3,260,130,0,1677,307,1,
        0,0,0,1678,1679,5,21,0,0,1679,1681,5,57,0,0,1680,1682,3,310,155,
        0,1681,1680,1,0,0,0,1681,1682,1,0,0,0,1682,1683,1,0,0,0,1683,1685,
        5,63,0,0,1684,1686,3,412,206,0,1685,1684,1,0,0,0,1685,1686,1,0,0,
        0,1686,1687,1,0,0,0,1687,1689,5,63,0,0,1688,1690,3,312,156,0,1689,
        1688,1,0,0,0,1689,1690,1,0,0,0,1690,1691,1,0,0,0,1691,1692,5,58,
        0,0,1692,1693,3,262,131,0,1693,309,1,0,0,0,1694,1697,3,314,157,0,
        1695,1697,3,258,129,0,1696,1694,1,0,0,0,1696,1695,1,0,0,0,1697,311,
        1,0,0,0,1698,1699,3,314,157,0,1699,313,1,0,0,0,1700,1705,3,274,137,
        0,1701,1702,5,64,0,0,1702,1704,3,274,137,0,1703,1701,1,0,0,0,1704,
        1707,1,0,0,0,1705,1703,1,0,0,0,1705,1706,1,0,0,0,1706,315,1,0,0,
        0,1707,1705,1,0,0,0,1708,1709,5,21,0,0,1709,1713,5,57,0,0,1710,1712,
        3,154,77,0,1711,1710,1,0,0,0,1712,1715,1,0,0,0,1713,1711,1,0,0,0,
        1713,1714,1,0,0,0,1714,1716,1,0,0,0,1715,1713,1,0,0,0,1716,1717,
        3,114,57,0,1717,1718,3,110,55,0,1718,1719,5,72,0,0,1719,1720,3,412,
        206,0,1720,1721,5,58,0,0,1721,1722,3,260,130,0,1722,317,1,0,0,0,
        1723,1724,5,21,0,0,1724,1728,5,57,0,0,1725,1727,3,154,77,0,1726,
        1725,1,0,0,0,1727,1730,1,0,0,0,1728,1726,1,0,0,0,1728,1729,1,0,0,
        0,1729,1731,1,0,0,0,1730,1728,1,0,0,0,1731,1732,3,114,57,0,1732,
        1733,3,110,55,0,1733,1734,5,72,0,0,1734,1735,3,412,206,0,1735,1736,
        5,58,0,0,1736,1737,3,262,131,0,1737,319,1,0,0,0,1738,1740,5,4,0,
        0,1739,1741,5,102,0,0,1740,1739,1,0,0,0,1740,1741,1,0,0,0,1741,1742,
        1,0,0,0,1742,1743,5,63,0,0,1743,321,1,0,0,0,1744,1746,5,11,0,0,1745,
        1747,5,102,0,0,1746,1745,1,0,0,0,1746,1747,1,0,0,0,1747,1748,1,0,
        0,0,1748,1749,5,63,0,0,1749,323,1,0,0,0,1750,1752,5,36,0,0,1751,
        1753,3,412,206,0,1752,1751,1,0,0,0,1752,1753,1,0,0,0,1753,1754,1,
        0,0,0,1754,1755,5,63,0,0,1755,325,1,0,0,0,1756,1757,5,44,0,0,1757,
        1758,3,412,206,0,1758,1759,5,63,0,0,1759,327,1,0,0,0,1760,1761,5,
        42,0,0,1761,1762,5,57,0,0,1762,1763,3,412,206,0,1763,1764,5,58,0,
        0,1764,1765,3,250,125,0,1765,329,1,0,0,0,1766,1767,5,47,0,0,1767,
        1768,3,250,125,0,1768,1769,3,332,166,0,1769,1779,1,0,0,0,1770,1771,
        5,47,0,0,1771,1773,3,250,125,0,1772,1774,3,332,166,0,1773,1772,1,
        0,0,0,1773,1774,1,0,0,0,1774,1775,1,0,0,0,1775,1776,3,340,170,0,
        1776,1779,1,0,0,0,1777,1779,3,342,171,0,1778,1766,1,0,0,0,1778,1770,
        1,0,0,0,1778,1777,1,0,0,0,1779,331,1,0,0,0,1780,1784,3,334,167,0,
        1781,1783,3,334,167,0,1782,1781,1,0,0,0,1783,1786,1,0,0,0,1784,1782,
        1,0,0,0,1784,1785,1,0,0,0,1785,333,1,0,0,0,1786,1784,1,0,0,0,1787,
        1788,5,7,0,0,1788,1789,5,57,0,0,1789,1790,3,336,168,0,1790,1791,
        5,58,0,0,1791,1792,3,250,125,0,1792,335,1,0,0,0,1793,1795,3,154,
        77,0,1794,1793,1,0,0,0,1795,1798,1,0,0,0,1796,1794,1,0,0,0,1796,
        1797,1,0,0,0,1797,1799,1,0,0,0,1798,1796,1,0,0,0,1799,1800,3,338,
        169,0,1800,1801,3,110,55,0,1801,337,1,0,0,0,1802,1807,3,122,61,0,
        1803,1804,5,86,0,0,1804,1806,3,14,7,0,1805,1803,1,0,0,0,1806,1809,
        1,0,0,0,1807,1805,1,0,0,0,1807,1808,1,0,0,0,1808,339,1,0,0,0,1809,
        1807,1,0,0,0,1810,1811,5,19,0,0,1811,1812,3,250,125,0,1812,341,1,
        0,0,0,1813,1814,5,47,0,0,1814,1815,3,344,172,0,1815,1817,3,250,125,
        0,1816,1818,3,332,166,0,1817,1816,1,0,0,0,1817,1818,1,0,0,0,1818,
        1820,1,0,0,0,1819,1821,3,340,170,0,1820,1819,1,0,0,0,1820,1821,1,
        0,0,0,1821,343,1,0,0,0,1822,1823,5,57,0,0,1823,1825,3,346,173,0,
        1824,1826,5,63,0,0,1825,1824,1,0,0,0,1825,1826,1,0,0,0,1826,1827,
        1,0,0,0,1827,1828,5,58,0,0,1828,345,1,0,0,0,1829,1834,3,348,174,
        0,1830,1831,5,63,0,0,1831,1833,3,348,174,0,1832,1830,1,0,0,0,1833,
        1836,1,0,0,0,1834,1832,1,0,0,0,1834,1835,1,0,0,0,1835,347,1,0,0,
        0,1836,1834,1,0,0,0,1837,1839,3,154,77,0,1838,1837,1,0,0,0,1839,
        1842,1,0,0,0,1840,1838,1,0,0,0,1840,1841,1,0,0,0,1841,1843,1,0,0,
        0,1842,1840,1,0,0,0,1843,1844,3,114,57,0,1844,1845,3,110,55,0,1845,
        1846,5,66,0,0,1846,1847,3,412,206,0,1847,349,1,0,0,0,1848,1851,3,
        364,182,0,1849,1851,3,404,202,0,1850,1848,1,0,0,0,1850,1849,1,0,
        0,0,1851,1855,1,0,0,0,1852,1854,3,358,179,0,1853,1852,1,0,0,0,1854,
        1857,1,0,0,0,1855,1853,1,0,0,0,1855,1856,1,0,0,0,1856,351,1,0,0,
        0,1857,1855,1,0,0,0,1858,1888,3,0,0,0,1859,1864,3,52,26,0,1860,1861,
        5,61,0,0,1861,1863,5,62,0,0,1862,1860,1,0,0,0,1863,1866,1,0,0,0,
        1864,1862,1,0,0,0,1864,1865,1,0,0,0,1865,1867,1,0,0,0,1866,1864,
        1,0,0,0,1867,1868,5,65,0,0,1868,1869,5,9,0,0,1869,1888,1,0,0,0,1870,
        1871,5,48,0,0,1871,1872,5,65,0,0,1872,1888,5,9,0,0,1873,1888,5,43,
        0,0,1874,1875,3,52,26,0,1875,1876,5,65,0,0,1876,1877,5,43,0,0,1877,
        1888,1,0,0,0,1878,1879,5,57,0,0,1879,1880,3,412,206,0,1880,1881,
        5,58,0,0,1881,1888,1,0,0,0,1882,1888,3,370,185,0,1883,1888,3,378,
        189,0,1884,1888,3,384,192,0,1885,1888,3,390,195,0,1886,1888,3,398,
        199,0,1887,1858,1,0,0,0,1887,1859,1,0,0,0,1887,1870,1,0,0,0,1887,
        1873,1,0,0,0,1887,1874,1,0,0,0,1887,1878,1,0,0,0,1887,1882,1,0,0,
        0,1887,1883,1,0,0,0,1887,1884,1,0,0,0,1887,1885,1,0,0,0,1887,1886,
        1,0,0,0,1888,353,1,0,0,0,1889,1890,1,0,0,0,1890,355,1,0,0,0,1891,
        1920,3,0,0,0,1892,1897,3,52,26,0,1893,1894,5,61,0,0,1894,1896,5,
        62,0,0,1895,1893,1,0,0,0,1896,1899,1,0,0,0,1897,1895,1,0,0,0,1897,
        1898,1,0,0,0,1898,1900,1,0,0,0,1899,1897,1,0,0,0,1900,1901,5,65,
        0,0,1901,1902,5,9,0,0,1902,1920,1,0,0,0,1903,1904,5,48,0,0,1904,
        1905,5,65,0,0,1905,1920,5,9,0,0,1906,1920,5,43,0,0,1907,1908,3,52,
        26,0,1908,1909,5,65,0,0,1909,1910,5,43,0,0,1910,1920,1,0,0,0,1911,
        1912,5,57,0,0,1912,1913,3,412,206,0,1913,1914,5,58,0,0,1914,1920,
        1,0,0,0,1915,1920,3,370,185,0,1916,1920,3,378,189,0,1917,1920,3,
        390,195,0,1918,1920,3,398,199,0,1919,1891,1,0,0,0,1919,1892,1,0,
        0,0,1919,1903,1,0,0,0,1919,1906,1,0,0,0,1919,1907,1,0,0,0,1919,1911,
        1,0,0,0,1919,1915,1,0,0,0,1919,1916,1,0,0,0,1919,1917,1,0,0,0,1919,
        1918,1,0,0,0,1920,357,1,0,0,0,1921,1927,3,372,186,0,1922,1927,3,
        380,190,0,1923,1927,3,386,193,0,1924,1927,3,392,196,0,1925,1927,
        3,400,200,0,1926,1921,1,0,0,0,1926,1922,1,0,0,0,1926,1923,1,0,0,
        0,1926,1924,1,0,0,0,1926,1925,1,0,0,0,1927,359,1,0,0,0,1928,1929,
        1,0,0,0,1929,361,1,0,0,0,1930,1935,3,372,186,0,1931,1935,3,380,190,
        0,1932,1935,3,392,196,0,1933,1935,3,400,200,0,1934,1930,1,0,0,0,
        1934,1931,1,0,0,0,1934,1932,1,0,0,0,1934,1933,1,0,0,0,1935,363,1,
        0,0,0,1936,1977,3,0,0,0,1937,1942,3,52,26,0,1938,1939,5,61,0,0,1939,
        1941,5,62,0,0,1940,1938,1,0,0,0,1941,1944,1,0,0,0,1942,1940,1,0,
        0,0,1942,1943,1,0,0,0,1943,1945,1,0,0,0,1944,1942,1,0,0,0,1945,1946,
        5,65,0,0,1946,1947,5,9,0,0,1947,1977,1,0,0,0,1948,1953,3,116,58,
        0,1949,1950,5,61,0,0,1950,1952,5,62,0,0,1951,1949,1,0,0,0,1952,1955,
        1,0,0,0,1953,1951,1,0,0,0,1953,1954,1,0,0,0,1954,1956,1,0,0,0,1955,
        1953,1,0,0,0,1956,1957,5,65,0,0,1957,1958,5,9,0,0,1958,1977,1,0,
        0,0,1959,1960,5,48,0,0,1960,1961,5,65,0,0,1961,1977,5,9,0,0,1962,
        1977,5,43,0,0,1963,1964,3,52,26,0,1964,1965,5,65,0,0,1965,1966,5,
        43,0,0,1966,1977,1,0,0,0,1967,1968,5,57,0,0,1968,1969,3,412,206,
        0,1969,1970,5,58,0,0,1970,1977,1,0,0,0,1971,1977,3,374,187,0,1972,
        1977,3,382,191,0,1973,1977,3,388,194,0,1974,1977,3,394,197,0,1975,
        1977,3,402,201,0,1976,1936,1,0,0,0,1976,1937,1,0,0,0,1976,1948,1,
        0,0,0,1976,1959,1,0,0,0,1976,1962,1,0,0,0,1976,1963,1,0,0,0,1976,
        1967,1,0,0,0,1976,1971,1,0,0,0,1976,1972,1,0,0,0,1976,1973,1,0,0,
        0,1976,1974,1,0,0,0,1976,1975,1,0,0,0,1977,365,1,0,0,0,1978,1979,
        1,0,0,0,1979,367,1,0,0,0,1980,2020,3,0,0,0,1981,1986,3,52,26,0,1982,
        1983,5,61,0,0,1983,1985,5,62,0,0,1984,1982,1,0,0,0,1985,1988,1,0,
        0,0,1986,1984,1,0,0,0,1986,1987,1,0,0,0,1987,1989,1,0,0,0,1988,1986,
        1,0,0,0,1989,1990,5,65,0,0,1990,1991,5,9,0,0,1991,2020,1,0,0,0,1992,
        1997,3,116,58,0,1993,1994,5,61,0,0,1994,1996,5,62,0,0,1995,1993,
        1,0,0,0,1996,1999,1,0,0,0,1997,1995,1,0,0,0,1997,1998,1,0,0,0,1998,
        2000,1,0,0,0,1999,1997,1,0,0,0,2000,2001,5,65,0,0,2001,2002,5,9,
        0,0,2002,2020,1,0,0,0,2003,2004,5,48,0,0,2004,2005,5,65,0,0,2005,
        2020,5,9,0,0,2006,2020,5,43,0,0,2007,2008,3,52,26,0,2008,2009,5,
        65,0,0,2009,2010,5,43,0,0,2010,2020,1,0,0,0,2011,2012,5,57,0,0,2012,
        2013,3,412,206,0,2013,2014,5,58,0,0,2014,2020,1,0,0,0,2015,2020,
        3,374,187,0,2016,2020,3,382,191,0,2017,2020,3,394,197,0,2018,2020,
        3,402,201,0,2019,1980,1,0,0,0,2019,1981,1,0,0,0,2019,1992,1,0,0,
        0,2019,2003,1,0,0,0,2019,2006,1,0,0,0,2019,2007,1,0,0,0,2019,2011,
        1,0,0,0,2019,2015,1,0,0,0,2019,2016,1,0,0,0,2019,2017,1,0,0,0,2019,
        2018,1,0,0,0,2020,369,1,0,0,0,2021,2023,5,31,0,0,2022,2024,3,40,
        20,0,2023,2022,1,0,0,0,2023,2024,1,0,0,0,2024,2028,1,0,0,0,2025,
        2027,3,228,114,0,2026,2025,1,0,0,0,2027,2030,1,0,0,0,2028,2026,1,
        0,0,0,2028,2029,1,0,0,0,2029,2031,1,0,0,0,2030,2028,1,0,0,0,2031,
        2042,5,102,0,0,2032,2036,5,65,0,0,2033,2035,3,228,114,0,2034,2033,
        1,0,0,0,2035,2038,1,0,0,0,2036,2034,1,0,0,0,2036,2037,1,0,0,0,2037,
        2039,1,0,0,0,2038,2036,1,0,0,0,2039,2041,5,102,0,0,2040,2032,1,0,
        0,0,2041,2044,1,0,0,0,2042,2040,1,0,0,0,2042,2043,1,0,0,0,2043,2046,
        1,0,0,0,2044,2042,1,0,0,0,2045,2047,3,376,188,0,2046,2045,1,0,0,
        0,2046,2047,1,0,0,0,2047,2048,1,0,0,0,2048,2050,5,57,0,0,2049,2051,
        3,396,198,0,2050,2049,1,0,0,0,2050,2051,1,0,0,0,2051,2052,1,0,0,
        0,2052,2054,5,58,0,0,2053,2055,3,96,48,0,2054,2053,1,0,0,0,2054,
        2055,1,0,0,0,2055,2105,1,0,0,0,2056,2057,3,56,28,0,2057,2058,5,65,
        0,0,2058,2060,5,31,0,0,2059,2061,3,40,20,0,2060,2059,1,0,0,0,2060,
        2061,1,0,0,0,2061,2065,1,0,0,0,2062,2064,3,228,114,0,2063,2062,1,
        0,0,0,2064,2067,1,0,0,0,2065,2063,1,0,0,0,2065,2066,1,0,0,0,2066,
        2068,1,0,0,0,2067,2065,1,0,0,0,2068,2070,5,102,0,0,2069,2071,3,376,
        188,0,2070,2069,1,0,0,0,2070,2071,1,0,0,0,2071,2072,1,0,0,0,2072,
        2074,5,57,0,0,2073,2075,3,396,198,0,2074,2073,1,0,0,0,2074,2075,
        1,0,0,0,2075,2076,1,0,0,0,2076,2078,5,58,0,0,2077,2079,3,96,48,0,
        2078,2077,1,0,0,0,2078,2079,1,0,0,0,2079,2105,1,0,0,0,2080,2081,
        3,350,175,0,2081,2082,5,65,0,0,2082,2084,5,31,0,0,2083,2085,3,40,
        20,0,2084,2083,1,0,0,0,2084,2085,1,0,0,0,2085,2089,1,0,0,0,2086,
        2088,3,228,114,0,2087,2086,1,0,0,0,2088,2091,1,0,0,0,2089,2087,1,
        0,0,0,2089,2090,1,0,0,0,2090,2092,1,0,0,0,2091,2089,1,0,0,0,2092,
        2094,5,102,0,0,2093,2095,3,376,188,0,2094,2093,1,0,0,0,2094,2095,
        1,0,0,0,2095,2096,1,0,0,0,2096,2098,5,57,0,0,2097,2099,3,396,198,
        0,2098,2097,1,0,0,0,2098,2099,1,0,0,0,2099,2100,1,0,0,0,2100,2102,
        5,58,0,0,2101,2103,3,96,48,0,2102,2101,1,0,0,0,2102,2103,1,0,0,0,
        2103,2105,1,0,0,0,2104,2021,1,0,0,0,2104,2056,1,0,0,0,2104,2080,
        1,0,0,0,2105,371,1,0,0,0,2106,2107,5,65,0,0,2107,2109,5,31,0,0,2108,
        2110,3,40,20,0,2109,2108,1,0,0,0,2109,2110,1,0,0,0,2110,2114,1,0,
        0,0,2111,2113,3,228,114,0,2112,2111,1,0,0,0,2113,2116,1,0,0,0,2114,
        2112,1,0,0,0,2114,2115,1,0,0,0,2115,2117,1,0,0,0,2116,2114,1,0,0,
        0,2117,2119,5,102,0,0,2118,2120,3,376,188,0,2119,2118,1,0,0,0,2119,
        2120,1,0,0,0,2120,2121,1,0,0,0,2121,2123,5,57,0,0,2122,2124,3,396,
        198,0,2123,2122,1,0,0,0,2123,2124,1,0,0,0,2124,2125,1,0,0,0,2125,
        2127,5,58,0,0,2126,2128,3,96,48,0,2127,2126,1,0,0,0,2127,2128,1,
        0,0,0,2128,373,1,0,0,0,2129,2131,5,31,0,0,2130,2132,3,40,20,0,2131,
        2130,1,0,0,0,2131,2132,1,0,0,0,2132,2136,1,0,0,0,2133,2135,3,228,
        114,0,2134,2133,1,0,0,0,2135,2138,1,0,0,0,2136,2134,1,0,0,0,2136,
        2137,1,0,0,0,2137,2139,1,0,0,0,2138,2136,1,0,0,0,2139,2150,5,102,
        0,0,2140,2144,5,65,0,0,2141,2143,3,228,114,0,2142,2141,1,0,0,0,2143,
        2146,1,0,0,0,2144,2142,1,0,0,0,2144,2145,1,0,0,0,2145,2147,1,0,0,
        0,2146,2144,1,0,0,0,2147,2149,5,102,0,0,2148,2140,1,0,0,0,2149,2152,
        1,0,0,0,2150,2148,1,0,0,0,2150,2151,1,0,0,0,2151,2154,1,0,0,0,2152,
        2150,1,0,0,0,2153,2155,3,376,188,0,2154,2153,1,0,0,0,2154,2155,1,
        0,0,0,2155,2156,1,0,0,0,2156,2158,5,57,0,0,2157,2159,3,396,198,0,
        2158,2157,1,0,0,0,2158,2159,1,0,0,0,2159,2160,1,0,0,0,2160,2162,
        5,58,0,0,2161,2163,3,96,48,0,2162,2161,1,0,0,0,2162,2163,1,0,0,0,
        2163,2189,1,0,0,0,2164,2165,3,56,28,0,2165,2166,5,65,0,0,2166,2168,
        5,31,0,0,2167,2169,3,40,20,0,2168,2167,1,0,0,0,2168,2169,1,0,0,0,
        2169,2173,1,0,0,0,2170,2172,3,228,114,0,2171,2170,1,0,0,0,2172,2175,
        1,0,0,0,2173,2171,1,0,0,0,2173,2174,1,0,0,0,2174,2176,1,0,0,0,2175,
        2173,1,0,0,0,2176,2178,5,102,0,0,2177,2179,3,376,188,0,2178,2177,
        1,0,0,0,2178,2179,1,0,0,0,2179,2180,1,0,0,0,2180,2182,5,57,0,0,2181,
        2183,3,396,198,0,2182,2181,1,0,0,0,2182,2183,1,0,0,0,2183,2184,1,
        0,0,0,2184,2186,5,58,0,0,2185,2187,3,96,48,0,2186,2185,1,0,0,0,2186,
        2187,1,0,0,0,2187,2189,1,0,0,0,2188,2129,1,0,0,0,2188,2164,1,0,0,
        0,2189,375,1,0,0,0,2190,2194,3,40,20,0,2191,2192,5,68,0,0,2192,2194,
        5,67,0,0,2193,2190,1,0,0,0,2193,2191,1,0,0,0,2194,377,1,0,0,0,2195,
        2196,3,350,175,0,2196,2197,5,65,0,0,2197,2198,5,102,0,0,2198,2209,
        1,0,0,0,2199,2200,5,40,0,0,2200,2201,5,65,0,0,2201,2209,5,102,0,
        0,2202,2203,3,52,26,0,2203,2204,5,65,0,0,2204,2205,5,40,0,0,2205,
        2206,5,65,0,0,2206,2207,5,102,0,0,2207,2209,1,0,0,0,2208,2195,1,
        0,0,0,2208,2199,1,0,0,0,2208,2202,1,0,0,0,2209,379,1,0,0,0,2210,
        2211,5,65,0,0,2211,2212,5,102,0,0,2212,381,1,0,0,0,2213,2214,5,40,
        0,0,2214,2215,5,65,0,0,2215,2223,5,102,0,0,2216,2217,3,52,26,0,2217,
        2218,5,65,0,0,2218,2219,5,40,0,0,2219,2220,5,65,0,0,2220,2221,5,
        102,0,0,2221,2223,1,0,0,0,2222,2213,1,0,0,0,2222,2216,1,0,0,0,2223,
        383,1,0,0,0,2224,2225,3,56,28,0,2225,2226,5,61,0,0,2226,2227,3,412,
        206,0,2227,2228,5,62,0,0,2228,2235,1,0,0,0,2229,2230,3,356,178,0,
        2230,2231,5,61,0,0,2231,2232,3,412,206,0,2232,2233,5,62,0,0,2233,
        2235,1,0,0,0,2234,2224,1,0,0,0,2234,2229,1,0,0,0,2235,2243,1,0,0,
        0,2236,2237,3,354,177,0,2237,2238,5,61,0,0,2238,2239,3,412,206,0,
        2239,2240,5,62,0,0,2240,2242,1,0,0,0,2241,2236,1,0,0,0,2242,2245,
        1,0,0,0,2243,2241,1,0,0,0,2243,2244,1,0,0,0,2244,385,1,0,0,0,2245,
        2243,1,0,0,0,2246,2247,3,362,181,0,2247,2248,5,61,0,0,2248,2249,
        3,412,206,0,2249,2250,5,62,0,0,2250,2258,1,0,0,0,2251,2252,3,360,
        180,0,2252,2253,5,61,0,0,2253,2254,3,412,206,0,2254,2255,5,62,0,
        0,2255,2257,1,0,0,0,2256,2251,1,0,0,0,2257,2260,1,0,0,0,2258,2256,
        1,0,0,0,2258,2259,1,0,0,0,2259,387,1,0,0,0,2260,2258,1,0,0,0,2261,
        2262,3,56,28,0,2262,2263,5,61,0,0,2263,2264,3,412,206,0,2264,2265,
        5,62,0,0,2265,2272,1,0,0,0,2266,2267,3,368,184,0,2267,2268,5,61,
        0,0,2268,2269,3,412,206,0,2269,2270,5,62,0,0,2270,2272,1,0,0,0,2271,
        2261,1,0,0,0,2271,2266,1,0,0,0,2272,2280,1,0,0,0,2273,2274,3,366,
        183,0,2274,2275,5,61,0,0,2275,2276,3,412,206,0,2276,2277,5,62,0,
        0,2277,2279,1,0,0,0,2278,2273,1,0,0,0,2279,2282,1,0,0,0,2280,2278,
        1,0,0,0,2280,2281,1,0,0,0,2281,389,1,0,0,0,2282,2280,1,0,0,0,2283,
        2284,3,58,29,0,2284,2286,5,57,0,0,2285,2287,3,396,198,0,2286,2285,
        1,0,0,0,2286,2287,1,0,0,0,2287,2288,1,0,0,0,2288,2289,5,58,0,0,2289,
        2352,1,0,0,0,2290,2291,3,52,26,0,2291,2293,5,65,0,0,2292,2294,3,
        40,20,0,2293,2292,1,0,0,0,2293,2294,1,0,0,0,2294,2295,1,0,0,0,2295,
        2296,5,102,0,0,2296,2298,5,57,0,0,2297,2299,3,396,198,0,2298,2297,
        1,0,0,0,2298,2299,1,0,0,0,2299,2300,1,0,0,0,2300,2301,5,58,0,0,2301,
        2352,1,0,0,0,2302,2303,3,56,28,0,2303,2305,5,65,0,0,2304,2306,3,
        40,20,0,2305,2304,1,0,0,0,2305,2306,1,0,0,0,2306,2307,1,0,0,0,2307,
        2308,5,102,0,0,2308,2310,5,57,0,0,2309,2311,3,396,198,0,2310,2309,
        1,0,0,0,2310,2311,1,0,0,0,2311,2312,1,0,0,0,2312,2313,5,58,0,0,2313,
        2352,1,0,0,0,2314,2315,3,350,175,0,2315,2317,5,65,0,0,2316,2318,
        3,40,20,0,2317,2316,1,0,0,0,2317,2318,1,0,0,0,2318,2319,1,0,0,0,
        2319,2320,5,102,0,0,2320,2322,5,57,0,0,2321,2323,3,396,198,0,2322,
        2321,1,0,0,0,2322,2323,1,0,0,0,2323,2324,1,0,0,0,2324,2325,5,58,
        0,0,2325,2352,1,0,0,0,2326,2327,5,40,0,0,2327,2329,5,65,0,0,2328,
        2330,3,40,20,0,2329,2328,1,0,0,0,2329,2330,1,0,0,0,2330,2331,1,0,
        0,0,2331,2332,5,102,0,0,2332,2334,5,57,0,0,2333,2335,3,396,198,0,
        2334,2333,1,0,0,0,2334,2335,1,0,0,0,2335,2336,1,0,0,0,2336,2352,
        5,58,0,0,2337,2338,3,52,26,0,2338,2339,5,65,0,0,2339,2340,5,40,0,
        0,2340,2342,5,65,0,0,2341,2343,3,40,20,0,2342,2341,1,0,0,0,2342,
        2343,1,0,0,0,2343,2344,1,0,0,0,2344,2345,5,102,0,0,2345,2347,5,57,
        0,0,2346,2348,3,396,198,0,2347,2346,1,0,0,0,2347,2348,1,0,0,0,2348,
        2349,1,0,0,0,2349,2350,5,58,0,0,2350,2352,1,0,0,0,2351,2283,1,0,
        0,0,2351,2290,1,0,0,0,2351,2302,1,0,0,0,2351,2314,1,0,0,0,2351,2326,
        1,0,0,0,2351,2337,1,0,0,0,2352,391,1,0,0,0,2353,2355,5,65,0,0,2354,
        2356,3,40,20,0,2355,2354,1,0,0,0,2355,2356,1,0,0,0,2356,2357,1,0,
        0,0,2357,2358,5,102,0,0,2358,2360,5,57,0,0,2359,2361,3,396,198,0,
        2360,2359,1,0,0,0,2360,2361,1,0,0,0,2361,2362,1,0,0,0,2362,2363,
        5,58,0,0,2363,393,1,0,0,0,2364,2365,3,58,29,0,2365,2367,5,57,0,0,
        2366,2368,3,396,198,0,2367,2366,1,0,0,0,2367,2368,1,0,0,0,2368,2369,
        1,0,0,0,2369,2370,5,58,0,0,2370,2421,1,0,0,0,2371,2372,3,52,26,0,
        2372,2374,5,65,0,0,2373,2375,3,40,20,0,2374,2373,1,0,0,0,2374,2375,
        1,0,0,0,2375,2376,1,0,0,0,2376,2377,5,102,0,0,2377,2379,5,57,0,0,
        2378,2380,3,396,198,0,2379,2378,1,0,0,0,2379,2380,1,0,0,0,2380,2381,
        1,0,0,0,2381,2382,5,58,0,0,2382,2421,1,0,0,0,2383,2384,3,56,28,0,
        2384,2386,5,65,0,0,2385,2387,3,40,20,0,2386,2385,1,0,0,0,2386,2387,
        1,0,0,0,2387,2388,1,0,0,0,2388,2389,5,102,0,0,2389,2391,5,57,0,0,
        2390,2392,3,396,198,0,2391,2390,1,0,0,0,2391,2392,1,0,0,0,2392,2393,
        1,0,0,0,2393,2394,5,58,0,0,2394,2421,1,0,0,0,2395,2396,5,40,0,0,
        2396,2398,5,65,0,0,2397,2399,3,40,20,0,2398,2397,1,0,0,0,2398,2399,
        1,0,0,0,2399,2400,1,0,0,0,2400,2401,5,102,0,0,2401,2403,5,57,0,0,
        2402,2404,3,396,198,0,2403,2402,1,0,0,0,2403,2404,1,0,0,0,2404,2405,
        1,0,0,0,2405,2421,5,58,0,0,2406,2407,3,52,26,0,2407,2408,5,65,0,
        0,2408,2409,5,40,0,0,2409,2411,5,65,0,0,2410,2412,3,40,20,0,2411,
        2410,1,0,0,0,2411,2412,1,0,0,0,2412,2413,1,0,0,0,2413,2414,5,102,
        0,0,2414,2416,5,57,0,0,2415,2417,3,396,198,0,2416,2415,1,0,0,0,2416,
        2417,1,0,0,0,2417,2418,1,0,0,0,2418,2419,5,58,0,0,2419,2421,1,0,
        0,0,2420,2364,1,0,0,0,2420,2371,1,0,0,0,2420,2383,1,0,0,0,2420,2395,
        1,0,0,0,2420,2406,1,0,0,0,2421,395,1,0,0,0,2422,2427,3,412,206,0,
        2423,2424,5,64,0,0,2424,2426,3,412,206,0,2425,2423,1,0,0,0,2426,
        2429,1,0,0,0,2427,2425,1,0,0,0,2427,2428,1,0,0,0,2428,397,1,0,0,
        0,2429,2427,1,0,0,0,2430,2431,3,56,28,0,2431,2433,5,90,0,0,2432,
        2434,3,40,20,0,2433,2432,1,0,0,0,2433,2434,1,0,0,0,2434,2435,1,0,
        0,0,2435,2436,5,102,0,0,2436,2478,1,0,0,0,2437,2438,3,10,5,0,2438,
        2440,5,90,0,0,2439,2441,3,40,20,0,2440,2439,1,0,0,0,2440,2441,1,
        0,0,0,2441,2442,1,0,0,0,2442,2443,5,102,0,0,2443,2478,1,0,0,0,2444,
        2445,3,350,175,0,2445,2447,5,90,0,0,2446,2448,3,40,20,0,2447,2446,
        1,0,0,0,2447,2448,1,0,0,0,2448,2449,1,0,0,0,2449,2450,5,102,0,0,
        2450,2478,1,0,0,0,2451,2452,5,40,0,0,2452,2454,5,90,0,0,2453,2455,
        3,40,20,0,2454,2453,1,0,0,0,2454,2455,1,0,0,0,2455,2456,1,0,0,0,
        2456,2478,5,102,0,0,2457,2458,3,52,26,0,2458,2459,5,65,0,0,2459,
        2460,5,40,0,0,2460,2462,5,90,0,0,2461,2463,3,40,20,0,2462,2461,1,
        0,0,0,2462,2463,1,0,0,0,2463,2464,1,0,0,0,2464,2465,5,102,0,0,2465,
        2478,1,0,0,0,2466,2467,3,14,7,0,2467,2469,5,90,0,0,2468,2470,3,40,
        20,0,2469,2468,1,0,0,0,2469,2470,1,0,0,0,2470,2471,1,0,0,0,2471,
        2472,5,31,0,0,2472,2478,1,0,0,0,2473,2474,3,28,14,0,2474,2475,5,
        90,0,0,2475,2476,5,31,0,0,2476,2478,1,0,0,0,2477,2430,1,0,0,0,2477,
        2437,1,0,0,0,2477,2444,1,0,0,0,2477,2451,1,0,0,0,2477,2457,1,0,0,
        0,2477,2466,1,0,0,0,2477,2473,1,0,0,0,2478,399,1,0,0,0,2479,2481,
        5,90,0,0,2480,2482,3,40,20,0,2481,2480,1,0,0,0,2481,2482,1,0,0,0,
        2482,2483,1,0,0,0,2483,2484,5,102,0,0,2484,401,1,0,0,0,2485,2486,
        3,56,28,0,2486,2488,5,90,0,0,2487,2489,3,40,20,0,2488,2487,1,0,0,
        0,2488,2489,1,0,0,0,2489,2490,1,0,0,0,2490,2491,5,102,0,0,2491,2526,
        1,0,0,0,2492,2493,3,10,5,0,2493,2495,5,90,0,0,2494,2496,3,40,20,
        0,2495,2494,1,0,0,0,2495,2496,1,0,0,0,2496,2497,1,0,0,0,2497,2498,
        5,102,0,0,2498,2526,1,0,0,0,2499,2500,5,40,0,0,2500,2502,5,90,0,
        0,2501,2503,3,40,20,0,2502,2501,1,0,0,0,2502,2503,1,0,0,0,2503,2504,
        1,0,0,0,2504,2526,5,102,0,0,2505,2506,3,52,26,0,2506,2507,5,65,0,
        0,2507,2508,5,40,0,0,2508,2510,5,90,0,0,2509,2511,3,40,20,0,2510,
        2509,1,0,0,0,2510,2511,1,0,0,0,2511,2512,1,0,0,0,2512,2513,5,102,
        0,0,2513,2526,1,0,0,0,2514,2515,3,14,7,0,2515,2517,5,90,0,0,2516,
        2518,3,40,20,0,2517,2516,1,0,0,0,2517,2518,1,0,0,0,2518,2519,1,0,
        0,0,2519,2520,5,31,0,0,2520,2526,1,0,0,0,2521,2522,3,28,14,0,2522,
        2523,5,90,0,0,2523,2524,5,31,0,0,2524,2526,1,0,0,0,2525,2485,1,0,
        0,0,2525,2492,1,0,0,0,2525,2499,1,0,0,0,2525,2505,1,0,0,0,2525,2514,
        1,0,0,0,2525,2521,1,0,0,0,2526,403,1,0,0,0,2527,2528,5,31,0,0,2528,
        2529,3,2,1,0,2529,2531,3,406,203,0,2530,2532,3,30,15,0,2531,2530,
        1,0,0,0,2531,2532,1,0,0,0,2532,2550,1,0,0,0,2533,2534,5,31,0,0,2534,
        2535,3,12,6,0,2535,2537,3,406,203,0,2536,2538,3,30,15,0,2537,2536,
        1,0,0,0,2537,2538,1,0,0,0,2538,2550,1,0,0,0,2539,2540,5,31,0,0,2540,
        2541,3,2,1,0,2541,2542,3,30,15,0,2542,2543,3,246,123,0,2543,2550,
        1,0,0,0,2544,2545,5,31,0,0,2545,2546,3,12,6,0,2546,2547,3,30,15,
        0,2547,2548,3,246,123,0,2548,2550,1,0,0,0,2549,2527,1,0,0,0,2549,
        2533,1,0,0,0,2549,2539,1,0,0,0,2549,2544,1,0,0,0,2550,405,1,0,0,
        0,2551,2555,3,408,204,0,2552,2554,3,408,204,0,2553,2552,1,0,0,0,
        2554,2557,1,0,0,0,2555,2553,1,0,0,0,2555,2556,1,0,0,0,2556,407,1,
        0,0,0,2557,2555,1,0,0,0,2558,2560,3,228,114,0,2559,2558,1,0,0,0,
        2560,2563,1,0,0,0,2561,2559,1,0,0,0,2561,2562,1,0,0,0,2562,2564,
        1,0,0,0,2563,2561,1,0,0,0,2564,2565,5,61,0,0,2565,2566,3,412,206,
        0,2566,2567,5,62,0,0,2567,409,1,0,0,0,2568,2569,3,412,206,0,2569,
        411,1,0,0,0,2570,2573,3,414,207,0,2571,2573,3,422,211,0,2572,2570,
        1,0,0,0,2572,2571,1,0,0,0,2573,413,1,0,0,0,2574,2575,3,416,208,0,
        2575,2576,5,89,0,0,2576,2577,3,420,210,0,2577,415,1,0,0,0,2578,2589,
        5,102,0,0,2579,2581,5,57,0,0,2580,2582,3,148,74,0,2581,2580,1,0,
        0,0,2581,2582,1,0,0,0,2582,2583,1,0,0,0,2583,2589,5,58,0,0,2584,
        2585,5,57,0,0,2585,2586,3,418,209,0,2586,2587,5,58,0,0,2587,2589,
        1,0,0,0,2588,2578,1,0,0,0,2588,2579,1,0,0,0,2588,2584,1,0,0,0,2589,
        417,1,0,0,0,2590,2595,5,102,0,0,2591,2592,5,64,0,0,2592,2594,5,102,
        0,0,2593,2591,1,0,0,0,2594,2597,1,0,0,0,2595,2593,1,0,0,0,2595,2596,
        1,0,0,0,2596,419,1,0,0,0,2597,2595,1,0,0,0,2598,2601,3,412,206,0,
        2599,2601,3,250,125,0,2600,2598,1,0,0,0,2600,2599,1,0,0,0,2601,421,
        1,0,0,0,2602,2605,3,430,215,0,2603,2605,3,424,212,0,2604,2602,1,
        0,0,0,2604,2603,1,0,0,0,2605,423,1,0,0,0,2606,2607,3,426,213,0,2607,
        2608,3,428,214,0,2608,2609,3,412,206,0,2609,425,1,0,0,0,2610,2614,
        3,56,28,0,2611,2614,3,378,189,0,2612,2614,3,384,192,0,2613,2610,
        1,0,0,0,2613,2611,1,0,0,0,2613,2612,1,0,0,0,2614,427,1,0,0,0,2615,
        2616,7,3,0,0,2616,429,1,0,0,0,2617,2625,3,432,216,0,2618,2619,3,
        432,216,0,2619,2620,5,71,0,0,2620,2621,3,412,206,0,2621,2622,5,72,
        0,0,2622,2623,3,430,215,0,2623,2625,1,0,0,0,2624,2617,1,0,0,0,2624,
        2618,1,0,0,0,2625,431,1,0,0,0,2626,2627,6,216,-1,0,2627,2628,3,434,
        217,0,2628,2634,1,0,0,0,2629,2630,10,1,0,0,2630,2631,5,78,0,0,2631,
        2633,3,434,217,0,2632,2629,1,0,0,0,2633,2636,1,0,0,0,2634,2632,1,
        0,0,0,2634,2635,1,0,0,0,2635,433,1,0,0,0,2636,2634,1,0,0,0,2637,
        2638,6,217,-1,0,2638,2639,3,436,218,0,2639,2645,1,0,0,0,2640,2641,
        10,1,0,0,2641,2642,5,77,0,0,2642,2644,3,436,218,0,2643,2640,1,0,
        0,0,2644,2647,1,0,0,0,2645,2643,1,0,0,0,2645,2646,1,0,0,0,2646,435,
        1,0,0,0,2647,2645,1,0,0,0,2648,2649,6,218,-1,0,2649,2650,3,438,219,
        0,2650,2656,1,0,0,0,2651,2652,10,1,0,0,2652,2653,5,86,0,0,2653,2655,
        3,438,219,0,2654,2651,1,0,0,0,2655,2658,1,0,0,0,2656,2654,1,0,0,
        0,2656,2657,1,0,0,0,2657,437,1,0,0,0,2658,2656,1,0,0,0,2659,2660,
        6,219,-1,0,2660,2661,3,440,220,0,2661,2667,1,0,0,0,2662,2663,10,
        1,0,0,2663,2664,5,87,0,0,2664,2666,3,440,220,0,2665,2662,1,0,0,0,
        2666,2669,1,0,0,0,2667,2665,1,0,0,0,2667,2668,1,0,0,0,2668,439,1,
        0,0,0,2669,2667,1,0,0,0,2670,2671,6,220,-1,0,2671,2672,3,442,221,
        0,2672,2678,1,0,0,0,2673,2674,10,1,0,0,2674,2675,5,85,0,0,2675,2677,
        3,442,221,0,2676,2673,1,0,0,0,2677,2680,1,0,0,0,2678,2676,1,0,0,
        0,2678,2679,1,0,0,0,2679,441,1,0,0,0,2680,2678,1,0,0,0,2681,2682,
        6,221,-1,0,2682,2683,3,444,222,0,2683,2692,1,0,0,0,2684,2685,10,
        2,0,0,2685,2686,5,73,0,0,2686,2691,3,444,222,0,2687,2688,10,1,0,
        0,2688,2689,5,76,0,0,2689,2691,3,444,222,0,2690,2684,1,0,0,0,2690,
        2687,1,0,0,0,2691,2694,1,0,0,0,2692,2690,1,0,0,0,2692,2693,1,0,0,
        0,2693,443,1,0,0,0,2694,2692,1,0,0,0,2695,2696,6,222,-1,0,2696,2697,
        3,446,223,0,2697,2715,1,0,0,0,2698,2699,10,5,0,0,2699,2700,5,68,
        0,0,2700,2714,3,446,223,0,2701,2702,10,4,0,0,2702,2703,5,67,0,0,
        2703,2714,3,446,223,0,2704,2705,10,3,0,0,2705,2706,5,74,0,0,2706,
        2714,3,446,223,0,2707,2708,10,2,0,0,2708,2709,5,75,0,0,2709,2714,
        3,446,223,0,2710,2711,10,1,0,0,2711,2712,5,26,0,0,2712,2714,3,10,
        5,0,2713,2698,1,0,0,0,2713,2701,1,0,0,0,2713,2704,1,0,0,0,2713,2707,
        1,0,0,0,2713,2710,1,0,0,0,2714,2717,1,0,0,0,2715,2713,1,0,0,0,2715,
        2716,1,0,0,0,2716,445,1,0,0,0,2717,2715,1,0,0,0,2718,2719,6,223,
        -1,0,2719,2720,3,448,224,0,2720,2736,1,0,0,0,2721,2722,10,3,0,0,
        2722,2723,5,68,0,0,2723,2724,5,68,0,0,2724,2735,3,448,224,0,2725,
        2726,10,2,0,0,2726,2727,5,67,0,0,2727,2728,5,67,0,0,2728,2735,3,
        448,224,0,2729,2730,10,1,0,0,2730,2731,5,67,0,0,2731,2732,5,67,0,
        0,2732,2733,5,67,0,0,2733,2735,3,448,224,0,2734,2721,1,0,0,0,2734,
        2725,1,0,0,0,2734,2729,1,0,0,0,2735,2738,1,0,0,0,2736,2734,1,0,0,
        0,2736,2737,1,0,0,0,2737,447,1,0,0,0,2738,2736,1,0,0,0,2739,2740,
        6,224,-1,0,2740,2741,3,450,225,0,2741,2750,1,0,0,0,2742,2743,10,
        2,0,0,2743,2744,5,81,0,0,2744,2749,3,450,225,0,2745,2746,10,1,0,
        0,2746,2747,5,82,0,0,2747,2749,3,450,225,0,2748,2742,1,0,0,0,2748,
        2745,1,0,0,0,2749,2752,1,0,0,0,2750,2748,1,0,0,0,2750,2751,1,0,0,
        0,2751,449,1,0,0,0,2752,2750,1,0,0,0,2753,2754,6,225,-1,0,2754,2755,
        3,452,226,0,2755,2767,1,0,0,0,2756,2757,10,3,0,0,2757,2758,5,83,
        0,0,2758,2766,3,452,226,0,2759,2760,10,2,0,0,2760,2761,5,84,0,0,
        2761,2766,3,452,226,0,2762,2763,10,1,0,0,2763,2764,5,88,0,0,2764,
        2766,3,452,226,0,2765,2756,1,0,0,0,2765,2759,1,0,0,0,2765,2762,1,
        0,0,0,2766,2769,1,0,0,0,2767,2765,1,0,0,0,2767,2768,1,0,0,0,2768,
        451,1,0,0,0,2769,2767,1,0,0,0,2770,2778,3,454,227,0,2771,2778,3,
        456,228,0,2772,2773,5,81,0,0,2773,2778,3,452,226,0,2774,2775,5,82,
        0,0,2775,2778,3,452,226,0,2776,2778,3,458,229,0,2777,2770,1,0,0,
        0,2777,2771,1,0,0,0,2777,2772,1,0,0,0,2777,2774,1,0,0,0,2777,2776,
        1,0,0,0,2778,453,1,0,0,0,2779,2780,5,79,0,0,2780,2781,3,452,226,
        0,2781,455,1,0,0,0,2782,2783,5,80,0,0,2783,2784,3,452,226,0,2784,
        457,1,0,0,0,2785,2792,3,460,230,0,2786,2787,5,70,0,0,2787,2792,3,
        452,226,0,2788,2789,5,69,0,0,2789,2792,3,452,226,0,2790,2792,3,470,
        235,0,2791,2785,1,0,0,0,2791,2786,1,0,0,0,2791,2788,1,0,0,0,2791,
        2790,1,0,0,0,2792,459,1,0,0,0,2793,2796,3,350,175,0,2794,2796,3,
        56,28,0,2795,2793,1,0,0,0,2795,2794,1,0,0,0,2796,2801,1,0,0,0,2797,
        2800,3,464,232,0,2798,2800,3,468,234,0,2799,2797,1,0,0,0,2799,2798,
        1,0,0,0,2800,2803,1,0,0,0,2801,2799,1,0,0,0,2801,2802,1,0,0,0,2802,
        461,1,0,0,0,2803,2801,1,0,0,0,2804,2805,3,460,230,0,2805,2806,5,
        79,0,0,2806,463,1,0,0,0,2807,2808,5,79,0,0,2808,465,1,0,0,0,2809,
        2810,3,460,230,0,2810,2811,5,80,0,0,2811,467,1,0,0,0,2812,2813,5,
        80,0,0,2813,469,1,0,0,0,2814,2815,5,57,0,0,2815,2816,3,2,1,0,2816,
        2817,5,58,0,0,2817,2818,3,452,226,0,2818,2842,1,0,0,0,2819,2820,
        5,57,0,0,2820,2824,3,10,5,0,2821,2823,3,38,19,0,2822,2821,1,0,0,
        0,2823,2826,1,0,0,0,2824,2822,1,0,0,0,2824,2825,1,0,0,0,2825,2827,
        1,0,0,0,2826,2824,1,0,0,0,2827,2828,5,58,0,0,2828,2829,3,458,229,
        0,2829,2842,1,0,0,0,2830,2831,5,57,0,0,2831,2835,3,10,5,0,2832,2834,
        3,38,19,0,2833,2832,1,0,0,0,2834,2837,1,0,0,0,2835,2833,1,0,0,0,
        2835,2836,1,0,0,0,2836,2838,1,0,0,0,2837,2835,1,0,0,0,2838,2839,
        5,58,0,0,2839,2840,3,414,207,0,2840,2842,1,0,0,0,2841,2814,1,0,0,
        0,2841,2819,1,0,0,0,2841,2830,1,0,0,0,2842,471,1,0,0,0,322,477,484,
        488,492,501,505,509,511,517,522,529,534,536,542,547,552,557,568,
        582,587,595,602,608,613,624,627,641,646,651,656,662,672,680,690,
        698,710,714,719,725,733,746,775,779,784,790,793,796,808,819,833,
        840,849,856,861,876,883,889,893,897,901,905,910,914,918,920,925,
        932,937,939,945,950,954,973,978,994,999,1005,1011,1013,1017,1022,
        1026,1034,1041,1049,1052,1057,1065,1070,1077,1084,1089,1095,1107,
        1112,1116,1126,1131,1139,1142,1147,1155,1158,1163,1168,1173,1178,
        1185,1190,1198,1203,1208,1213,1219,1225,1228,1231,1240,1246,1252,
        1255,1258,1266,1271,1276,1282,1285,1296,1305,1315,1320,1331,1336,
        1348,1353,1365,1375,1380,1388,1391,1398,1406,1412,1421,1431,1435,
        1438,1447,1461,1464,1473,1478,1485,1490,1498,1510,1517,1531,1553,
        1587,1599,1605,1617,1630,1656,1660,1665,1669,1673,1681,1685,1689,
        1696,1705,1713,1728,1740,1746,1752,1773,1778,1784,1796,1807,1817,
        1820,1825,1834,1840,1850,1855,1864,1887,1897,1919,1926,1934,1942,
        1953,1976,1986,1997,2019,2023,2028,2036,2042,2046,2050,2054,2060,
        2065,2070,2074,2078,2084,2089,2094,2098,2102,2104,2109,2114,2119,
        2123,2127,2131,2136,2144,2150,2154,2158,2162,2168,2173,2178,2182,
        2186,2188,2193,2208,2222,2234,2243,2258,2271,2280,2286,2293,2298,
        2305,2310,2317,2322,2329,2334,2342,2347,2351,2355,2360,2367,2374,
        2379,2386,2391,2398,2403,2411,2416,2420,2427,2433,2440,2447,2454,
        2462,2469,2477,2481,2488,2495,2502,2510,2517,2525,2531,2537,2549,
        2555,2561,2572,2581,2588,2595,2600,2604,2613,2624,2634,2645,2656,
        2667,2678,2690,2692,2713,2715,2734,2736,2748,2750,2765,2767,2777,
        2791,2795,2799,2801,2824,2835,2841
    ]

class Java8Parser ( Parser ):

    grammarFileName = "Java8Parser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'abstract'", "'assert'", "'boolean'", 
                     "'break'", "'byte'", "'case'", "'catch'", "'char'", 
                     "'class'", "'const'", "'continue'", "'default'", "'do'", 
                     "'double'", "'else'", "'enum'", "'extends'", "'final'", 
                     "'finally'", "'float'", "'for'", "'if'", "'goto'", 
                     "'implements'", "'import'", "'instanceof'", "'int'", 
                     "'interface'", "'long'", "'native'", "'new'", "'package'", 
                     "'private'", "'protected'", "'public'", "'return'", 
                     "'short'", "'static'", "'strictfp'", "'super'", "'switch'", 
                     "'synchronized'", "'this'", "'throw'", "'throws'", 
                     "'transient'", "'try'", "'void'", "'volatile'", "'while'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'null'", "'('", "')'", "'{'", "'}'", 
                     "'['", "']'", "';'", "','", "'.'", "'='", "'>'", "'<'", 
                     "'!'", "'~'", "'?'", "':'", "'=='", "'<='", "'>='", 
                     "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", "'-'", 
                     "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'->'", "'::'", 
                     "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", 
                     "'%='", "'<<='", "'>>='", "'>>>='", "<INVALID>", "'@'", 
                     "'...'" ]

    symbolicNames = [ "<INVALID>", "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", 
                      "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", 
                      "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", "ENUM", 
                      "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", 
                      "GOTO", "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", 
                      "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", "PRIVATE", 
                      "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", 
                      "STRICTFP", "SUPER", "SWITCH", "SYNCHRONIZED", "THIS", 
                      "THROW", "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", 
                      "WHILE", "IntegerLiteral", "FloatingPointLiteral", 
                      "BooleanLiteral", "CharacterLiteral", "StringLiteral", 
                      "NullLiteral", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                      "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", "ASSIGN", 
                      "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", 
                      "EQUAL", "LE", "GE", "NOTEQUAL", "AND", "OR", "INC", 
                      "DEC", "ADD", "SUB", "MUL", "DIV", "BITAND", "BITOR", 
                      "CARET", "MOD", "ARROW", "COLONCOLON", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", 
                      "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", 
                      "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "Identifier", "AT", 
                      "ELLIPSIS", "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_literal = 0
    RULE_primitiveType = 1
    RULE_numericType = 2
    RULE_integralType = 3
    RULE_floatingPointType = 4
    RULE_referenceType = 5
    RULE_classOrInterfaceType = 6
    RULE_classType = 7
    RULE_classType_lf_classOrInterfaceType = 8
    RULE_classType_lfno_classOrInterfaceType = 9
    RULE_interfaceType = 10
    RULE_interfaceType_lf_classOrInterfaceType = 11
    RULE_interfaceType_lfno_classOrInterfaceType = 12
    RULE_typeVariable = 13
    RULE_arrayType = 14
    RULE_dims = 15
    RULE_typeParameter = 16
    RULE_typeParameterModifier = 17
    RULE_typeBound = 18
    RULE_additionalBound = 19
    RULE_typeArguments = 20
    RULE_typeArgumentList = 21
    RULE_typeArgument = 22
    RULE_wildcard = 23
    RULE_wildcardBounds = 24
    RULE_packageName = 25
    RULE_typeName = 26
    RULE_packageOrTypeName = 27
    RULE_expressionName = 28
    RULE_methodName = 29
    RULE_ambiguousName = 30
    RULE_compilationUnit = 31
    RULE_packageDeclaration = 32
    RULE_packageModifier = 33
    RULE_importDeclaration = 34
    RULE_singleTypeImportDeclaration = 35
    RULE_typeImportOnDemandDeclaration = 36
    RULE_singleStaticImportDeclaration = 37
    RULE_staticImportOnDemandDeclaration = 38
    RULE_typeDeclaration = 39
    RULE_classDeclaration = 40
    RULE_normalClassDeclaration = 41
    RULE_classModifier = 42
    RULE_typeParameters = 43
    RULE_typeParameterList = 44
    RULE_superclass = 45
    RULE_superinterfaces = 46
    RULE_interfaceTypeList = 47
    RULE_classBody = 48
    RULE_classBodyDeclaration = 49
    RULE_classMemberDeclaration = 50
    RULE_fieldDeclaration = 51
    RULE_fieldModifier = 52
    RULE_variableDeclaratorList = 53
    RULE_variableDeclarator = 54
    RULE_variableDeclaratorId = 55
    RULE_variableInitializer = 56
    RULE_unannType = 57
    RULE_unannPrimitiveType = 58
    RULE_unannReferenceType = 59
    RULE_unannClassOrInterfaceType = 60
    RULE_unannClassType = 61
    RULE_unannClassType_lf_unannClassOrInterfaceType = 62
    RULE_unannClassType_lfno_unannClassOrInterfaceType = 63
    RULE_unannInterfaceType = 64
    RULE_unannInterfaceType_lf_unannClassOrInterfaceType = 65
    RULE_unannInterfaceType_lfno_unannClassOrInterfaceType = 66
    RULE_unannTypeVariable = 67
    RULE_unannArrayType = 68
    RULE_methodDeclaration = 69
    RULE_methodModifier = 70
    RULE_methodHeader = 71
    RULE_result = 72
    RULE_methodDeclarator = 73
    RULE_formalParameterList = 74
    RULE_formalParameters = 75
    RULE_formalParameter = 76
    RULE_variableModifier = 77
    RULE_lastFormalParameter = 78
    RULE_receiverParameter = 79
    RULE_throws_ = 80
    RULE_exceptionTypeList = 81
    RULE_exceptionType = 82
    RULE_methodBody = 83
    RULE_instanceInitializer = 84
    RULE_staticInitializer = 85
    RULE_constructorDeclaration = 86
    RULE_constructorModifier = 87
    RULE_constructorDeclarator = 88
    RULE_simpleTypeName = 89
    RULE_constructorBody = 90
    RULE_explicitConstructorInvocation = 91
    RULE_enumDeclaration = 92
    RULE_enumBody = 93
    RULE_enumConstantList = 94
    RULE_enumConstant = 95
    RULE_enumConstantModifier = 96
    RULE_enumBodyDeclarations = 97
    RULE_interfaceDeclaration = 98
    RULE_normalInterfaceDeclaration = 99
    RULE_interfaceModifier = 100
    RULE_extendsInterfaces = 101
    RULE_interfaceBody = 102
    RULE_interfaceMemberDeclaration = 103
    RULE_constantDeclaration = 104
    RULE_constantModifier = 105
    RULE_interfaceMethodDeclaration = 106
    RULE_interfaceMethodModifier = 107
    RULE_annotationTypeDeclaration = 108
    RULE_annotationTypeBody = 109
    RULE_annotationTypeMemberDeclaration = 110
    RULE_annotationTypeElementDeclaration = 111
    RULE_annotationTypeElementModifier = 112
    RULE_defaultValue = 113
    RULE_annotation = 114
    RULE_normalAnnotation = 115
    RULE_elementValuePairList = 116
    RULE_elementValuePair = 117
    RULE_elementValue = 118
    RULE_elementValueArrayInitializer = 119
    RULE_elementValueList = 120
    RULE_markerAnnotation = 121
    RULE_singleElementAnnotation = 122
    RULE_arrayInitializer = 123
    RULE_variableInitializerList = 124
    RULE_block = 125
    RULE_blockStatements = 126
    RULE_blockStatement = 127
    RULE_localVariableDeclarationStatement = 128
    RULE_localVariableDeclaration = 129
    RULE_statement = 130
    RULE_statementNoShortIf = 131
    RULE_statementWithoutTrailingSubstatement = 132
    RULE_emptyStatement_ = 133
    RULE_labeledStatement = 134
    RULE_labeledStatementNoShortIf = 135
    RULE_expressionStatement = 136
    RULE_statementExpression = 137
    RULE_ifThenStatement = 138
    RULE_ifThenElseStatement = 139
    RULE_ifThenElseStatementNoShortIf = 140
    RULE_assertStatement = 141
    RULE_switchStatement = 142
    RULE_switchBlock = 143
    RULE_switchBlockStatementGroup = 144
    RULE_switchLabels = 145
    RULE_switchLabel = 146
    RULE_enumConstantName = 147
    RULE_whileStatement = 148
    RULE_whileStatementNoShortIf = 149
    RULE_doStatement = 150
    RULE_forStatement = 151
    RULE_forStatementNoShortIf = 152
    RULE_basicForStatement = 153
    RULE_basicForStatementNoShortIf = 154
    RULE_forInit = 155
    RULE_forUpdate = 156
    RULE_statementExpressionList = 157
    RULE_enhancedForStatement = 158
    RULE_enhancedForStatementNoShortIf = 159
    RULE_breakStatement = 160
    RULE_continueStatement = 161
    RULE_returnStatement = 162
    RULE_throwStatement = 163
    RULE_synchronizedStatement = 164
    RULE_tryStatement = 165
    RULE_catches = 166
    RULE_catchClause = 167
    RULE_catchFormalParameter = 168
    RULE_catchType = 169
    RULE_finally_ = 170
    RULE_tryWithResourcesStatement = 171
    RULE_resourceSpecification = 172
    RULE_resourceList = 173
    RULE_resource = 174
    RULE_primary = 175
    RULE_primaryNoNewArray = 176
    RULE_primaryNoNewArray_lf_arrayAccess = 177
    RULE_primaryNoNewArray_lfno_arrayAccess = 178
    RULE_primaryNoNewArray_lf_primary = 179
    RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary = 180
    RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary = 181
    RULE_primaryNoNewArray_lfno_primary = 182
    RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary = 183
    RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary = 184
    RULE_classInstanceCreationExpression = 185
    RULE_classInstanceCreationExpression_lf_primary = 186
    RULE_classInstanceCreationExpression_lfno_primary = 187
    RULE_typeArgumentsOrDiamond = 188
    RULE_fieldAccess = 189
    RULE_fieldAccess_lf_primary = 190
    RULE_fieldAccess_lfno_primary = 191
    RULE_arrayAccess = 192
    RULE_arrayAccess_lf_primary = 193
    RULE_arrayAccess_lfno_primary = 194
    RULE_methodInvocation = 195
    RULE_methodInvocation_lf_primary = 196
    RULE_methodInvocation_lfno_primary = 197
    RULE_argumentList = 198
    RULE_methodReference = 199
    RULE_methodReference_lf_primary = 200
    RULE_methodReference_lfno_primary = 201
    RULE_arrayCreationExpression = 202
    RULE_dimExprs = 203
    RULE_dimExpr = 204
    RULE_constantExpression = 205
    RULE_expression = 206
    RULE_lambdaExpression = 207
    RULE_lambdaParameters = 208
    RULE_inferredFormalParameterList = 209
    RULE_lambdaBody = 210
    RULE_assignmentExpression = 211
    RULE_assignment = 212
    RULE_leftHandSide = 213
    RULE_assignmentOperator = 214
    RULE_conditionalExpression = 215
    RULE_conditionalOrExpression = 216
    RULE_conditionalAndExpression = 217
    RULE_inclusiveOrExpression = 218
    RULE_exclusiveOrExpression = 219
    RULE_andExpression = 220
    RULE_equalityExpression = 221
    RULE_relationalExpression = 222
    RULE_shiftExpression = 223
    RULE_additiveExpression = 224
    RULE_multiplicativeExpression = 225
    RULE_unaryExpression = 226
    RULE_preIncrementExpression = 227
    RULE_preDecrementExpression = 228
    RULE_unaryExpressionNotPlusMinus = 229
    RULE_postfixExpression = 230
    RULE_postIncrementExpression = 231
    RULE_postIncrementExpression_lf_postfixExpression = 232
    RULE_postDecrementExpression = 233
    RULE_postDecrementExpression_lf_postfixExpression = 234
    RULE_castExpression = 235

    ruleNames =  [ "literal", "primitiveType", "numericType", "integralType", 
                   "floatingPointType", "referenceType", "classOrInterfaceType", 
                   "classType", "classType_lf_classOrInterfaceType", "classType_lfno_classOrInterfaceType", 
                   "interfaceType", "interfaceType_lf_classOrInterfaceType", 
                   "interfaceType_lfno_classOrInterfaceType", "typeVariable", 
                   "arrayType", "dims", "typeParameter", "typeParameterModifier", 
                   "typeBound", "additionalBound", "typeArguments", "typeArgumentList", 
                   "typeArgument", "wildcard", "wildcardBounds", "packageName", 
                   "typeName", "packageOrTypeName", "expressionName", "methodName", 
                   "ambiguousName", "compilationUnit", "packageDeclaration", 
                   "packageModifier", "importDeclaration", "singleTypeImportDeclaration", 
                   "typeImportOnDemandDeclaration", "singleStaticImportDeclaration", 
                   "staticImportOnDemandDeclaration", "typeDeclaration", 
                   "classDeclaration", "normalClassDeclaration", "classModifier", 
                   "typeParameters", "typeParameterList", "superclass", 
                   "superinterfaces", "interfaceTypeList", "classBody", 
                   "classBodyDeclaration", "classMemberDeclaration", "fieldDeclaration", 
                   "fieldModifier", "variableDeclaratorList", "variableDeclarator", 
                   "variableDeclaratorId", "variableInitializer", "unannType", 
                   "unannPrimitiveType", "unannReferenceType", "unannClassOrInterfaceType", 
                   "unannClassType", "unannClassType_lf_unannClassOrInterfaceType", 
                   "unannClassType_lfno_unannClassOrInterfaceType", "unannInterfaceType", 
                   "unannInterfaceType_lf_unannClassOrInterfaceType", "unannInterfaceType_lfno_unannClassOrInterfaceType", 
                   "unannTypeVariable", "unannArrayType", "methodDeclaration", 
                   "methodModifier", "methodHeader", "result", "methodDeclarator", 
                   "formalParameterList", "formalParameters", "formalParameter", 
                   "variableModifier", "lastFormalParameter", "receiverParameter", 
                   "throws_", "exceptionTypeList", "exceptionType", "methodBody", 
                   "instanceInitializer", "staticInitializer", "constructorDeclaration", 
                   "constructorModifier", "constructorDeclarator", "simpleTypeName", 
                   "constructorBody", "explicitConstructorInvocation", "enumDeclaration", 
                   "enumBody", "enumConstantList", "enumConstant", "enumConstantModifier", 
                   "enumBodyDeclarations", "interfaceDeclaration", "normalInterfaceDeclaration", 
                   "interfaceModifier", "extendsInterfaces", "interfaceBody", 
                   "interfaceMemberDeclaration", "constantDeclaration", 
                   "constantModifier", "interfaceMethodDeclaration", "interfaceMethodModifier", 
                   "annotationTypeDeclaration", "annotationTypeBody", "annotationTypeMemberDeclaration", 
                   "annotationTypeElementDeclaration", "annotationTypeElementModifier", 
                   "defaultValue", "annotation", "normalAnnotation", "elementValuePairList", 
                   "elementValuePair", "elementValue", "elementValueArrayInitializer", 
                   "elementValueList", "markerAnnotation", "singleElementAnnotation", 
                   "arrayInitializer", "variableInitializerList", "block", 
                   "blockStatements", "blockStatement", "localVariableDeclarationStatement", 
                   "localVariableDeclaration", "statement", "statementNoShortIf", 
                   "statementWithoutTrailingSubstatement", "emptyStatement_", 
                   "labeledStatement", "labeledStatementNoShortIf", "expressionStatement", 
                   "statementExpression", "ifThenStatement", "ifThenElseStatement", 
                   "ifThenElseStatementNoShortIf", "assertStatement", "switchStatement", 
                   "switchBlock", "switchBlockStatementGroup", "switchLabels", 
                   "switchLabel", "enumConstantName", "whileStatement", 
                   "whileStatementNoShortIf", "doStatement", "forStatement", 
                   "forStatementNoShortIf", "basicForStatement", "basicForStatementNoShortIf", 
                   "forInit", "forUpdate", "statementExpressionList", "enhancedForStatement", 
                   "enhancedForStatementNoShortIf", "breakStatement", "continueStatement", 
                   "returnStatement", "throwStatement", "synchronizedStatement", 
                   "tryStatement", "catches", "catchClause", "catchFormalParameter", 
                   "catchType", "finally_", "tryWithResourcesStatement", 
                   "resourceSpecification", "resourceList", "resource", 
                   "primary", "primaryNoNewArray", "primaryNoNewArray_lf_arrayAccess", 
                   "primaryNoNewArray_lfno_arrayAccess", "primaryNoNewArray_lf_primary", 
                   "primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary", 
                   "primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary", 
                   "primaryNoNewArray_lfno_primary", "primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary", 
                   "primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary", 
                   "classInstanceCreationExpression", "classInstanceCreationExpression_lf_primary", 
                   "classInstanceCreationExpression_lfno_primary", "typeArgumentsOrDiamond", 
                   "fieldAccess", "fieldAccess_lf_primary", "fieldAccess_lfno_primary", 
                   "arrayAccess", "arrayAccess_lf_primary", "arrayAccess_lfno_primary", 
                   "methodInvocation", "methodInvocation_lf_primary", "methodInvocation_lfno_primary", 
                   "argumentList", "methodReference", "methodReference_lf_primary", 
                   "methodReference_lfno_primary", "arrayCreationExpression", 
                   "dimExprs", "dimExpr", "constantExpression", "expression", 
                   "lambdaExpression", "lambdaParameters", "inferredFormalParameterList", 
                   "lambdaBody", "assignmentExpression", "assignment", "leftHandSide", 
                   "assignmentOperator", "conditionalExpression", "conditionalOrExpression", 
                   "conditionalAndExpression", "inclusiveOrExpression", 
                   "exclusiveOrExpression", "andExpression", "equalityExpression", 
                   "relationalExpression", "shiftExpression", "additiveExpression", 
                   "multiplicativeExpression", "unaryExpression", "preIncrementExpression", 
                   "preDecrementExpression", "unaryExpressionNotPlusMinus", 
                   "postfixExpression", "postIncrementExpression", "postIncrementExpression_lf_postfixExpression", 
                   "postDecrementExpression", "postDecrementExpression_lf_postfixExpression", 
                   "castExpression" ]

    EOF = Token.EOF
    ABSTRACT=1
    ASSERT=2
    BOOLEAN=3
    BREAK=4
    BYTE=5
    CASE=6
    CATCH=7
    CHAR=8
    CLASS=9
    CONST=10
    CONTINUE=11
    DEFAULT=12
    DO=13
    DOUBLE=14
    ELSE=15
    ENUM=16
    EXTENDS=17
    FINAL=18
    FINALLY=19
    FLOAT=20
    FOR=21
    IF=22
    GOTO=23
    IMPLEMENTS=24
    IMPORT=25
    INSTANCEOF=26
    INT=27
    INTERFACE=28
    LONG=29
    NATIVE=30
    NEW=31
    PACKAGE=32
    PRIVATE=33
    PROTECTED=34
    PUBLIC=35
    RETURN=36
    SHORT=37
    STATIC=38
    STRICTFP=39
    SUPER=40
    SWITCH=41
    SYNCHRONIZED=42
    THIS=43
    THROW=44
    THROWS=45
    TRANSIENT=46
    TRY=47
    VOID=48
    VOLATILE=49
    WHILE=50
    IntegerLiteral=51
    FloatingPointLiteral=52
    BooleanLiteral=53
    CharacterLiteral=54
    StringLiteral=55
    NullLiteral=56
    LPAREN=57
    RPAREN=58
    LBRACE=59
    RBRACE=60
    LBRACK=61
    RBRACK=62
    SEMI=63
    COMMA=64
    DOT=65
    ASSIGN=66
    GT=67
    LT=68
    BANG=69
    TILDE=70
    QUESTION=71
    COLON=72
    EQUAL=73
    LE=74
    GE=75
    NOTEQUAL=76
    AND=77
    OR=78
    INC=79
    DEC=80
    ADD=81
    SUB=82
    MUL=83
    DIV=84
    BITAND=85
    BITOR=86
    CARET=87
    MOD=88
    ARROW=89
    COLONCOLON=90
    ADD_ASSIGN=91
    SUB_ASSIGN=92
    MUL_ASSIGN=93
    DIV_ASSIGN=94
    AND_ASSIGN=95
    OR_ASSIGN=96
    XOR_ASSIGN=97
    MOD_ASSIGN=98
    LSHIFT_ASSIGN=99
    RSHIFT_ASSIGN=100
    URSHIFT_ASSIGN=101
    Identifier=102
    AT=103
    ELLIPSIS=104
    WS=105
    COMMENT=106
    LINE_COMMENT=107

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



        



    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IntegerLiteral(self):
            return self.getToken(Java8Parser.IntegerLiteral, 0)

        def FloatingPointLiteral(self):
            return self.getToken(Java8Parser.FloatingPointLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(Java8Parser.BooleanLiteral, 0)

        def CharacterLiteral(self):
            return self.getToken(Java8Parser.CharacterLiteral, 0)

        def StringLiteral(self):
            return self.getToken(Java8Parser.StringLiteral, 0)

        def NullLiteral(self):
            return self.getToken(Java8Parser.NullLiteral, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = Java8Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 141863388262170624) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericType(self):
            return self.getTypedRuleContext(Java8Parser.NumericTypeContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AnnotationContext,i)


        def BOOLEAN(self):
            return self.getToken(Java8Parser.BOOLEAN, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)




    def primitiveType(self):

        localctx = Java8Parser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==103:
                    self.state = 474
                    self.annotation()
                    self.state = 479
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 480
                self.numericType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==103:
                    self.state = 481
                    self.annotation()
                    self.state = 486
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 487
                self.match(Java8Parser.BOOLEAN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integralType(self):
            return self.getTypedRuleContext(Java8Parser.IntegralTypeContext,0)


        def floatingPointType(self):
            return self.getTypedRuleContext(Java8Parser.FloatingPointTypeContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_numericType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericType" ):
                listener.enterNumericType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericType" ):
                listener.exitNumericType(self)




    def numericType(self):

        localctx = Java8Parser.NumericTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_numericType)
        try:
            self.state = 492
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 8, 27, 29, 37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 490
                self.integralType()
                pass
            elif token in [14, 20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 491
                self.floatingPointType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegralTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BYTE(self):
            return self.getToken(Java8Parser.BYTE, 0)

        def SHORT(self):
            return self.getToken(Java8Parser.SHORT, 0)

        def INT(self):
            return self.getToken(Java8Parser.INT, 0)

        def LONG(self):
            return self.getToken(Java8Parser.LONG, 0)

        def CHAR(self):
            return self.getToken(Java8Parser.CHAR, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_integralType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegralType" ):
                listener.enterIntegralType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegralType" ):
                listener.exitIntegralType(self)




    def integralType(self):

        localctx = Java8Parser.IntegralTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_integralType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 138110042400) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatingPointTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT(self):
            return self.getToken(Java8Parser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(Java8Parser.DOUBLE, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_floatingPointType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatingPointType" ):
                listener.enterFloatingPointType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatingPointType" ):
                listener.exitFloatingPointType(self)




    def floatingPointType(self):

        localctx = Java8Parser.FloatingPointTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_floatingPointType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            _la = self._input.LA(1)
            if not(_la==14 or _la==20):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(Java8Parser.ClassOrInterfaceTypeContext,0)


        def typeVariable(self):
            return self.getTypedRuleContext(Java8Parser.TypeVariableContext,0)


        def arrayType(self):
            return self.getTypedRuleContext(Java8Parser.ArrayTypeContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_referenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceType" ):
                listener.enterReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceType" ):
                listener.exitReferenceType(self)




    def referenceType(self):

        localctx = Java8Parser.ReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_referenceType)
        try:
            self.state = 501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 498
                self.classOrInterfaceType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 499
                self.typeVariable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 500
                self.arrayType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classType_lfno_classOrInterfaceType(self):
            return self.getTypedRuleContext(Java8Parser.ClassType_lfno_classOrInterfaceTypeContext,0)


        def interfaceType_lfno_classOrInterfaceType(self):
            return self.getTypedRuleContext(Java8Parser.InterfaceType_lfno_classOrInterfaceTypeContext,0)


        def classType_lf_classOrInterfaceType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.ClassType_lf_classOrInterfaceTypeContext)
            else:
                return self.getTypedRuleContext(Java8Parser.ClassType_lf_classOrInterfaceTypeContext,i)


        def interfaceType_lf_classOrInterfaceType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.InterfaceType_lf_classOrInterfaceTypeContext)
            else:
                return self.getTypedRuleContext(Java8Parser.InterfaceType_lf_classOrInterfaceTypeContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_classOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceType" ):
                listener.enterClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceType" ):
                listener.exitClassOrInterfaceType(self)




    def classOrInterfaceType(self):

        localctx = Java8Parser.ClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_classOrInterfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 503
                self.classType_lfno_classOrInterfaceType()
                pass

            elif la_ == 2:
                self.state = 504
                self.interfaceType_lfno_classOrInterfaceType()
                pass


            self.state = 511
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 509
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                    if la_ == 1:
                        self.state = 507
                        self.classType_lf_classOrInterfaceType()
                        pass

                    elif la_ == 2:
                        self.state = 508
                        self.interfaceType_lf_classOrInterfaceType()
                        pass

             
                self.state = 513
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AnnotationContext,i)


        def typeArguments(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(Java8Parser.ClassOrInterfaceTypeContext,0)


        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_classType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassType" ):
                listener.enterClassType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassType" ):
                listener.exitClassType(self)




    def classType(self):

        localctx = Java8Parser.ClassTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_classType)
        self._la = 0 # Token type
        try:
            self.state = 536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==103:
                    self.state = 514
                    self.annotation()
                    self.state = 519
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 520
                self.match(Java8Parser.Identifier)
                self.state = 522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 521
                    self.typeArguments()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 524
                self.classOrInterfaceType()
                self.state = 525
                self.match(Java8Parser.DOT)
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==103:
                    self.state = 526
                    self.annotation()
                    self.state = 531
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 532
                self.match(Java8Parser.Identifier)
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 533
                    self.typeArguments()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassType_lf_classOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AnnotationContext,i)


        def typeArguments(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_classType_lf_classOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassType_lf_classOrInterfaceType" ):
                listener.enterClassType_lf_classOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassType_lf_classOrInterfaceType" ):
                listener.exitClassType_lf_classOrInterfaceType(self)




    def classType_lf_classOrInterfaceType(self):

        localctx = Java8Parser.ClassType_lf_classOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_classType_lf_classOrInterfaceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.match(Java8Parser.DOT)
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==103:
                self.state = 539
                self.annotation()
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 545
            self.match(Java8Parser.Identifier)
            self.state = 547
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 546
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassType_lfno_classOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AnnotationContext,i)


        def typeArguments(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_classType_lfno_classOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassType_lfno_classOrInterfaceType" ):
                listener.enterClassType_lfno_classOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassType_lfno_classOrInterfaceType" ):
                listener.exitClassType_lfno_classOrInterfaceType(self)




    def classType_lfno_classOrInterfaceType(self):

        localctx = Java8Parser.ClassType_lfno_classOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_classType_lfno_classOrInterfaceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==103:
                self.state = 549
                self.annotation()
                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 555
            self.match(Java8Parser.Identifier)
            self.state = 557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 556
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classType(self):
            return self.getTypedRuleContext(Java8Parser.ClassTypeContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_interfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceType" ):
                listener.enterInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceType" ):
                listener.exitInterfaceType(self)




    def interfaceType(self):

        localctx = Java8Parser.InterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_interfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.classType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceType_lf_classOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classType_lf_classOrInterfaceType(self):
            return self.getTypedRuleContext(Java8Parser.ClassType_lf_classOrInterfaceTypeContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_interfaceType_lf_classOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceType_lf_classOrInterfaceType" ):
                listener.enterInterfaceType_lf_classOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceType_lf_classOrInterfaceType" ):
                listener.exitInterfaceType_lf_classOrInterfaceType(self)




    def interfaceType_lf_classOrInterfaceType(self):

        localctx = Java8Parser.InterfaceType_lf_classOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_interfaceType_lf_classOrInterfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.classType_lf_classOrInterfaceType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceType_lfno_classOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classType_lfno_classOrInterfaceType(self):
            return self.getTypedRuleContext(Java8Parser.ClassType_lfno_classOrInterfaceTypeContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_interfaceType_lfno_classOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceType_lfno_classOrInterfaceType" ):
                listener.enterInterfaceType_lfno_classOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceType_lfno_classOrInterfaceType" ):
                listener.exitInterfaceType_lfno_classOrInterfaceType(self)




    def interfaceType_lfno_classOrInterfaceType(self):

        localctx = Java8Parser.InterfaceType_lfno_classOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_interfaceType_lfno_classOrInterfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.classType_lfno_classOrInterfaceType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AnnotationContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_typeVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeVariable" ):
                listener.enterTypeVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeVariable" ):
                listener.exitTypeVariable(self)




    def typeVariable(self):

        localctx = Java8Parser.TypeVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_typeVariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==103:
                self.state = 565
                self.annotation()
                self.state = 570
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 571
            self.match(Java8Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveType(self):
            return self.getTypedRuleContext(Java8Parser.PrimitiveTypeContext,0)


        def dims(self):
            return self.getTypedRuleContext(Java8Parser.DimsContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(Java8Parser.ClassOrInterfaceTypeContext,0)


        def typeVariable(self):
            return self.getTypedRuleContext(Java8Parser.TypeVariableContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_arrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)




    def arrayType(self):

        localctx = Java8Parser.ArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_arrayType)
        try:
            self.state = 582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 573
                self.primitiveType()
                self.state = 574
                self.dims()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 576
                self.classOrInterfaceType()
                self.state = 577
                self.dims()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 579
                self.typeVariable()
                self.state = 580
                self.dims()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DimsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.LBRACK)
            else:
                return self.getToken(Java8Parser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.RBRACK)
            else:
                return self.getToken(Java8Parser.RBRACK, i)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AnnotationContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_dims

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDims" ):
                listener.enterDims(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDims" ):
                listener.exitDims(self)




    def dims(self):

        localctx = Java8Parser.DimsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_dims)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==103:
                self.state = 584
                self.annotation()
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 590
            self.match(Java8Parser.LBRACK)
            self.state = 591
            self.match(Java8Parser.RBRACK)
            self.state = 602
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 595
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==103:
                        self.state = 592
                        self.annotation()
                        self.state = 597
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 598
                    self.match(Java8Parser.LBRACK)
                    self.state = 599
                    self.match(Java8Parser.RBRACK) 
                self.state = 604
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def typeParameterModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.TypeParameterModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.TypeParameterModifierContext,i)


        def typeBound(self):
            return self.getTypedRuleContext(Java8Parser.TypeBoundContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)




    def typeParameter(self):

        localctx = Java8Parser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==103:
                self.state = 605
                self.typeParameterModifier()
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 611
            self.match(Java8Parser.Identifier)
            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 612
                self.typeBound()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java8Parser.AnnotationContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_typeParameterModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterModifier" ):
                listener.enterTypeParameterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterModifier" ):
                listener.exitTypeParameterModifier(self)




    def typeParameterModifier(self):

        localctx = Java8Parser.TypeParameterModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeParameterModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.annotation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENDS(self):
            return self.getToken(Java8Parser.EXTENDS, 0)

        def typeVariable(self):
            return self.getTypedRuleContext(Java8Parser.TypeVariableContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(Java8Parser.ClassOrInterfaceTypeContext,0)


        def additionalBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AdditionalBoundContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AdditionalBoundContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_typeBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBound" ):
                listener.enterTypeBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBound" ):
                listener.exitTypeBound(self)




    def typeBound(self):

        localctx = Java8Parser.TypeBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_typeBound)
        self._la = 0 # Token type
        try:
            self.state = 627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 617
                self.match(Java8Parser.EXTENDS)
                self.state = 618
                self.typeVariable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 619
                self.match(Java8Parser.EXTENDS)
                self.state = 620
                self.classOrInterfaceType()
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==85:
                    self.state = 621
                    self.additionalBound()
                    self.state = 626
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditionalBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BITAND(self):
            return self.getToken(Java8Parser.BITAND, 0)

        def interfaceType(self):
            return self.getTypedRuleContext(Java8Parser.InterfaceTypeContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_additionalBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditionalBound" ):
                listener.enterAdditionalBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditionalBound" ):
                listener.exitAdditionalBound(self)




    def additionalBound(self):

        localctx = Java8Parser.AdditionalBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_additionalBound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(Java8Parser.BITAND)
            self.state = 630
            self.interfaceType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(Java8Parser.LT, 0)

        def typeArgumentList(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentListContext,0)


        def GT(self):
            return self.getToken(Java8Parser.GT, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)




    def typeArguments(self):

        localctx = Java8Parser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_typeArguments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.match(Java8Parser.LT)
            self.state = 633
            self.typeArgumentList()
            self.state = 634
            self.match(Java8Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.TypeArgumentContext)
            else:
                return self.getTypedRuleContext(Java8Parser.TypeArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.COMMA)
            else:
                return self.getToken(Java8Parser.COMMA, i)

        def getRuleIndex(self):
            return Java8Parser.RULE_typeArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgumentList" ):
                listener.enterTypeArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgumentList" ):
                listener.exitTypeArgumentList(self)




    def typeArgumentList(self):

        localctx = Java8Parser.TypeArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_typeArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.typeArgument()
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==64:
                self.state = 637
                self.match(Java8Parser.COMMA)
                self.state = 638
                self.typeArgument()
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referenceType(self):
            return self.getTypedRuleContext(Java8Parser.ReferenceTypeContext,0)


        def wildcard(self):
            return self.getTypedRuleContext(Java8Parser.WildcardContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_typeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgument" ):
                listener.enterTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgument" ):
                listener.exitTypeArgument(self)




    def typeArgument(self):

        localctx = Java8Parser.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_typeArgument)
        try:
            self.state = 646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 644
                self.referenceType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 645
                self.wildcard()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUESTION(self):
            return self.getToken(Java8Parser.QUESTION, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AnnotationContext,i)


        def wildcardBounds(self):
            return self.getTypedRuleContext(Java8Parser.WildcardBoundsContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard" ):
                listener.enterWildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard" ):
                listener.exitWildcard(self)




    def wildcard(self):

        localctx = Java8Parser.WildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_wildcard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==103:
                self.state = 648
                self.annotation()
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 654
            self.match(Java8Parser.QUESTION)
            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17 or _la==40:
                self.state = 655
                self.wildcardBounds()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WildcardBoundsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENDS(self):
            return self.getToken(Java8Parser.EXTENDS, 0)

        def referenceType(self):
            return self.getTypedRuleContext(Java8Parser.ReferenceTypeContext,0)


        def SUPER(self):
            return self.getToken(Java8Parser.SUPER, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_wildcardBounds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcardBounds" ):
                listener.enterWildcardBounds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcardBounds" ):
                listener.exitWildcardBounds(self)




    def wildcardBounds(self):

        localctx = Java8Parser.WildcardBoundsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_wildcardBounds)
        try:
            self.state = 662
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 658
                self.match(Java8Parser.EXTENDS)
                self.state = 659
                self.referenceType()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 2)
                self.state = 660
                self.match(Java8Parser.SUPER)
                self.state = 661
                self.referenceType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def packageName(self):
            return self.getTypedRuleContext(Java8Parser.PackageNameContext,0)


        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_packageName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageName" ):
                listener.enterPackageName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageName" ):
                listener.exitPackageName(self)



    def packageName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java8Parser.PackageNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 50
        self.enterRecursionRule(localctx, 50, self.RULE_packageName, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(Java8Parser.Identifier)
            self._ctx.stop = self._input.LT(-1)
            self.state = 672
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Java8Parser.PackageNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_packageName)
                    self.state = 667
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 668
                    self.match(Java8Parser.DOT)
                    self.state = 669
                    self.match(Java8Parser.Identifier) 
                self.state = 674
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def packageOrTypeName(self):
            return self.getTypedRuleContext(Java8Parser.PackageOrTypeNameContext,0)


        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = Java8Parser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_typeName)
        try:
            self.state = 680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 675
                self.match(Java8Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 676
                self.packageOrTypeName(0)
                self.state = 677
                self.match(Java8Parser.DOT)
                self.state = 678
                self.match(Java8Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageOrTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def packageOrTypeName(self):
            return self.getTypedRuleContext(Java8Parser.PackageOrTypeNameContext,0)


        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_packageOrTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageOrTypeName" ):
                listener.enterPackageOrTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageOrTypeName" ):
                listener.exitPackageOrTypeName(self)



    def packageOrTypeName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java8Parser.PackageOrTypeNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_packageOrTypeName, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self.match(Java8Parser.Identifier)
            self._ctx.stop = self._input.LT(-1)
            self.state = 690
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Java8Parser.PackageOrTypeNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_packageOrTypeName)
                    self.state = 685
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 686
                    self.match(Java8Parser.DOT)
                    self.state = 687
                    self.match(Java8Parser.Identifier) 
                self.state = 692
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def ambiguousName(self):
            return self.getTypedRuleContext(Java8Parser.AmbiguousNameContext,0)


        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_expressionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionName" ):
                listener.enterExpressionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionName" ):
                listener.exitExpressionName(self)




    def expressionName(self):

        localctx = Java8Parser.ExpressionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_expressionName)
        try:
            self.state = 698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 693
                self.match(Java8Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 694
                self.ambiguousName(0)
                self.state = 695
                self.match(Java8Parser.DOT)
                self.state = 696
                self.match(Java8Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_methodName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodName" ):
                listener.enterMethodName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodName" ):
                listener.exitMethodName(self)




    def methodName(self):

        localctx = Java8Parser.MethodNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_methodName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(Java8Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AmbiguousNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def ambiguousName(self):
            return self.getTypedRuleContext(Java8Parser.AmbiguousNameContext,0)


        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_ambiguousName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmbiguousName" ):
                listener.enterAmbiguousName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmbiguousName" ):
                listener.exitAmbiguousName(self)



    def ambiguousName(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java8Parser.AmbiguousNameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_ambiguousName, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(Java8Parser.Identifier)
            self._ctx.stop = self._input.LT(-1)
            self.state = 710
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Java8Parser.AmbiguousNameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_ambiguousName)
                    self.state = 705
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 706
                    self.match(Java8Parser.DOT)
                    self.state = 707
                    self.match(Java8Parser.Identifier) 
                self.state = 712
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(Java8Parser.EOF, 0)

        def packageDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.PackageDeclarationContext,0)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.ImportDeclarationContext,i)


        def typeDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.TypeDeclarationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.TypeDeclarationContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = Java8Parser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 713
                self.packageDeclaration()


            self.state = 719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==25:
                self.state = 716
                self.importDeclaration()
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223371151822749182) != 0) or _la==103:
                self.state = 722
                self.typeDeclaration()
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 728
            self.match(Java8Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(Java8Parser.PACKAGE, 0)

        def packageName(self):
            return self.getTypedRuleContext(Java8Parser.PackageNameContext,0)


        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def packageModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.PackageModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.PackageModifierContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_packageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageDeclaration" ):
                listener.enterPackageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageDeclaration" ):
                listener.exitPackageDeclaration(self)




    def packageDeclaration(self):

        localctx = Java8Parser.PackageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_packageDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==103:
                self.state = 730
                self.packageModifier()
                self.state = 735
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 736
            self.match(Java8Parser.PACKAGE)
            self.state = 737
            self.packageName(0)
            self.state = 738
            self.match(Java8Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java8Parser.AnnotationContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_packageModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageModifier" ):
                listener.enterPackageModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageModifier" ):
                listener.exitPackageModifier(self)




    def packageModifier(self):

        localctx = Java8Parser.PackageModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_packageModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.annotation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleTypeImportDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.SingleTypeImportDeclarationContext,0)


        def typeImportOnDemandDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.TypeImportOnDemandDeclarationContext,0)


        def singleStaticImportDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.SingleStaticImportDeclarationContext,0)


        def staticImportOnDemandDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.StaticImportOnDemandDeclarationContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = Java8Parser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_importDeclaration)
        try:
            self.state = 746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 742
                self.singleTypeImportDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 743
                self.typeImportOnDemandDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 744
                self.singleStaticImportDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 745
                self.staticImportOnDemandDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTypeImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Java8Parser.IMPORT, 0)

        def typeName(self):
            return self.getTypedRuleContext(Java8Parser.TypeNameContext,0)


        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_singleTypeImportDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleTypeImportDeclaration" ):
                listener.enterSingleTypeImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleTypeImportDeclaration" ):
                listener.exitSingleTypeImportDeclaration(self)




    def singleTypeImportDeclaration(self):

        localctx = Java8Parser.SingleTypeImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_singleTypeImportDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.match(Java8Parser.IMPORT)
            self.state = 749
            self.typeName()
            self.state = 750
            self.match(Java8Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeImportOnDemandDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Java8Parser.IMPORT, 0)

        def packageOrTypeName(self):
            return self.getTypedRuleContext(Java8Parser.PackageOrTypeNameContext,0)


        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def MUL(self):
            return self.getToken(Java8Parser.MUL, 0)

        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_typeImportOnDemandDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeImportOnDemandDeclaration" ):
                listener.enterTypeImportOnDemandDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeImportOnDemandDeclaration" ):
                listener.exitTypeImportOnDemandDeclaration(self)




    def typeImportOnDemandDeclaration(self):

        localctx = Java8Parser.TypeImportOnDemandDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_typeImportOnDemandDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(Java8Parser.IMPORT)
            self.state = 753
            self.packageOrTypeName(0)
            self.state = 754
            self.match(Java8Parser.DOT)
            self.state = 755
            self.match(Java8Parser.MUL)
            self.state = 756
            self.match(Java8Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleStaticImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Java8Parser.IMPORT, 0)

        def STATIC(self):
            return self.getToken(Java8Parser.STATIC, 0)

        def typeName(self):
            return self.getTypedRuleContext(Java8Parser.TypeNameContext,0)


        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_singleStaticImportDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleStaticImportDeclaration" ):
                listener.enterSingleStaticImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleStaticImportDeclaration" ):
                listener.exitSingleStaticImportDeclaration(self)




    def singleStaticImportDeclaration(self):

        localctx = Java8Parser.SingleStaticImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_singleStaticImportDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(Java8Parser.IMPORT)
            self.state = 759
            self.match(Java8Parser.STATIC)
            self.state = 760
            self.typeName()
            self.state = 761
            self.match(Java8Parser.DOT)
            self.state = 762
            self.match(Java8Parser.Identifier)
            self.state = 763
            self.match(Java8Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticImportOnDemandDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(Java8Parser.IMPORT, 0)

        def STATIC(self):
            return self.getToken(Java8Parser.STATIC, 0)

        def typeName(self):
            return self.getTypedRuleContext(Java8Parser.TypeNameContext,0)


        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def MUL(self):
            return self.getToken(Java8Parser.MUL, 0)

        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_staticImportOnDemandDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticImportOnDemandDeclaration" ):
                listener.enterStaticImportOnDemandDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticImportOnDemandDeclaration" ):
                listener.exitStaticImportOnDemandDeclaration(self)




    def staticImportOnDemandDeclaration(self):

        localctx = Java8Parser.StaticImportOnDemandDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_staticImportOnDemandDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(Java8Parser.IMPORT)
            self.state = 766
            self.match(Java8Parser.STATIC)
            self.state = 767
            self.typeName()
            self.state = 768
            self.match(Java8Parser.DOT)
            self.state = 769
            self.match(Java8Parser.MUL)
            self.state = 770
            self.match(Java8Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.InterfaceDeclarationContext,0)


        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_typeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclaration" ):
                listener.enterTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclaration" ):
                listener.exitTypeDeclaration(self)




    def typeDeclaration(self):

        localctx = Java8Parser.TypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_typeDeclaration)
        try:
            self.state = 775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 772
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 773
                self.interfaceDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 774
                self.match(Java8Parser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def normalClassDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.NormalClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = Java8Parser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_classDeclaration)
        try:
            self.state = 779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 777
                self.normalClassDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 778
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Java8Parser.CLASS, 0)

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def classBody(self):
            return self.getTypedRuleContext(Java8Parser.ClassBodyContext,0)


        def classModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.ClassModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.ClassModifierContext,i)


        def typeParameters(self):
            return self.getTypedRuleContext(Java8Parser.TypeParametersContext,0)


        def superclass(self):
            return self.getTypedRuleContext(Java8Parser.SuperclassContext,0)


        def superinterfaces(self):
            return self.getTypedRuleContext(Java8Parser.SuperinterfacesContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_normalClassDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalClassDeclaration" ):
                listener.enterNormalClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalClassDeclaration" ):
                listener.exitNormalClassDeclaration(self)




    def normalClassDeclaration(self):

        localctx = Java8Parser.NormalClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_normalClassDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 884763525122) != 0) or _la==103:
                self.state = 781
                self.classModifier()
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 787
            self.match(Java8Parser.CLASS)
            self.state = 788
            self.match(Java8Parser.Identifier)
            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 789
                self.typeParameters()


            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 792
                self.superclass()


            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 795
                self.superinterfaces()


            self.state = 798
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java8Parser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(Java8Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(Java8Parser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(Java8Parser.PRIVATE, 0)

        def ABSTRACT(self):
            return self.getToken(Java8Parser.ABSTRACT, 0)

        def STATIC(self):
            return self.getToken(Java8Parser.STATIC, 0)

        def FINAL(self):
            return self.getToken(Java8Parser.FINAL, 0)

        def STRICTFP(self):
            return self.getToken(Java8Parser.STRICTFP, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_classModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModifier" ):
                listener.enterClassModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModifier" ):
                listener.exitClassModifier(self)




    def classModifier(self):

        localctx = Java8Parser.ClassModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_classModifier)
        try:
            self.state = 808
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 800
                self.annotation()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 801
                self.match(Java8Parser.PUBLIC)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 3)
                self.state = 802
                self.match(Java8Parser.PROTECTED)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 4)
                self.state = 803
                self.match(Java8Parser.PRIVATE)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 804
                self.match(Java8Parser.ABSTRACT)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 6)
                self.state = 805
                self.match(Java8Parser.STATIC)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 7)
                self.state = 806
                self.match(Java8Parser.FINAL)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 8)
                self.state = 807
                self.match(Java8Parser.STRICTFP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(Java8Parser.LT, 0)

        def typeParameterList(self):
            return self.getTypedRuleContext(Java8Parser.TypeParameterListContext,0)


        def GT(self):
            return self.getToken(Java8Parser.GT, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)




    def typeParameters(self):

        localctx = Java8Parser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_typeParameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.match(Java8Parser.LT)
            self.state = 811
            self.typeParameterList()
            self.state = 812
            self.match(Java8Parser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(Java8Parser.TypeParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.COMMA)
            else:
                return self.getToken(Java8Parser.COMMA, i)

        def getRuleIndex(self):
            return Java8Parser.RULE_typeParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterList" ):
                listener.enterTypeParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterList" ):
                listener.exitTypeParameterList(self)




    def typeParameterList(self):

        localctx = Java8Parser.TypeParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_typeParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.typeParameter()
            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==64:
                self.state = 815
                self.match(Java8Parser.COMMA)
                self.state = 816
                self.typeParameter()
                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperclassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENDS(self):
            return self.getToken(Java8Parser.EXTENDS, 0)

        def classType(self):
            return self.getTypedRuleContext(Java8Parser.ClassTypeContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_superclass

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperclass" ):
                listener.enterSuperclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperclass" ):
                listener.exitSuperclass(self)




    def superclass(self):

        localctx = Java8Parser.SuperclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_superclass)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(Java8Parser.EXTENDS)
            self.state = 823
            self.classType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperinterfacesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPLEMENTS(self):
            return self.getToken(Java8Parser.IMPLEMENTS, 0)

        def interfaceTypeList(self):
            return self.getTypedRuleContext(Java8Parser.InterfaceTypeListContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_superinterfaces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperinterfaces" ):
                listener.enterSuperinterfaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperinterfaces" ):
                listener.exitSuperinterfaces(self)




    def superinterfaces(self):

        localctx = Java8Parser.SuperinterfacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_superinterfaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(Java8Parser.IMPLEMENTS)
            self.state = 826
            self.interfaceTypeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def interfaceType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.InterfaceTypeContext)
            else:
                return self.getTypedRuleContext(Java8Parser.InterfaceTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.COMMA)
            else:
                return self.getToken(Java8Parser.COMMA, i)

        def getRuleIndex(self):
            return Java8Parser.RULE_interfaceTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceTypeList" ):
                listener.enterInterfaceTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceTypeList" ):
                listener.exitInterfaceTypeList(self)




    def interfaceTypeList(self):

        localctx = Java8Parser.InterfaceTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_interfaceTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.interfaceType()
            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==64:
                self.state = 829
                self.match(Java8Parser.COMMA)
                self.state = 830
                self.interfaceType()
                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(Java8Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(Java8Parser.RBRACE, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)




    def classBody(self):

        localctx = Java8Parser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.match(Java8Parser.LBRACE)
            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8645991068613655766) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 51539607553) != 0):
                self.state = 837
                self.classBodyDeclaration()
                self.state = 842
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 843
            self.match(Java8Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classMemberDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.ClassMemberDeclarationContext,0)


        def instanceInitializer(self):
            return self.getTypedRuleContext(Java8Parser.InstanceInitializerContext,0)


        def staticInitializer(self):
            return self.getTypedRuleContext(Java8Parser.StaticInitializerContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.ConstructorDeclarationContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_classBodyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBodyDeclaration" ):
                listener.enterClassBodyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBodyDeclaration" ):
                listener.exitClassBodyDeclaration(self)




    def classBodyDeclaration(self):

        localctx = Java8Parser.ClassBodyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_classBodyDeclaration)
        try:
            self.state = 849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 845
                self.classMemberDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 846
                self.instanceInitializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 847
                self.staticInitializer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 848
                self.constructorDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.FieldDeclarationContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.MethodDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.InterfaceDeclarationContext,0)


        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_classMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMemberDeclaration" ):
                listener.enterClassMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMemberDeclaration" ):
                listener.exitClassMemberDeclaration(self)




    def classMemberDeclaration(self):

        localctx = Java8Parser.ClassMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_classMemberDeclaration)
        try:
            self.state = 856
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 851
                self.fieldDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 852
                self.methodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 853
                self.classDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 854
                self.interfaceDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 855
                self.match(Java8Parser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java8Parser.UnannTypeContext,0)


        def variableDeclaratorList(self):
            return self.getTypedRuleContext(Java8Parser.VariableDeclaratorListContext,0)


        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def fieldModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.FieldModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.FieldModifierContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_fieldDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaration" ):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaration" ):
                listener.exitFieldDeclaration(self)




    def fieldDeclaration(self):

        localctx = Java8Parser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_fieldDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 633653705310208) != 0) or _la==103:
                self.state = 858
                self.fieldModifier()
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 864
            self.unannType()
            self.state = 865
            self.variableDeclaratorList()
            self.state = 866
            self.match(Java8Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java8Parser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(Java8Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(Java8Parser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(Java8Parser.PRIVATE, 0)

        def STATIC(self):
            return self.getToken(Java8Parser.STATIC, 0)

        def FINAL(self):
            return self.getToken(Java8Parser.FINAL, 0)

        def TRANSIENT(self):
            return self.getToken(Java8Parser.TRANSIENT, 0)

        def VOLATILE(self):
            return self.getToken(Java8Parser.VOLATILE, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_fieldModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldModifier" ):
                listener.enterFieldModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldModifier" ):
                listener.exitFieldModifier(self)




    def fieldModifier(self):

        localctx = Java8Parser.FieldModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_fieldModifier)
        try:
            self.state = 876
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 868
                self.annotation()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 869
                self.match(Java8Parser.PUBLIC)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 3)
                self.state = 870
                self.match(Java8Parser.PROTECTED)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 4)
                self.state = 871
                self.match(Java8Parser.PRIVATE)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 5)
                self.state = 872
                self.match(Java8Parser.STATIC)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 6)
                self.state = 873
                self.match(Java8Parser.FINAL)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 7)
                self.state = 874
                self.match(Java8Parser.TRANSIENT)
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 8)
                self.state = 875
                self.match(Java8Parser.VOLATILE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(Java8Parser.VariableDeclaratorContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.COMMA)
            else:
                return self.getToken(Java8Parser.COMMA, i)

        def getRuleIndex(self):
            return Java8Parser.RULE_variableDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaratorList" ):
                listener.enterVariableDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaratorList" ):
                listener.exitVariableDeclaratorList(self)




    def variableDeclaratorList(self):

        localctx = Java8Parser.VariableDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_variableDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.variableDeclarator()
            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==64:
                self.state = 879
                self.match(Java8Parser.COMMA)
                self.state = 880
                self.variableDeclarator()
                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(Java8Parser.VariableDeclaratorIdContext,0)


        def ASSIGN(self):
            return self.getToken(Java8Parser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(Java8Parser.VariableInitializerContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_variableDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarator" ):
                listener.enterVariableDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarator" ):
                listener.exitVariableDeclarator(self)




    def variableDeclarator(self):

        localctx = Java8Parser.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_variableDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.variableDeclaratorId()
            self.state = 889
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 887
                self.match(Java8Parser.ASSIGN)
                self.state = 888
                self.variableInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def dims(self):
            return self.getTypedRuleContext(Java8Parser.DimsContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_variableDeclaratorId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaratorId" ):
                listener.enterVariableDeclaratorId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaratorId" ):
                listener.exitVariableDeclaratorId(self)




    def variableDeclaratorId(self):

        localctx = Java8Parser.VariableDeclaratorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_variableDeclaratorId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(Java8Parser.Identifier)
            self.state = 893
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61 or _la==103:
                self.state = 892
                self.dims()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def arrayInitializer(self):
            return self.getTypedRuleContext(Java8Parser.ArrayInitializerContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_variableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer" ):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer" ):
                listener.exitVariableInitializer(self)




    def variableInitializer(self):

        localctx = Java8Parser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_variableInitializer)
        try:
            self.state = 897
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 8, 14, 20, 27, 29, 31, 37, 40, 43, 48, 51, 52, 53, 54, 55, 56, 57, 69, 70, 79, 80, 81, 82, 102, 103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 895
                self.expression()
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 896
                self.arrayInitializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannPrimitiveType(self):
            return self.getTypedRuleContext(Java8Parser.UnannPrimitiveTypeContext,0)


        def unannReferenceType(self):
            return self.getTypedRuleContext(Java8Parser.UnannReferenceTypeContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_unannType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannType" ):
                listener.enterUnannType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannType" ):
                listener.exitUnannType(self)




    def unannType(self):

        localctx = Java8Parser.UnannTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_unannType)
        try:
            self.state = 901
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 899
                self.unannPrimitiveType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 900
                self.unannReferenceType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannPrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def numericType(self):
            return self.getTypedRuleContext(Java8Parser.NumericTypeContext,0)


        def BOOLEAN(self):
            return self.getToken(Java8Parser.BOOLEAN, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_unannPrimitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannPrimitiveType" ):
                listener.enterUnannPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannPrimitiveType" ):
                listener.exitUnannPrimitiveType(self)




    def unannPrimitiveType(self):

        localctx = Java8Parser.UnannPrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_unannPrimitiveType)
        try:
            self.state = 905
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 8, 14, 20, 27, 29, 37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 903
                self.numericType()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 904
                self.match(Java8Parser.BOOLEAN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannReferenceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannClassOrInterfaceType(self):
            return self.getTypedRuleContext(Java8Parser.UnannClassOrInterfaceTypeContext,0)


        def unannTypeVariable(self):
            return self.getTypedRuleContext(Java8Parser.UnannTypeVariableContext,0)


        def unannArrayType(self):
            return self.getTypedRuleContext(Java8Parser.UnannArrayTypeContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_unannReferenceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannReferenceType" ):
                listener.enterUnannReferenceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannReferenceType" ):
                listener.exitUnannReferenceType(self)




    def unannReferenceType(self):

        localctx = Java8Parser.UnannReferenceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_unannReferenceType)
        try:
            self.state = 910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 907
                self.unannClassOrInterfaceType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 908
                self.unannTypeVariable()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 909
                self.unannArrayType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannClassType_lfno_unannClassOrInterfaceType(self):
            return self.getTypedRuleContext(Java8Parser.UnannClassType_lfno_unannClassOrInterfaceTypeContext,0)


        def unannInterfaceType_lfno_unannClassOrInterfaceType(self):
            return self.getTypedRuleContext(Java8Parser.UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext,0)


        def unannClassType_lf_unannClassOrInterfaceType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.UnannClassType_lf_unannClassOrInterfaceTypeContext)
            else:
                return self.getTypedRuleContext(Java8Parser.UnannClassType_lf_unannClassOrInterfaceTypeContext,i)


        def unannInterfaceType_lf_unannClassOrInterfaceType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.UnannInterfaceType_lf_unannClassOrInterfaceTypeContext)
            else:
                return self.getTypedRuleContext(Java8Parser.UnannInterfaceType_lf_unannClassOrInterfaceTypeContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_unannClassOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannClassOrInterfaceType" ):
                listener.enterUnannClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannClassOrInterfaceType" ):
                listener.exitUnannClassOrInterfaceType(self)




    def unannClassOrInterfaceType(self):

        localctx = Java8Parser.UnannClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_unannClassOrInterfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 912
                self.unannClassType_lfno_unannClassOrInterfaceType()
                pass

            elif la_ == 2:
                self.state = 913
                self.unannInterfaceType_lfno_unannClassOrInterfaceType()
                pass


            self.state = 920
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 918
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                    if la_ == 1:
                        self.state = 916
                        self.unannClassType_lf_unannClassOrInterfaceType()
                        pass

                    elif la_ == 2:
                        self.state = 917
                        self.unannInterfaceType_lf_unannClassOrInterfaceType()
                        pass

             
                self.state = 922
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannClassTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsContext,0)


        def unannClassOrInterfaceType(self):
            return self.getTypedRuleContext(Java8Parser.UnannClassOrInterfaceTypeContext,0)


        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AnnotationContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_unannClassType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannClassType" ):
                listener.enterUnannClassType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannClassType" ):
                listener.exitUnannClassType(self)




    def unannClassType(self):

        localctx = Java8Parser.UnannClassTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_unannClassType)
        self._la = 0 # Token type
        try:
            self.state = 939
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 923
                self.match(Java8Parser.Identifier)
                self.state = 925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 924
                    self.typeArguments()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 927
                self.unannClassOrInterfaceType()
                self.state = 928
                self.match(Java8Parser.DOT)
                self.state = 932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==103:
                    self.state = 929
                    self.annotation()
                    self.state = 934
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 935
                self.match(Java8Parser.Identifier)
                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 936
                    self.typeArguments()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannClassType_lf_unannClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AnnotationContext,i)


        def typeArguments(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_unannClassType_lf_unannClassOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannClassType_lf_unannClassOrInterfaceType" ):
                listener.enterUnannClassType_lf_unannClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannClassType_lf_unannClassOrInterfaceType" ):
                listener.exitUnannClassType_lf_unannClassOrInterfaceType(self)




    def unannClassType_lf_unannClassOrInterfaceType(self):

        localctx = Java8Parser.UnannClassType_lf_unannClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_unannClassType_lf_unannClassOrInterfaceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            self.match(Java8Parser.DOT)
            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==103:
                self.state = 942
                self.annotation()
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 948
            self.match(Java8Parser.Identifier)
            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 949
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannClassType_lfno_unannClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_unannClassType_lfno_unannClassOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannClassType_lfno_unannClassOrInterfaceType" ):
                listener.enterUnannClassType_lfno_unannClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannClassType_lfno_unannClassOrInterfaceType" ):
                listener.exitUnannClassType_lfno_unannClassOrInterfaceType(self)




    def unannClassType_lfno_unannClassOrInterfaceType(self):

        localctx = Java8Parser.UnannClassType_lfno_unannClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_unannClassType_lfno_unannClassOrInterfaceType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.match(Java8Parser.Identifier)
            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 953
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannClassType(self):
            return self.getTypedRuleContext(Java8Parser.UnannClassTypeContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_unannInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannInterfaceType" ):
                listener.enterUnannInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannInterfaceType" ):
                listener.exitUnannInterfaceType(self)




    def unannInterfaceType(self):

        localctx = Java8Parser.UnannInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_unannInterfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.unannClassType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannClassType_lf_unannClassOrInterfaceType(self):
            return self.getTypedRuleContext(Java8Parser.UnannClassType_lf_unannClassOrInterfaceTypeContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_unannInterfaceType_lf_unannClassOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannInterfaceType_lf_unannClassOrInterfaceType" ):
                listener.enterUnannInterfaceType_lf_unannClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannInterfaceType_lf_unannClassOrInterfaceType" ):
                listener.exitUnannInterfaceType_lf_unannClassOrInterfaceType(self)




    def unannInterfaceType_lf_unannClassOrInterfaceType(self):

        localctx = Java8Parser.UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_unannInterfaceType_lf_unannClassOrInterfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.unannClassType_lf_unannClassOrInterfaceType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannClassType_lfno_unannClassOrInterfaceType(self):
            return self.getTypedRuleContext(Java8Parser.UnannClassType_lfno_unannClassOrInterfaceTypeContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_unannInterfaceType_lfno_unannClassOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannInterfaceType_lfno_unannClassOrInterfaceType" ):
                listener.enterUnannInterfaceType_lfno_unannClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannInterfaceType_lfno_unannClassOrInterfaceType" ):
                listener.exitUnannInterfaceType_lfno_unannClassOrInterfaceType(self)




    def unannInterfaceType_lfno_unannClassOrInterfaceType(self):

        localctx = Java8Parser.UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_unannInterfaceType_lfno_unannClassOrInterfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.unannClassType_lfno_unannClassOrInterfaceType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannTypeVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_unannTypeVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannTypeVariable" ):
                listener.enterUnannTypeVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannTypeVariable" ):
                listener.exitUnannTypeVariable(self)




    def unannTypeVariable(self):

        localctx = Java8Parser.UnannTypeVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_unannTypeVariable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.match(Java8Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnannArrayTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannPrimitiveType(self):
            return self.getTypedRuleContext(Java8Parser.UnannPrimitiveTypeContext,0)


        def dims(self):
            return self.getTypedRuleContext(Java8Parser.DimsContext,0)


        def unannClassOrInterfaceType(self):
            return self.getTypedRuleContext(Java8Parser.UnannClassOrInterfaceTypeContext,0)


        def unannTypeVariable(self):
            return self.getTypedRuleContext(Java8Parser.UnannTypeVariableContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_unannArrayType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnannArrayType" ):
                listener.enterUnannArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnannArrayType" ):
                listener.exitUnannArrayType(self)




    def unannArrayType(self):

        localctx = Java8Parser.UnannArrayTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_unannArrayType)
        try:
            self.state = 973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 964
                self.unannPrimitiveType()
                self.state = 965
                self.dims()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 967
                self.unannClassOrInterfaceType()
                self.state = 968
                self.dims()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 970
                self.unannTypeVariable()
                self.state = 971
                self.dims()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodHeader(self):
            return self.getTypedRuleContext(Java8Parser.MethodHeaderContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(Java8Parser.MethodBodyContext,0)


        def methodModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.MethodModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.MethodModifierContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_methodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclaration" ):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclaration" ):
                listener.exitMethodDeclaration(self)




    def methodDeclaration(self):

        localctx = Java8Parser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_methodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 5283883778050) != 0) or _la==103:
                self.state = 975
                self.methodModifier()
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 981
            self.methodHeader()
            self.state = 982
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java8Parser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(Java8Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(Java8Parser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(Java8Parser.PRIVATE, 0)

        def ABSTRACT(self):
            return self.getToken(Java8Parser.ABSTRACT, 0)

        def STATIC(self):
            return self.getToken(Java8Parser.STATIC, 0)

        def FINAL(self):
            return self.getToken(Java8Parser.FINAL, 0)

        def SYNCHRONIZED(self):
            return self.getToken(Java8Parser.SYNCHRONIZED, 0)

        def NATIVE(self):
            return self.getToken(Java8Parser.NATIVE, 0)

        def STRICTFP(self):
            return self.getToken(Java8Parser.STRICTFP, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_methodModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodModifier" ):
                listener.enterMethodModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodModifier" ):
                listener.exitMethodModifier(self)




    def methodModifier(self):

        localctx = Java8Parser.MethodModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_methodModifier)
        try:
            self.state = 994
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 984
                self.annotation()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 985
                self.match(Java8Parser.PUBLIC)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 3)
                self.state = 986
                self.match(Java8Parser.PROTECTED)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 4)
                self.state = 987
                self.match(Java8Parser.PRIVATE)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 988
                self.match(Java8Parser.ABSTRACT)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 6)
                self.state = 989
                self.match(Java8Parser.STATIC)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 7)
                self.state = 990
                self.match(Java8Parser.FINAL)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 8)
                self.state = 991
                self.match(Java8Parser.SYNCHRONIZED)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 9)
                self.state = 992
                self.match(Java8Parser.NATIVE)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 10)
                self.state = 993
                self.match(Java8Parser.STRICTFP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def result(self):
            return self.getTypedRuleContext(Java8Parser.ResultContext,0)


        def methodDeclarator(self):
            return self.getTypedRuleContext(Java8Parser.MethodDeclaratorContext,0)


        def throws_(self):
            return self.getTypedRuleContext(Java8Parser.Throws_Context,0)


        def typeParameters(self):
            return self.getTypedRuleContext(Java8Parser.TypeParametersContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AnnotationContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_methodHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodHeader" ):
                listener.enterMethodHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodHeader" ):
                listener.exitMethodHeader(self)




    def methodHeader(self):

        localctx = Java8Parser.MethodHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_methodHeader)
        self._la = 0 # Token type
        try:
            self.state = 1013
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 8, 14, 20, 27, 29, 37, 48, 102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 996
                self.result()
                self.state = 997
                self.methodDeclarator()
                self.state = 999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==45:
                    self.state = 998
                    self.throws_()


                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1001
                self.typeParameters()
                self.state = 1005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==103:
                    self.state = 1002
                    self.annotation()
                    self.state = 1007
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1008
                self.result()
                self.state = 1009
                self.methodDeclarator()
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==45:
                    self.state = 1010
                    self.throws_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java8Parser.UnannTypeContext,0)


        def VOID(self):
            return self.getToken(Java8Parser.VOID, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_result

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult" ):
                listener.enterResult(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult" ):
                listener.exitResult(self)




    def result(self):

        localctx = Java8Parser.ResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_result)
        try:
            self.state = 1017
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 8, 14, 20, 27, 29, 37, 102]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1015
                self.unannType()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1016
                self.match(Java8Parser.VOID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(Java8Parser.FormalParameterListContext,0)


        def dims(self):
            return self.getTypedRuleContext(Java8Parser.DimsContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_methodDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclarator" ):
                listener.enterMethodDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclarator" ):
                listener.exitMethodDeclarator(self)




    def methodDeclarator(self):

        localctx = Java8Parser.MethodDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_methodDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self.match(Java8Parser.Identifier)
            self.state = 1020
            self.match(Java8Parser.LPAREN)
            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 138111369512) != 0) or _la==102 or _la==103:
                self.state = 1021
                self.formalParameterList()


            self.state = 1024
            self.match(Java8Parser.RPAREN)
            self.state = 1026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61 or _la==103:
                self.state = 1025
                self.dims()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def receiverParameter(self):
            return self.getTypedRuleContext(Java8Parser.ReceiverParameterContext,0)


        def formalParameters(self):
            return self.getTypedRuleContext(Java8Parser.FormalParametersContext,0)


        def COMMA(self):
            return self.getToken(Java8Parser.COMMA, 0)

        def lastFormalParameter(self):
            return self.getTypedRuleContext(Java8Parser.LastFormalParameterContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)




    def formalParameterList(self):

        localctx = Java8Parser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_formalParameterList)
        try:
            self.state = 1034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1028
                self.receiverParameter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1029
                self.formalParameters()
                self.state = 1030
                self.match(Java8Parser.COMMA)
                self.state = 1031
                self.lastFormalParameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1033
                self.lastFormalParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(Java8Parser.FormalParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.COMMA)
            else:
                return self.getToken(Java8Parser.COMMA, i)

        def receiverParameter(self):
            return self.getTypedRuleContext(Java8Parser.ReceiverParameterContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_formalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameters" ):
                listener.enterFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameters" ):
                listener.exitFormalParameters(self)




    def formalParameters(self):

        localctx = Java8Parser.FormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_formalParameters)
        try:
            self.state = 1052
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1036
                self.formalParameter()
                self.state = 1041
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1037
                        self.match(Java8Parser.COMMA)
                        self.state = 1038
                        self.formalParameter() 
                    self.state = 1043
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1044
                self.receiverParameter()
                self.state = 1049
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1045
                        self.match(Java8Parser.COMMA)
                        self.state = 1046
                        self.formalParameter() 
                    self.state = 1051
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java8Parser.UnannTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(Java8Parser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.VariableModifierContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)




    def formalParameter(self):

        localctx = Java8Parser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_formalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==18 or _la==103:
                self.state = 1054
                self.variableModifier()
                self.state = 1059
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1060
            self.unannType()
            self.state = 1061
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java8Parser.AnnotationContext,0)


        def FINAL(self):
            return self.getToken(Java8Parser.FINAL, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_variableModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableModifier" ):
                listener.enterVariableModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableModifier" ):
                listener.exitVariableModifier(self)




    def variableModifier(self):

        localctx = Java8Parser.VariableModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_variableModifier)
        try:
            self.state = 1065
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1063
                self.annotation()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1064
                self.match(Java8Parser.FINAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastFormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java8Parser.UnannTypeContext,0)


        def ELLIPSIS(self):
            return self.getToken(Java8Parser.ELLIPSIS, 0)

        def variableDeclaratorId(self):
            return self.getTypedRuleContext(Java8Parser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.VariableModifierContext,i)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AnnotationContext,i)


        def formalParameter(self):
            return self.getTypedRuleContext(Java8Parser.FormalParameterContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_lastFormalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastFormalParameter" ):
                listener.enterLastFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastFormalParameter" ):
                listener.exitLastFormalParameter(self)




    def lastFormalParameter(self):

        localctx = Java8Parser.LastFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_lastFormalParameter)
        self._la = 0 # Token type
        try:
            self.state = 1084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==18 or _la==103:
                    self.state = 1067
                    self.variableModifier()
                    self.state = 1072
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1073
                self.unannType()
                self.state = 1077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==103:
                    self.state = 1074
                    self.annotation()
                    self.state = 1079
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1080
                self.match(Java8Parser.ELLIPSIS)
                self.state = 1081
                self.variableDeclaratorId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1083
                self.formalParameter()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiverParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java8Parser.UnannTypeContext,0)


        def THIS(self):
            return self.getToken(Java8Parser.THIS, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AnnotationContext,i)


        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_receiverParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiverParameter" ):
                listener.enterReceiverParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiverParameter" ):
                listener.exitReceiverParameter(self)




    def receiverParameter(self):

        localctx = Java8Parser.ReceiverParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_receiverParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==103:
                self.state = 1086
                self.annotation()
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1092
            self.unannType()
            self.state = 1095
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 1093
                self.match(Java8Parser.Identifier)
                self.state = 1094
                self.match(Java8Parser.DOT)


            self.state = 1097
            self.match(Java8Parser.THIS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Throws_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROWS(self):
            return self.getToken(Java8Parser.THROWS, 0)

        def exceptionTypeList(self):
            return self.getTypedRuleContext(Java8Parser.ExceptionTypeListContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_throws_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrows_" ):
                listener.enterThrows_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrows_" ):
                listener.exitThrows_(self)




    def throws_(self):

        localctx = Java8Parser.Throws_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_throws_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            self.match(Java8Parser.THROWS)
            self.state = 1100
            self.exceptionTypeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptionTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exceptionType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.ExceptionTypeContext)
            else:
                return self.getTypedRuleContext(Java8Parser.ExceptionTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.COMMA)
            else:
                return self.getToken(Java8Parser.COMMA, i)

        def getRuleIndex(self):
            return Java8Parser.RULE_exceptionTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionTypeList" ):
                listener.enterExceptionTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionTypeList" ):
                listener.exitExceptionTypeList(self)




    def exceptionTypeList(self):

        localctx = Java8Parser.ExceptionTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_exceptionTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.exceptionType()
            self.state = 1107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==64:
                self.state = 1103
                self.match(Java8Parser.COMMA)
                self.state = 1104
                self.exceptionType()
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classType(self):
            return self.getTypedRuleContext(Java8Parser.ClassTypeContext,0)


        def typeVariable(self):
            return self.getTypedRuleContext(Java8Parser.TypeVariableContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_exceptionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionType" ):
                listener.enterExceptionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionType" ):
                listener.exitExceptionType(self)




    def exceptionType(self):

        localctx = Java8Parser.ExceptionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_exceptionType)
        try:
            self.state = 1112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1110
                self.classType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1111
                self.typeVariable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(Java8Parser.BlockContext,0)


        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_methodBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodBody" ):
                listener.enterMethodBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodBody" ):
                listener.exitMethodBody(self)




    def methodBody(self):

        localctx = Java8Parser.MethodBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_methodBody)
        try:
            self.state = 1116
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1114
                self.block()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1115
                self.match(Java8Parser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(Java8Parser.BlockContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_instanceInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceInitializer" ):
                listener.enterInstanceInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceInitializer" ):
                listener.exitInstanceInitializer(self)




    def instanceInitializer(self):

        localctx = Java8Parser.InstanceInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_instanceInitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STATIC(self):
            return self.getToken(Java8Parser.STATIC, 0)

        def block(self):
            return self.getTypedRuleContext(Java8Parser.BlockContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_staticInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticInitializer" ):
                listener.enterStaticInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticInitializer" ):
                listener.exitStaticInitializer(self)




    def staticInitializer(self):

        localctx = Java8Parser.StaticInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_staticInitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.match(Java8Parser.STATIC)
            self.state = 1121
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorDeclarator(self):
            return self.getTypedRuleContext(Java8Parser.ConstructorDeclaratorContext,0)


        def constructorBody(self):
            return self.getTypedRuleContext(Java8Parser.ConstructorBodyContext,0)


        def constructorModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.ConstructorModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.ConstructorModifierContext,i)


        def throws_(self):
            return self.getTypedRuleContext(Java8Parser.Throws_Context,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_constructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDeclaration" ):
                listener.enterConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDeclaration" ):
                listener.exitConstructorDeclaration(self)




    def constructorDeclaration(self):

        localctx = Java8Parser.ConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_constructorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 60129542144) != 0) or _la==103:
                self.state = 1123
                self.constructorModifier()
                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1129
            self.constructorDeclarator()
            self.state = 1131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 1130
                self.throws_()


            self.state = 1133
            self.constructorBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java8Parser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(Java8Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(Java8Parser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(Java8Parser.PRIVATE, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_constructorModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorModifier" ):
                listener.enterConstructorModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorModifier" ):
                listener.exitConstructorModifier(self)




    def constructorModifier(self):

        localctx = Java8Parser.ConstructorModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_constructorModifier)
        try:
            self.state = 1139
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1135
                self.annotation()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1136
                self.match(Java8Parser.PUBLIC)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1137
                self.match(Java8Parser.PROTECTED)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1138
                self.match(Java8Parser.PRIVATE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleTypeName(self):
            return self.getTypedRuleContext(Java8Parser.SimpleTypeNameContext,0)


        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(Java8Parser.TypeParametersContext,0)


        def formalParameterList(self):
            return self.getTypedRuleContext(Java8Parser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_constructorDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDeclarator" ):
                listener.enterConstructorDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDeclarator" ):
                listener.exitConstructorDeclarator(self)




    def constructorDeclarator(self):

        localctx = Java8Parser.ConstructorDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_constructorDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 1141
                self.typeParameters()


            self.state = 1144
            self.simpleTypeName()
            self.state = 1145
            self.match(Java8Parser.LPAREN)
            self.state = 1147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 138111369512) != 0) or _la==102 or _la==103:
                self.state = 1146
                self.formalParameterList()


            self.state = 1149
            self.match(Java8Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_simpleTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleTypeName" ):
                listener.enterSimpleTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleTypeName" ):
                listener.exitSimpleTypeName(self)




    def simpleTypeName(self):

        localctx = Java8Parser.SimpleTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_simpleTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.match(Java8Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(Java8Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(Java8Parser.RBRACE, 0)

        def explicitConstructorInvocation(self):
            return self.getTypedRuleContext(Java8Parser.ExplicitConstructorInvocationContext,0)


        def blockStatements(self):
            return self.getTypedRuleContext(Java8Parser.BlockStatementsContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_constructorBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorBody" ):
                listener.enterConstructorBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorBody" ):
                listener.exitConstructorBody(self)




    def constructorBody(self):

        localctx = Java8Parser.ConstructorBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_constructorBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.match(Java8Parser.LBRACE)
            self.state = 1155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.state = 1154
                self.explicitConstructorInvocation()


            self.state = 1158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8359349417232995522) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 25165827) != 0):
                self.state = 1157
                self.blockStatements()


            self.state = 1160
            self.match(Java8Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitConstructorInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(Java8Parser.THIS, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsContext,0)


        def argumentList(self):
            return self.getTypedRuleContext(Java8Parser.ArgumentListContext,0)


        def SUPER(self):
            return self.getToken(Java8Parser.SUPER, 0)

        def expressionName(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionNameContext,0)


        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def primary(self):
            return self.getTypedRuleContext(Java8Parser.PrimaryContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_explicitConstructorInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitConstructorInvocation" ):
                listener.enterExplicitConstructorInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitConstructorInvocation" ):
                listener.exitExplicitConstructorInvocation(self)




    def explicitConstructorInvocation(self):

        localctx = Java8Parser.ExplicitConstructorInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_explicitConstructorInvocation)
        self._la = 0 # Token type
        try:
            self.state = 1208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 1162
                    self.typeArguments()


                self.state = 1165
                self.match(Java8Parser.THIS)
                self.state = 1166
                self.match(Java8Parser.LPAREN)
                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 1167
                    self.argumentList()


                self.state = 1170
                self.match(Java8Parser.RPAREN)
                self.state = 1171
                self.match(Java8Parser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 1172
                    self.typeArguments()


                self.state = 1175
                self.match(Java8Parser.SUPER)
                self.state = 1176
                self.match(Java8Parser.LPAREN)
                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 1177
                    self.argumentList()


                self.state = 1180
                self.match(Java8Parser.RPAREN)
                self.state = 1181
                self.match(Java8Parser.SEMI)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1182
                self.expressionName()
                self.state = 1183
                self.match(Java8Parser.DOT)
                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 1184
                    self.typeArguments()


                self.state = 1187
                self.match(Java8Parser.SUPER)
                self.state = 1188
                self.match(Java8Parser.LPAREN)
                self.state = 1190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 1189
                    self.argumentList()


                self.state = 1192
                self.match(Java8Parser.RPAREN)
                self.state = 1193
                self.match(Java8Parser.SEMI)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1195
                self.primary()
                self.state = 1196
                self.match(Java8Parser.DOT)
                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 1197
                    self.typeArguments()


                self.state = 1200
                self.match(Java8Parser.SUPER)
                self.state = 1201
                self.match(Java8Parser.LPAREN)
                self.state = 1203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 1202
                    self.argumentList()


                self.state = 1205
                self.match(Java8Parser.RPAREN)
                self.state = 1206
                self.match(Java8Parser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(Java8Parser.ENUM, 0)

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def enumBody(self):
            return self.getTypedRuleContext(Java8Parser.EnumBodyContext,0)


        def classModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.ClassModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.ClassModifierContext,i)


        def superinterfaces(self):
            return self.getTypedRuleContext(Java8Parser.SuperinterfacesContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)




    def enumDeclaration(self):

        localctx = Java8Parser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 884763525122) != 0) or _la==103:
                self.state = 1210
                self.classModifier()
                self.state = 1215
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1216
            self.match(Java8Parser.ENUM)
            self.state = 1217
            self.match(Java8Parser.Identifier)
            self.state = 1219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 1218
                self.superinterfaces()


            self.state = 1221
            self.enumBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(Java8Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(Java8Parser.RBRACE, 0)

        def enumConstantList(self):
            return self.getTypedRuleContext(Java8Parser.EnumConstantListContext,0)


        def COMMA(self):
            return self.getToken(Java8Parser.COMMA, 0)

        def enumBodyDeclarations(self):
            return self.getTypedRuleContext(Java8Parser.EnumBodyDeclarationsContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_enumBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumBody" ):
                listener.enterEnumBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumBody" ):
                listener.exitEnumBody(self)




    def enumBody(self):

        localctx = Java8Parser.EnumBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_enumBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.match(Java8Parser.LBRACE)
            self.state = 1225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102 or _la==103:
                self.state = 1224
                self.enumConstantList()


            self.state = 1228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 1227
                self.match(Java8Parser.COMMA)


            self.state = 1231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1230
                self.enumBodyDeclarations()


            self.state = 1233
            self.match(Java8Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.EnumConstantContext)
            else:
                return self.getTypedRuleContext(Java8Parser.EnumConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.COMMA)
            else:
                return self.getToken(Java8Parser.COMMA, i)

        def getRuleIndex(self):
            return Java8Parser.RULE_enumConstantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstantList" ):
                listener.enterEnumConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstantList" ):
                listener.exitEnumConstantList(self)




    def enumConstantList(self):

        localctx = Java8Parser.EnumConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_enumConstantList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self.enumConstant()
            self.state = 1240
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1236
                    self.match(Java8Parser.COMMA)
                    self.state = 1237
                    self.enumConstant() 
                self.state = 1242
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def enumConstantModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.EnumConstantModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.EnumConstantModifierContext,i)


        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def classBody(self):
            return self.getTypedRuleContext(Java8Parser.ClassBodyContext,0)


        def argumentList(self):
            return self.getTypedRuleContext(Java8Parser.ArgumentListContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_enumConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstant" ):
                listener.enterEnumConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstant" ):
                listener.exitEnumConstant(self)




    def enumConstant(self):

        localctx = Java8Parser.EnumConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_enumConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==103:
                self.state = 1243
                self.enumConstantModifier()
                self.state = 1248
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1249
            self.match(Java8Parser.Identifier)
            self.state = 1255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 1250
                self.match(Java8Parser.LPAREN)
                self.state = 1252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 1251
                    self.argumentList()


                self.state = 1254
                self.match(Java8Parser.RPAREN)


            self.state = 1258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 1257
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java8Parser.AnnotationContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_enumConstantModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstantModifier" ):
                listener.enterEnumConstantModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstantModifier" ):
                listener.exitEnumConstantModifier(self)




    def enumConstantModifier(self):

        localctx = Java8Parser.EnumConstantModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_enumConstantModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.annotation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumBodyDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def classBodyDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.ClassBodyDeclarationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.ClassBodyDeclarationContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_enumBodyDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumBodyDeclarations" ):
                listener.enterEnumBodyDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumBodyDeclarations" ):
                listener.exitEnumBodyDeclarations(self)




    def enumBodyDeclarations(self):

        localctx = Java8Parser.EnumBodyDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_enumBodyDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            self.match(Java8Parser.SEMI)
            self.state = 1266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -8645991068613655766) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 51539607553) != 0):
                self.state = 1263
                self.classBodyDeclaration()
                self.state = 1268
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def normalInterfaceDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.NormalInterfaceDeclarationContext,0)


        def annotationTypeDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.AnnotationTypeDeclarationContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_interfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclaration" ):
                listener.enterInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclaration" ):
                listener.exitInterfaceDeclaration(self)




    def interfaceDeclaration(self):

        localctx = Java8Parser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_interfaceDeclaration)
        try:
            self.state = 1271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1269
                self.normalInterfaceDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1270
                self.annotationTypeDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalInterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(Java8Parser.INTERFACE, 0)

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def interfaceBody(self):
            return self.getTypedRuleContext(Java8Parser.InterfaceBodyContext,0)


        def interfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.InterfaceModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.InterfaceModifierContext,i)


        def typeParameters(self):
            return self.getTypedRuleContext(Java8Parser.TypeParametersContext,0)


        def extendsInterfaces(self):
            return self.getTypedRuleContext(Java8Parser.ExtendsInterfacesContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_normalInterfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalInterfaceDeclaration" ):
                listener.enterNormalInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalInterfaceDeclaration" ):
                listener.exitNormalInterfaceDeclaration(self)




    def normalInterfaceDeclaration(self):

        localctx = Java8Parser.NormalInterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_normalInterfaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 884763262978) != 0) or _la==103:
                self.state = 1273
                self.interfaceModifier()
                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1279
            self.match(Java8Parser.INTERFACE)
            self.state = 1280
            self.match(Java8Parser.Identifier)
            self.state = 1282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 1281
                self.typeParameters()


            self.state = 1285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 1284
                self.extendsInterfaces()


            self.state = 1287
            self.interfaceBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java8Parser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(Java8Parser.PUBLIC, 0)

        def PROTECTED(self):
            return self.getToken(Java8Parser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(Java8Parser.PRIVATE, 0)

        def ABSTRACT(self):
            return self.getToken(Java8Parser.ABSTRACT, 0)

        def STATIC(self):
            return self.getToken(Java8Parser.STATIC, 0)

        def STRICTFP(self):
            return self.getToken(Java8Parser.STRICTFP, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_interfaceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceModifier" ):
                listener.enterInterfaceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceModifier" ):
                listener.exitInterfaceModifier(self)




    def interfaceModifier(self):

        localctx = Java8Parser.InterfaceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_interfaceModifier)
        try:
            self.state = 1296
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1289
                self.annotation()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1290
                self.match(Java8Parser.PUBLIC)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1291
                self.match(Java8Parser.PROTECTED)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1292
                self.match(Java8Parser.PRIVATE)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1293
                self.match(Java8Parser.ABSTRACT)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1294
                self.match(Java8Parser.STATIC)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1295
                self.match(Java8Parser.STRICTFP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendsInterfacesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENDS(self):
            return self.getToken(Java8Parser.EXTENDS, 0)

        def interfaceTypeList(self):
            return self.getTypedRuleContext(Java8Parser.InterfaceTypeListContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_extendsInterfaces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendsInterfaces" ):
                listener.enterExtendsInterfaces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendsInterfaces" ):
                listener.exitExtendsInterfaces(self)




    def extendsInterfaces(self):

        localctx = Java8Parser.ExtendsInterfacesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_extendsInterfaces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.match(Java8Parser.EXTENDS)
            self.state = 1299
            self.interfaceTypeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(Java8Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(Java8Parser.RBRACE, 0)

        def interfaceMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.InterfaceMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.InterfaceMemberDeclarationContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_interfaceBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceBody" ):
                listener.enterInterfaceBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceBody" ):
                listener.exitInterfaceBody(self)




    def interfaceBody(self):

        localctx = Java8Parser.InterfaceBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_interfaceBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1301
            self.match(Java8Parser.LBRACE)
            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223089538734927062) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 51539607553) != 0):
                self.state = 1302
                self.interfaceMemberDeclaration()
                self.state = 1307
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1308
            self.match(Java8Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.ConstantDeclarationContext,0)


        def interfaceMethodDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.InterfaceMethodDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.InterfaceDeclarationContext,0)


        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_interfaceMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclaration" ):
                listener.enterInterfaceMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclaration" ):
                listener.exitInterfaceMemberDeclaration(self)




    def interfaceMemberDeclaration(self):

        localctx = Java8Parser.InterfaceMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_interfaceMemberDeclaration)
        try:
            self.state = 1315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1310
                self.constantDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1311
                self.interfaceMethodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1312
                self.classDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1313
                self.interfaceDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1314
                self.match(Java8Parser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java8Parser.UnannTypeContext,0)


        def variableDeclaratorList(self):
            return self.getTypedRuleContext(Java8Parser.VariableDeclaratorListContext,0)


        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def constantModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.ConstantModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.ConstantModifierContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_constantDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclaration" ):
                listener.enterConstantDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclaration" ):
                listener.exitConstantDeclaration(self)




    def constantDeclaration(self):

        localctx = Java8Parser.ConstantDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_constantDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 309237907456) != 0) or _la==103:
                self.state = 1317
                self.constantModifier()
                self.state = 1322
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1323
            self.unannType()
            self.state = 1324
            self.variableDeclaratorList()
            self.state = 1325
            self.match(Java8Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java8Parser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(Java8Parser.PUBLIC, 0)

        def STATIC(self):
            return self.getToken(Java8Parser.STATIC, 0)

        def FINAL(self):
            return self.getToken(Java8Parser.FINAL, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_constantModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantModifier" ):
                listener.enterConstantModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantModifier" ):
                listener.exitConstantModifier(self)




    def constantModifier(self):

        localctx = Java8Parser.ConstantModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_constantModifier)
        try:
            self.state = 1331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1327
                self.annotation()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1328
                self.match(Java8Parser.PUBLIC)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1329
                self.match(Java8Parser.STATIC)
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1330
                self.match(Java8Parser.FINAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodHeader(self):
            return self.getTypedRuleContext(Java8Parser.MethodHeaderContext,0)


        def methodBody(self):
            return self.getTypedRuleContext(Java8Parser.MethodBodyContext,0)


        def interfaceMethodModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.InterfaceMethodModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.InterfaceMethodModifierContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_interfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodDeclaration" ):
                listener.enterInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodDeclaration" ):
                listener.exitInterfaceMethodDeclaration(self)




    def interfaceMethodDeclaration(self):

        localctx = Java8Parser.InterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_interfaceMethodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 858993463298) != 0) or _la==103:
                self.state = 1333
                self.interfaceMethodModifier()
                self.state = 1338
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1339
            self.methodHeader()
            self.state = 1340
            self.methodBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java8Parser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(Java8Parser.PUBLIC, 0)

        def ABSTRACT(self):
            return self.getToken(Java8Parser.ABSTRACT, 0)

        def DEFAULT(self):
            return self.getToken(Java8Parser.DEFAULT, 0)

        def STATIC(self):
            return self.getToken(Java8Parser.STATIC, 0)

        def STRICTFP(self):
            return self.getToken(Java8Parser.STRICTFP, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_interfaceMethodModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodModifier" ):
                listener.enterInterfaceMethodModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodModifier" ):
                listener.exitInterfaceMethodModifier(self)




    def interfaceMethodModifier(self):

        localctx = Java8Parser.InterfaceMethodModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_interfaceMethodModifier)
        try:
            self.state = 1348
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1342
                self.annotation()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1343
                self.match(Java8Parser.PUBLIC)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1344
                self.match(Java8Parser.ABSTRACT)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1345
                self.match(Java8Parser.DEFAULT)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1346
                self.match(Java8Parser.STATIC)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1347
                self.match(Java8Parser.STRICTFP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Java8Parser.AT, 0)

        def INTERFACE(self):
            return self.getToken(Java8Parser.INTERFACE, 0)

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def annotationTypeBody(self):
            return self.getTypedRuleContext(Java8Parser.AnnotationTypeBodyContext,0)


        def interfaceModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.InterfaceModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.InterfaceModifierContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_annotationTypeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeDeclaration" ):
                listener.enterAnnotationTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeDeclaration" ):
                listener.exitAnnotationTypeDeclaration(self)




    def annotationTypeDeclaration(self):

        localctx = Java8Parser.AnnotationTypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_annotationTypeDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1353
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1350
                    self.interfaceModifier() 
                self.state = 1355
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

            self.state = 1356
            self.match(Java8Parser.AT)
            self.state = 1357
            self.match(Java8Parser.INTERFACE)
            self.state = 1358
            self.match(Java8Parser.Identifier)
            self.state = 1359
            self.annotationTypeBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(Java8Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(Java8Parser.RBRACE, 0)

        def annotationTypeMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AnnotationTypeMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AnnotationTypeMemberDeclarationContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_annotationTypeBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeBody" ):
                listener.enterAnnotationTypeBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeBody" ):
                listener.exitAnnotationTypeBody(self)




    def annotationTypeBody(self):

        localctx = Java8Parser.AnnotationTypeBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_annotationTypeBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self.match(Java8Parser.LBRACE)
            self.state = 1365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223371013711641814) != 0) or _la==102 or _la==103:
                self.state = 1362
                self.annotationTypeMemberDeclaration()
                self.state = 1367
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1368
            self.match(Java8Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationTypeElementDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.AnnotationTypeElementDeclarationContext,0)


        def constantDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.ConstantDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.InterfaceDeclarationContext,0)


        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_annotationTypeMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeMemberDeclaration" ):
                listener.enterAnnotationTypeMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeMemberDeclaration" ):
                listener.exitAnnotationTypeMemberDeclaration(self)




    def annotationTypeMemberDeclaration(self):

        localctx = Java8Parser.AnnotationTypeMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_annotationTypeMemberDeclaration)
        try:
            self.state = 1375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1370
                self.annotationTypeElementDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1371
                self.constantDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1372
                self.classDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1373
                self.interfaceDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1374
                self.match(Java8Parser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeElementDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java8Parser.UnannTypeContext,0)


        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def annotationTypeElementModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AnnotationTypeElementModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AnnotationTypeElementModifierContext,i)


        def dims(self):
            return self.getTypedRuleContext(Java8Parser.DimsContext,0)


        def defaultValue(self):
            return self.getTypedRuleContext(Java8Parser.DefaultValueContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_annotationTypeElementDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementDeclaration" ):
                listener.enterAnnotationTypeElementDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementDeclaration" ):
                listener.exitAnnotationTypeElementDeclaration(self)




    def annotationTypeElementDeclaration(self):

        localctx = Java8Parser.AnnotationTypeElementDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_annotationTypeElementDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1 or _la==35 or _la==103:
                self.state = 1377
                self.annotationTypeElementModifier()
                self.state = 1382
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1383
            self.unannType()
            self.state = 1384
            self.match(Java8Parser.Identifier)
            self.state = 1385
            self.match(Java8Parser.LPAREN)
            self.state = 1386
            self.match(Java8Parser.RPAREN)
            self.state = 1388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61 or _la==103:
                self.state = 1387
                self.dims()


            self.state = 1391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 1390
                self.defaultValue()


            self.state = 1393
            self.match(Java8Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationTypeElementModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(Java8Parser.AnnotationContext,0)


        def PUBLIC(self):
            return self.getToken(Java8Parser.PUBLIC, 0)

        def ABSTRACT(self):
            return self.getToken(Java8Parser.ABSTRACT, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_annotationTypeElementModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationTypeElementModifier" ):
                listener.enterAnnotationTypeElementModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationTypeElementModifier" ):
                listener.exitAnnotationTypeElementModifier(self)




    def annotationTypeElementModifier(self):

        localctx = Java8Parser.AnnotationTypeElementModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_annotationTypeElementModifier)
        try:
            self.state = 1398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1395
                self.annotation()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1396
                self.match(Java8Parser.PUBLIC)
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1397
                self.match(Java8Parser.ABSTRACT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(Java8Parser.DEFAULT, 0)

        def elementValue(self):
            return self.getTypedRuleContext(Java8Parser.ElementValueContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)




    def defaultValue(self):

        localctx = Java8Parser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_defaultValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self.match(Java8Parser.DEFAULT)
            self.state = 1401
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def normalAnnotation(self):
            return self.getTypedRuleContext(Java8Parser.NormalAnnotationContext,0)


        def markerAnnotation(self):
            return self.getTypedRuleContext(Java8Parser.MarkerAnnotationContext,0)


        def singleElementAnnotation(self):
            return self.getTypedRuleContext(Java8Parser.SingleElementAnnotationContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = Java8Parser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_annotation)
        try:
            self.state = 1406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1403
                self.normalAnnotation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1404
                self.markerAnnotation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1405
                self.singleElementAnnotation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NormalAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Java8Parser.AT, 0)

        def typeName(self):
            return self.getTypedRuleContext(Java8Parser.TypeNameContext,0)


        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def elementValuePairList(self):
            return self.getTypedRuleContext(Java8Parser.ElementValuePairListContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_normalAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNormalAnnotation" ):
                listener.enterNormalAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNormalAnnotation" ):
                listener.exitNormalAnnotation(self)




    def normalAnnotation(self):

        localctx = Java8Parser.NormalAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_normalAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            self.match(Java8Parser.AT)
            self.state = 1409
            self.typeName()
            self.state = 1410
            self.match(Java8Parser.LPAREN)
            self.state = 1412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 1411
                self.elementValuePairList()


            self.state = 1414
            self.match(Java8Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.ElementValuePairContext)
            else:
                return self.getTypedRuleContext(Java8Parser.ElementValuePairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.COMMA)
            else:
                return self.getToken(Java8Parser.COMMA, i)

        def getRuleIndex(self):
            return Java8Parser.RULE_elementValuePairList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePairList" ):
                listener.enterElementValuePairList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePairList" ):
                listener.exitElementValuePairList(self)




    def elementValuePairList(self):

        localctx = Java8Parser.ElementValuePairListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_elementValuePairList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1416
            self.elementValuePair()
            self.state = 1421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==64:
                self.state = 1417
                self.match(Java8Parser.COMMA)
                self.state = 1418
                self.elementValuePair()
                self.state = 1423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def ASSIGN(self):
            return self.getToken(Java8Parser.ASSIGN, 0)

        def elementValue(self):
            return self.getTypedRuleContext(Java8Parser.ElementValueContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_elementValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePair" ):
                listener.enterElementValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePair" ):
                listener.exitElementValuePair(self)




    def elementValuePair(self):

        localctx = Java8Parser.ElementValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_elementValuePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1424
            self.match(Java8Parser.Identifier)
            self.state = 1425
            self.match(Java8Parser.ASSIGN)
            self.state = 1426
            self.elementValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(Java8Parser.ConditionalExpressionContext,0)


        def elementValueArrayInitializer(self):
            return self.getTypedRuleContext(Java8Parser.ElementValueArrayInitializerContext,0)


        def annotation(self):
            return self.getTypedRuleContext(Java8Parser.AnnotationContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_elementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValue" ):
                listener.enterElementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValue" ):
                listener.exitElementValue(self)




    def elementValue(self):

        localctx = Java8Parser.ElementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_elementValue)
        try:
            self.state = 1431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1428
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1429
                self.elementValueArrayInitializer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1430
                self.annotation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(Java8Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(Java8Parser.RBRACE, 0)

        def elementValueList(self):
            return self.getTypedRuleContext(Java8Parser.ElementValueListContext,0)


        def COMMA(self):
            return self.getToken(Java8Parser.COMMA, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_elementValueArrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValueArrayInitializer" ):
                listener.enterElementValueArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValueArrayInitializer" ):
                listener.exitElementValueArrayInitializer(self)




    def elementValueArrayInitializer(self):

        localctx = Java8Parser.ElementValueArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_elementValueArrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self.match(Java8Parser.LBRACE)
            self.state = 1435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 862730839481401640) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                self.state = 1434
                self.elementValueList()


            self.state = 1438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 1437
                self.match(Java8Parser.COMMA)


            self.state = 1440
            self.match(Java8Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.ElementValueContext)
            else:
                return self.getTypedRuleContext(Java8Parser.ElementValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.COMMA)
            else:
                return self.getToken(Java8Parser.COMMA, i)

        def getRuleIndex(self):
            return Java8Parser.RULE_elementValueList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValueList" ):
                listener.enterElementValueList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValueList" ):
                listener.exitElementValueList(self)




    def elementValueList(self):

        localctx = Java8Parser.ElementValueListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_elementValueList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1442
            self.elementValue()
            self.state = 1447
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1443
                    self.match(Java8Parser.COMMA)
                    self.state = 1444
                    self.elementValue() 
                self.state = 1449
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MarkerAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Java8Parser.AT, 0)

        def typeName(self):
            return self.getTypedRuleContext(Java8Parser.TypeNameContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_markerAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMarkerAnnotation" ):
                listener.enterMarkerAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMarkerAnnotation" ):
                listener.exitMarkerAnnotation(self)




    def markerAnnotation(self):

        localctx = Java8Parser.MarkerAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_markerAnnotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self.match(Java8Parser.AT)
            self.state = 1451
            self.typeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleElementAnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Java8Parser.AT, 0)

        def typeName(self):
            return self.getTypedRuleContext(Java8Parser.TypeNameContext,0)


        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def elementValue(self):
            return self.getTypedRuleContext(Java8Parser.ElementValueContext,0)


        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_singleElementAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleElementAnnotation" ):
                listener.enterSingleElementAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleElementAnnotation" ):
                listener.exitSingleElementAnnotation(self)




    def singleElementAnnotation(self):

        localctx = Java8Parser.SingleElementAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_singleElementAnnotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453
            self.match(Java8Parser.AT)
            self.state = 1454
            self.typeName()
            self.state = 1455
            self.match(Java8Parser.LPAREN)
            self.state = 1456
            self.elementValue()
            self.state = 1457
            self.match(Java8Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(Java8Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(Java8Parser.RBRACE, 0)

        def variableInitializerList(self):
            return self.getTypedRuleContext(Java8Parser.VariableInitializerListContext,0)


        def COMMA(self):
            return self.getToken(Java8Parser.COMMA, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)




    def arrayInitializer(self):

        localctx = Java8Parser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            self.match(Java8Parser.LBRACE)
            self.state = 1461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 862730839481401640) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                self.state = 1460
                self.variableInitializerList()


            self.state = 1464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 1463
                self.match(Java8Parser.COMMA)


            self.state = 1466
            self.match(Java8Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableInitializerListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(Java8Parser.VariableInitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.COMMA)
            else:
                return self.getToken(Java8Parser.COMMA, i)

        def getRuleIndex(self):
            return Java8Parser.RULE_variableInitializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializerList" ):
                listener.enterVariableInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializerList" ):
                listener.exitVariableInitializerList(self)




    def variableInitializerList(self):

        localctx = Java8Parser.VariableInitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_variableInitializerList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1468
            self.variableInitializer()
            self.state = 1473
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1469
                    self.match(Java8Parser.COMMA)
                    self.state = 1470
                    self.variableInitializer() 
                self.state = 1475
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(Java8Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(Java8Parser.RBRACE, 0)

        def blockStatements(self):
            return self.getTypedRuleContext(Java8Parser.BlockStatementsContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = Java8Parser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1476
            self.match(Java8Parser.LBRACE)
            self.state = 1478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8359349417232995522) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 25165827) != 0):
                self.state = 1477
                self.blockStatements()


            self.state = 1480
            self.match(Java8Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(Java8Parser.BlockStatementContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_blockStatements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatements" ):
                listener.enterBlockStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatements" ):
                listener.exitBlockStatements(self)




    def blockStatements(self):

        localctx = Java8Parser.BlockStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_blockStatements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1483 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1482
                self.blockStatement()
                self.state = 1485 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -8359349417232995522) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 25165827) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclarationStatement(self):
            return self.getTypedRuleContext(Java8Parser.LocalVariableDeclarationStatementContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.ClassDeclarationContext,0)


        def statement(self):
            return self.getTypedRuleContext(Java8Parser.StatementContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)




    def blockStatement(self):

        localctx = Java8Parser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_blockStatement)
        try:
            self.state = 1490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1487
                self.localVariableDeclarationStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1488
                self.classDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1489
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.LocalVariableDeclarationContext,0)


        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_localVariableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclarationStatement" ):
                listener.enterLocalVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclarationStatement" ):
                listener.exitLocalVariableDeclarationStatement(self)




    def localVariableDeclarationStatement(self):

        localctx = Java8Parser.LocalVariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_localVariableDeclarationStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1492
            self.localVariableDeclaration()
            self.state = 1493
            self.match(Java8Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java8Parser.UnannTypeContext,0)


        def variableDeclaratorList(self):
            return self.getTypedRuleContext(Java8Parser.VariableDeclaratorListContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.VariableModifierContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)




    def localVariableDeclaration(self):

        localctx = Java8Parser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_localVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==18 or _la==103:
                self.state = 1495
                self.variableModifier()
                self.state = 1500
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1501
            self.unannType()
            self.state = 1502
            self.variableDeclaratorList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementWithoutTrailingSubstatement(self):
            return self.getTypedRuleContext(Java8Parser.StatementWithoutTrailingSubstatementContext,0)


        def labeledStatement(self):
            return self.getTypedRuleContext(Java8Parser.LabeledStatementContext,0)


        def ifThenStatement(self):
            return self.getTypedRuleContext(Java8Parser.IfThenStatementContext,0)


        def ifThenElseStatement(self):
            return self.getTypedRuleContext(Java8Parser.IfThenElseStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(Java8Parser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(Java8Parser.ForStatementContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = Java8Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_statement)
        try:
            self.state = 1510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1504
                self.statementWithoutTrailingSubstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1505
                self.labeledStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1506
                self.ifThenStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1507
                self.ifThenElseStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1508
                self.whileStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1509
                self.forStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementNoShortIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementWithoutTrailingSubstatement(self):
            return self.getTypedRuleContext(Java8Parser.StatementWithoutTrailingSubstatementContext,0)


        def labeledStatementNoShortIf(self):
            return self.getTypedRuleContext(Java8Parser.LabeledStatementNoShortIfContext,0)


        def ifThenElseStatementNoShortIf(self):
            return self.getTypedRuleContext(Java8Parser.IfThenElseStatementNoShortIfContext,0)


        def whileStatementNoShortIf(self):
            return self.getTypedRuleContext(Java8Parser.WhileStatementNoShortIfContext,0)


        def forStatementNoShortIf(self):
            return self.getTypedRuleContext(Java8Parser.ForStatementNoShortIfContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_statementNoShortIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementNoShortIf" ):
                listener.enterStatementNoShortIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementNoShortIf" ):
                listener.exitStatementNoShortIf(self)




    def statementNoShortIf(self):

        localctx = Java8Parser.StatementNoShortIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_statementNoShortIf)
        try:
            self.state = 1517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1512
                self.statementWithoutTrailingSubstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1513
                self.labeledStatementNoShortIf()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1514
                self.ifThenElseStatementNoShortIf()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1515
                self.whileStatementNoShortIf()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1516
                self.forStatementNoShortIf()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementWithoutTrailingSubstatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(Java8Parser.BlockContext,0)


        def emptyStatement_(self):
            return self.getTypedRuleContext(Java8Parser.EmptyStatement_Context,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionStatementContext,0)


        def assertStatement(self):
            return self.getTypedRuleContext(Java8Parser.AssertStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(Java8Parser.SwitchStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(Java8Parser.DoStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(Java8Parser.BreakStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(Java8Parser.ContinueStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(Java8Parser.ReturnStatementContext,0)


        def synchronizedStatement(self):
            return self.getTypedRuleContext(Java8Parser.SynchronizedStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(Java8Parser.ThrowStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(Java8Parser.TryStatementContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_statementWithoutTrailingSubstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementWithoutTrailingSubstatement" ):
                listener.enterStatementWithoutTrailingSubstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementWithoutTrailingSubstatement" ):
                listener.exitStatementWithoutTrailingSubstatement(self)




    def statementWithoutTrailingSubstatement(self):

        localctx = Java8Parser.StatementWithoutTrailingSubstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_statementWithoutTrailingSubstatement)
        try:
            self.state = 1531
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1519
                self.block()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1520
                self.emptyStatement_()
                pass
            elif token in [3, 5, 8, 14, 20, 27, 29, 31, 37, 40, 43, 48, 51, 52, 53, 54, 55, 56, 57, 79, 80, 102, 103]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1521
                self.expressionStatement()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1522
                self.assertStatement()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1523
                self.switchStatement()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1524
                self.doStatement()
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1525
                self.breakStatement()
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1526
                self.continueStatement()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1527
                self.returnStatement()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1528
                self.synchronizedStatement()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1529
                self.throwStatement()
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1530
                self.tryStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatement_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_emptyStatement_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement_" ):
                listener.enterEmptyStatement_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement_" ):
                listener.exitEmptyStatement_(self)




    def emptyStatement_(self):

        localctx = Java8Parser.EmptyStatement_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_emptyStatement_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1533
            self.match(Java8Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def COLON(self):
            return self.getToken(Java8Parser.COLON, 0)

        def statement(self):
            return self.getTypedRuleContext(Java8Parser.StatementContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = Java8Parser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_labeledStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1535
            self.match(Java8Parser.Identifier)
            self.state = 1536
            self.match(Java8Parser.COLON)
            self.state = 1537
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementNoShortIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def COLON(self):
            return self.getToken(Java8Parser.COLON, 0)

        def statementNoShortIf(self):
            return self.getTypedRuleContext(Java8Parser.StatementNoShortIfContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_labeledStatementNoShortIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatementNoShortIf" ):
                listener.enterLabeledStatementNoShortIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatementNoShortIf" ):
                listener.exitLabeledStatementNoShortIf(self)




    def labeledStatementNoShortIf(self):

        localctx = Java8Parser.LabeledStatementNoShortIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_labeledStatementNoShortIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1539
            self.match(Java8Parser.Identifier)
            self.state = 1540
            self.match(Java8Parser.COLON)
            self.state = 1541
            self.statementNoShortIf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementExpression(self):
            return self.getTypedRuleContext(Java8Parser.StatementExpressionContext,0)


        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = Java8Parser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1543
            self.statementExpression()
            self.state = 1544
            self.match(Java8Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(Java8Parser.AssignmentContext,0)


        def preIncrementExpression(self):
            return self.getTypedRuleContext(Java8Parser.PreIncrementExpressionContext,0)


        def preDecrementExpression(self):
            return self.getTypedRuleContext(Java8Parser.PreDecrementExpressionContext,0)


        def postIncrementExpression(self):
            return self.getTypedRuleContext(Java8Parser.PostIncrementExpressionContext,0)


        def postDecrementExpression(self):
            return self.getTypedRuleContext(Java8Parser.PostDecrementExpressionContext,0)


        def methodInvocation(self):
            return self.getTypedRuleContext(Java8Parser.MethodInvocationContext,0)


        def classInstanceCreationExpression(self):
            return self.getTypedRuleContext(Java8Parser.ClassInstanceCreationExpressionContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_statementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementExpression" ):
                listener.enterStatementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementExpression" ):
                listener.exitStatementExpression(self)




    def statementExpression(self):

        localctx = Java8Parser.StatementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_statementExpression)
        try:
            self.state = 1553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1546
                self.assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1547
                self.preIncrementExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1548
                self.preDecrementExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1549
                self.postIncrementExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1550
                self.postDecrementExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1551
                self.methodInvocation()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1552
                self.classInstanceCreationExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfThenStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Java8Parser.IF, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(Java8Parser.StatementContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_ifThenStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfThenStatement" ):
                listener.enterIfThenStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfThenStatement" ):
                listener.exitIfThenStatement(self)




    def ifThenStatement(self):

        localctx = Java8Parser.IfThenStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_ifThenStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1555
            self.match(Java8Parser.IF)
            self.state = 1556
            self.match(Java8Parser.LPAREN)
            self.state = 1557
            self.expression()
            self.state = 1558
            self.match(Java8Parser.RPAREN)
            self.state = 1559
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfThenElseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Java8Parser.IF, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def statementNoShortIf(self):
            return self.getTypedRuleContext(Java8Parser.StatementNoShortIfContext,0)


        def ELSE(self):
            return self.getToken(Java8Parser.ELSE, 0)

        def statement(self):
            return self.getTypedRuleContext(Java8Parser.StatementContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_ifThenElseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfThenElseStatement" ):
                listener.enterIfThenElseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfThenElseStatement" ):
                listener.exitIfThenElseStatement(self)




    def ifThenElseStatement(self):

        localctx = Java8Parser.IfThenElseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_ifThenElseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1561
            self.match(Java8Parser.IF)
            self.state = 1562
            self.match(Java8Parser.LPAREN)
            self.state = 1563
            self.expression()
            self.state = 1564
            self.match(Java8Parser.RPAREN)
            self.state = 1565
            self.statementNoShortIf()
            self.state = 1566
            self.match(Java8Parser.ELSE)
            self.state = 1567
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfThenElseStatementNoShortIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Java8Parser.IF, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def statementNoShortIf(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.StatementNoShortIfContext)
            else:
                return self.getTypedRuleContext(Java8Parser.StatementNoShortIfContext,i)


        def ELSE(self):
            return self.getToken(Java8Parser.ELSE, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_ifThenElseStatementNoShortIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfThenElseStatementNoShortIf" ):
                listener.enterIfThenElseStatementNoShortIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfThenElseStatementNoShortIf" ):
                listener.exitIfThenElseStatementNoShortIf(self)




    def ifThenElseStatementNoShortIf(self):

        localctx = Java8Parser.IfThenElseStatementNoShortIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_ifThenElseStatementNoShortIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1569
            self.match(Java8Parser.IF)
            self.state = 1570
            self.match(Java8Parser.LPAREN)
            self.state = 1571
            self.expression()
            self.state = 1572
            self.match(Java8Parser.RPAREN)
            self.state = 1573
            self.statementNoShortIf()
            self.state = 1574
            self.match(Java8Parser.ELSE)
            self.state = 1575
            self.statementNoShortIf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(Java8Parser.ASSERT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Java8Parser.ExpressionContext,i)


        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def COLON(self):
            return self.getToken(Java8Parser.COLON, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_assertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertStatement" ):
                listener.enterAssertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertStatement" ):
                listener.exitAssertStatement(self)




    def assertStatement(self):

        localctx = Java8Parser.AssertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_assertStatement)
        try:
            self.state = 1587
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1577
                self.match(Java8Parser.ASSERT)
                self.state = 1578
                self.expression()
                self.state = 1579
                self.match(Java8Parser.SEMI)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1581
                self.match(Java8Parser.ASSERT)
                self.state = 1582
                self.expression()
                self.state = 1583
                self.match(Java8Parser.COLON)
                self.state = 1584
                self.expression()
                self.state = 1585
                self.match(Java8Parser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(Java8Parser.SWITCH, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def switchBlock(self):
            return self.getTypedRuleContext(Java8Parser.SwitchBlockContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)




    def switchStatement(self):

        localctx = Java8Parser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_switchStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1589
            self.match(Java8Parser.SWITCH)
            self.state = 1590
            self.match(Java8Parser.LPAREN)
            self.state = 1591
            self.expression()
            self.state = 1592
            self.match(Java8Parser.RPAREN)
            self.state = 1593
            self.switchBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(Java8Parser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(Java8Parser.RBRACE, 0)

        def switchBlockStatementGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.SwitchBlockStatementGroupContext)
            else:
                return self.getTypedRuleContext(Java8Parser.SwitchBlockStatementGroupContext,i)


        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(Java8Parser.SwitchLabelContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_switchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlock" ):
                listener.enterSwitchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlock" ):
                listener.exitSwitchBlock(self)




    def switchBlock(self):

        localctx = Java8Parser.SwitchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_switchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1595
            self.match(Java8Parser.LBRACE)
            self.state = 1599
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,160,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1596
                    self.switchBlockStatementGroup() 
                self.state = 1601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,160,self._ctx)

            self.state = 1605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6 or _la==12:
                self.state = 1602
                self.switchLabel()
                self.state = 1607
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1608
            self.match(Java8Parser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockStatementGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabels(self):
            return self.getTypedRuleContext(Java8Parser.SwitchLabelsContext,0)


        def blockStatements(self):
            return self.getTypedRuleContext(Java8Parser.BlockStatementsContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_switchBlockStatementGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlockStatementGroup" ):
                listener.enterSwitchBlockStatementGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlockStatementGroup" ):
                listener.exitSwitchBlockStatementGroup(self)




    def switchBlockStatementGroup(self):

        localctx = Java8Parser.SwitchBlockStatementGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_switchBlockStatementGroup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self.switchLabels()
            self.state = 1611
            self.blockStatements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(Java8Parser.SwitchLabelContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_switchLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabels" ):
                listener.enterSwitchLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabels" ):
                listener.exitSwitchLabels(self)




    def switchLabels(self):

        localctx = Java8Parser.SwitchLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_switchLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1613
            self.switchLabel()
            self.state = 1617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6 or _la==12:
                self.state = 1614
                self.switchLabel()
                self.state = 1619
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self):
            return self.getToken(Java8Parser.CASE, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(Java8Parser.ConstantExpressionContext,0)


        def COLON(self):
            return self.getToken(Java8Parser.COLON, 0)

        def enumConstantName(self):
            return self.getTypedRuleContext(Java8Parser.EnumConstantNameContext,0)


        def DEFAULT(self):
            return self.getToken(Java8Parser.DEFAULT, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_switchLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabel" ):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabel" ):
                listener.exitSwitchLabel(self)




    def switchLabel(self):

        localctx = Java8Parser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_switchLabel)
        try:
            self.state = 1630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1620
                self.match(Java8Parser.CASE)
                self.state = 1621
                self.constantExpression()
                self.state = 1622
                self.match(Java8Parser.COLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1624
                self.match(Java8Parser.CASE)
                self.state = 1625
                self.enumConstantName()
                self.state = 1626
                self.match(Java8Parser.COLON)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1628
                self.match(Java8Parser.DEFAULT)
                self.state = 1629
                self.match(Java8Parser.COLON)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_enumConstantName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstantName" ):
                listener.enterEnumConstantName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstantName" ):
                listener.exitEnumConstantName(self)




    def enumConstantName(self):

        localctx = Java8Parser.EnumConstantNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_enumConstantName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1632
            self.match(Java8Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Java8Parser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(Java8Parser.StatementContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = Java8Parser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1634
            self.match(Java8Parser.WHILE)
            self.state = 1635
            self.match(Java8Parser.LPAREN)
            self.state = 1636
            self.expression()
            self.state = 1637
            self.match(Java8Parser.RPAREN)
            self.state = 1638
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementNoShortIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(Java8Parser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def statementNoShortIf(self):
            return self.getTypedRuleContext(Java8Parser.StatementNoShortIfContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_whileStatementNoShortIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatementNoShortIf" ):
                listener.enterWhileStatementNoShortIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatementNoShortIf" ):
                listener.exitWhileStatementNoShortIf(self)




    def whileStatementNoShortIf(self):

        localctx = Java8Parser.WhileStatementNoShortIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_whileStatementNoShortIf)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self.match(Java8Parser.WHILE)
            self.state = 1641
            self.match(Java8Parser.LPAREN)
            self.state = 1642
            self.expression()
            self.state = 1643
            self.match(Java8Parser.RPAREN)
            self.state = 1644
            self.statementNoShortIf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(Java8Parser.DO, 0)

        def statement(self):
            return self.getTypedRuleContext(Java8Parser.StatementContext,0)


        def WHILE(self):
            return self.getToken(Java8Parser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_doStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)




    def doStatement(self):

        localctx = Java8Parser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_doStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1646
            self.match(Java8Parser.DO)
            self.state = 1647
            self.statement()
            self.state = 1648
            self.match(Java8Parser.WHILE)
            self.state = 1649
            self.match(Java8Parser.LPAREN)
            self.state = 1650
            self.expression()
            self.state = 1651
            self.match(Java8Parser.RPAREN)
            self.state = 1652
            self.match(Java8Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicForStatement(self):
            return self.getTypedRuleContext(Java8Parser.BasicForStatementContext,0)


        def enhancedForStatement(self):
            return self.getTypedRuleContext(Java8Parser.EnhancedForStatementContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = Java8Parser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_forStatement)
        try:
            self.state = 1656
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1654
                self.basicForStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1655
                self.enhancedForStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementNoShortIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basicForStatementNoShortIf(self):
            return self.getTypedRuleContext(Java8Parser.BasicForStatementNoShortIfContext,0)


        def enhancedForStatementNoShortIf(self):
            return self.getTypedRuleContext(Java8Parser.EnhancedForStatementNoShortIfContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_forStatementNoShortIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatementNoShortIf" ):
                listener.enterForStatementNoShortIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatementNoShortIf" ):
                listener.exitForStatementNoShortIf(self)




    def forStatementNoShortIf(self):

        localctx = Java8Parser.ForStatementNoShortIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_forStatementNoShortIf)
        try:
            self.state = 1660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1658
                self.basicForStatementNoShortIf()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1659
                self.enhancedForStatementNoShortIf()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Java8Parser.FOR, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.SEMI)
            else:
                return self.getToken(Java8Parser.SEMI, i)

        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(Java8Parser.StatementContext,0)


        def forInit(self):
            return self.getTypedRuleContext(Java8Parser.ForInitContext,0)


        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def forUpdate(self):
            return self.getTypedRuleContext(Java8Parser.ForUpdateContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_basicForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicForStatement" ):
                listener.enterBasicForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicForStatement" ):
                listener.exitBasicForStatement(self)




    def basicForStatement(self):

        localctx = Java8Parser.BasicForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_basicForStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1662
            self.match(Java8Parser.FOR)
            self.state = 1663
            self.match(Java8Parser.LPAREN)
            self.state = 1665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087178240296) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 25165827) != 0):
                self.state = 1664
                self.forInit()


            self.state = 1667
            self.match(Java8Parser.SEMI)
            self.state = 1669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                self.state = 1668
                self.expression()


            self.state = 1671
            self.match(Java8Parser.SEMI)
            self.state = 1673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 25165827) != 0):
                self.state = 1672
                self.forUpdate()


            self.state = 1675
            self.match(Java8Parser.RPAREN)
            self.state = 1676
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicForStatementNoShortIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Java8Parser.FOR, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.SEMI)
            else:
                return self.getToken(Java8Parser.SEMI, i)

        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def statementNoShortIf(self):
            return self.getTypedRuleContext(Java8Parser.StatementNoShortIfContext,0)


        def forInit(self):
            return self.getTypedRuleContext(Java8Parser.ForInitContext,0)


        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def forUpdate(self):
            return self.getTypedRuleContext(Java8Parser.ForUpdateContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_basicForStatementNoShortIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicForStatementNoShortIf" ):
                listener.enterBasicForStatementNoShortIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicForStatementNoShortIf" ):
                listener.exitBasicForStatementNoShortIf(self)




    def basicForStatementNoShortIf(self):

        localctx = Java8Parser.BasicForStatementNoShortIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_basicForStatementNoShortIf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1678
            self.match(Java8Parser.FOR)
            self.state = 1679
            self.match(Java8Parser.LPAREN)
            self.state = 1681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087178240296) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 25165827) != 0):
                self.state = 1680
                self.forInit()


            self.state = 1683
            self.match(Java8Parser.SEMI)
            self.state = 1685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                self.state = 1684
                self.expression()


            self.state = 1687
            self.match(Java8Parser.SEMI)
            self.state = 1689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 25165827) != 0):
                self.state = 1688
                self.forUpdate()


            self.state = 1691
            self.match(Java8Parser.RPAREN)
            self.state = 1692
            self.statementNoShortIf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementExpressionList(self):
            return self.getTypedRuleContext(Java8Parser.StatementExpressionListContext,0)


        def localVariableDeclaration(self):
            return self.getTypedRuleContext(Java8Parser.LocalVariableDeclarationContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)




    def forInit(self):

        localctx = Java8Parser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_forInit)
        try:
            self.state = 1696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1694
                self.statementExpressionList()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1695
                self.localVariableDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForUpdateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementExpressionList(self):
            return self.getTypedRuleContext(Java8Parser.StatementExpressionListContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_forUpdate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForUpdate" ):
                listener.enterForUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForUpdate" ):
                listener.exitForUpdate(self)




    def forUpdate(self):

        localctx = Java8Parser.ForUpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_forUpdate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1698
            self.statementExpressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statementExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.StatementExpressionContext)
            else:
                return self.getTypedRuleContext(Java8Parser.StatementExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.COMMA)
            else:
                return self.getToken(Java8Parser.COMMA, i)

        def getRuleIndex(self):
            return Java8Parser.RULE_statementExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementExpressionList" ):
                listener.enterStatementExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementExpressionList" ):
                listener.exitStatementExpressionList(self)




    def statementExpressionList(self):

        localctx = Java8Parser.StatementExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_statementExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1700
            self.statementExpression()
            self.state = 1705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==64:
                self.state = 1701
                self.match(Java8Parser.COMMA)
                self.state = 1702
                self.statementExpression()
                self.state = 1707
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancedForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Java8Parser.FOR, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def unannType(self):
            return self.getTypedRuleContext(Java8Parser.UnannTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(Java8Parser.VariableDeclaratorIdContext,0)


        def COLON(self):
            return self.getToken(Java8Parser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(Java8Parser.StatementContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.VariableModifierContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_enhancedForStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancedForStatement" ):
                listener.enterEnhancedForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancedForStatement" ):
                listener.exitEnhancedForStatement(self)




    def enhancedForStatement(self):

        localctx = Java8Parser.EnhancedForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_enhancedForStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1708
            self.match(Java8Parser.FOR)
            self.state = 1709
            self.match(Java8Parser.LPAREN)
            self.state = 1713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==18 or _la==103:
                self.state = 1710
                self.variableModifier()
                self.state = 1715
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1716
            self.unannType()
            self.state = 1717
            self.variableDeclaratorId()
            self.state = 1718
            self.match(Java8Parser.COLON)
            self.state = 1719
            self.expression()
            self.state = 1720
            self.match(Java8Parser.RPAREN)
            self.state = 1721
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancedForStatementNoShortIfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Java8Parser.FOR, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def unannType(self):
            return self.getTypedRuleContext(Java8Parser.UnannTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(Java8Parser.VariableDeclaratorIdContext,0)


        def COLON(self):
            return self.getToken(Java8Parser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def statementNoShortIf(self):
            return self.getTypedRuleContext(Java8Parser.StatementNoShortIfContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.VariableModifierContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_enhancedForStatementNoShortIf

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancedForStatementNoShortIf" ):
                listener.enterEnhancedForStatementNoShortIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancedForStatementNoShortIf" ):
                listener.exitEnhancedForStatementNoShortIf(self)




    def enhancedForStatementNoShortIf(self):

        localctx = Java8Parser.EnhancedForStatementNoShortIfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_enhancedForStatementNoShortIf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1723
            self.match(Java8Parser.FOR)
            self.state = 1724
            self.match(Java8Parser.LPAREN)
            self.state = 1728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==18 or _la==103:
                self.state = 1725
                self.variableModifier()
                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1731
            self.unannType()
            self.state = 1732
            self.variableDeclaratorId()
            self.state = 1733
            self.match(Java8Parser.COLON)
            self.state = 1734
            self.expression()
            self.state = 1735
            self.match(Java8Parser.RPAREN)
            self.state = 1736
            self.statementNoShortIf()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(Java8Parser.BREAK, 0)

        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = Java8Parser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_breakStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1738
            self.match(Java8Parser.BREAK)
            self.state = 1740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 1739
                self.match(Java8Parser.Identifier)


            self.state = 1742
            self.match(Java8Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(Java8Parser.CONTINUE, 0)

        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = Java8Parser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_continueStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1744
            self.match(Java8Parser.CONTINUE)
            self.state = 1746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 1745
                self.match(Java8Parser.Identifier)


            self.state = 1748
            self.match(Java8Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Java8Parser.RETURN, 0)

        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = Java8Parser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1750
            self.match(Java8Parser.RETURN)
            self.state = 1752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                self.state = 1751
                self.expression()


            self.state = 1754
            self.match(Java8Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(Java8Parser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = Java8Parser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1756
            self.match(Java8Parser.THROW)
            self.state = 1757
            self.expression()
            self.state = 1758
            self.match(Java8Parser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SynchronizedStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYNCHRONIZED(self):
            return self.getToken(Java8Parser.SYNCHRONIZED, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(Java8Parser.BlockContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_synchronizedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSynchronizedStatement" ):
                listener.enterSynchronizedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSynchronizedStatement" ):
                listener.exitSynchronizedStatement(self)




    def synchronizedStatement(self):

        localctx = Java8Parser.SynchronizedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_synchronizedStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1760
            self.match(Java8Parser.SYNCHRONIZED)
            self.state = 1761
            self.match(Java8Parser.LPAREN)
            self.state = 1762
            self.expression()
            self.state = 1763
            self.match(Java8Parser.RPAREN)
            self.state = 1764
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Java8Parser.TRY, 0)

        def block(self):
            return self.getTypedRuleContext(Java8Parser.BlockContext,0)


        def catches(self):
            return self.getTypedRuleContext(Java8Parser.CatchesContext,0)


        def finally_(self):
            return self.getTypedRuleContext(Java8Parser.Finally_Context,0)


        def tryWithResourcesStatement(self):
            return self.getTypedRuleContext(Java8Parser.TryWithResourcesStatementContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)




    def tryStatement(self):

        localctx = Java8Parser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.state = 1778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1766
                self.match(Java8Parser.TRY)
                self.state = 1767
                self.block()
                self.state = 1768
                self.catches()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1770
                self.match(Java8Parser.TRY)
                self.state = 1771
                self.block()
                self.state = 1773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 1772
                    self.catches()


                self.state = 1775
                self.finally_()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1777
                self.tryWithResourcesStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(Java8Parser.CatchClauseContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_catches

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatches" ):
                listener.enterCatches(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatches" ):
                listener.exitCatches(self)




    def catches(self):

        localctx = Java8Parser.CatchesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_catches)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1780
            self.catchClause()
            self.state = 1784
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7:
                self.state = 1781
                self.catchClause()
                self.state = 1786
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(Java8Parser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def catchFormalParameter(self):
            return self.getTypedRuleContext(Java8Parser.CatchFormalParameterContext,0)


        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(Java8Parser.BlockContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)




    def catchClause(self):

        localctx = Java8Parser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_catchClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1787
            self.match(Java8Parser.CATCH)
            self.state = 1788
            self.match(Java8Parser.LPAREN)
            self.state = 1789
            self.catchFormalParameter()
            self.state = 1790
            self.match(Java8Parser.RPAREN)
            self.state = 1791
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchFormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catchType(self):
            return self.getTypedRuleContext(Java8Parser.CatchTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(Java8Parser.VariableDeclaratorIdContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.VariableModifierContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_catchFormalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchFormalParameter" ):
                listener.enterCatchFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchFormalParameter" ):
                listener.exitCatchFormalParameter(self)




    def catchFormalParameter(self):

        localctx = Java8Parser.CatchFormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_catchFormalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==18 or _la==103:
                self.state = 1793
                self.variableModifier()
                self.state = 1798
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1799
            self.catchType()
            self.state = 1800
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannClassType(self):
            return self.getTypedRuleContext(Java8Parser.UnannClassTypeContext,0)


        def BITOR(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.BITOR)
            else:
                return self.getToken(Java8Parser.BITOR, i)

        def classType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.ClassTypeContext)
            else:
                return self.getTypedRuleContext(Java8Parser.ClassTypeContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_catchType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchType" ):
                listener.enterCatchType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchType" ):
                listener.exitCatchType(self)




    def catchType(self):

        localctx = Java8Parser.CatchTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_catchType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1802
            self.unannClassType()
            self.state = 1807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==86:
                self.state = 1803
                self.match(Java8Parser.BITOR)
                self.state = 1804
                self.classType()
                self.state = 1809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(Java8Parser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(Java8Parser.BlockContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_finally_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_" ):
                listener.enterFinally_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_" ):
                listener.exitFinally_(self)




    def finally_(self):

        localctx = Java8Parser.Finally_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_finally_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1810
            self.match(Java8Parser.FINALLY)
            self.state = 1811
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryWithResourcesStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(Java8Parser.TRY, 0)

        def resourceSpecification(self):
            return self.getTypedRuleContext(Java8Parser.ResourceSpecificationContext,0)


        def block(self):
            return self.getTypedRuleContext(Java8Parser.BlockContext,0)


        def catches(self):
            return self.getTypedRuleContext(Java8Parser.CatchesContext,0)


        def finally_(self):
            return self.getTypedRuleContext(Java8Parser.Finally_Context,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_tryWithResourcesStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryWithResourcesStatement" ):
                listener.enterTryWithResourcesStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryWithResourcesStatement" ):
                listener.exitTryWithResourcesStatement(self)




    def tryWithResourcesStatement(self):

        localctx = Java8Parser.TryWithResourcesStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_tryWithResourcesStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1813
            self.match(Java8Parser.TRY)
            self.state = 1814
            self.resourceSpecification()
            self.state = 1815
            self.block()
            self.state = 1817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 1816
                self.catches()


            self.state = 1820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 1819
                self.finally_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def resourceList(self):
            return self.getTypedRuleContext(Java8Parser.ResourceListContext,0)


        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(Java8Parser.SEMI, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_resourceSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceSpecification" ):
                listener.enterResourceSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceSpecification" ):
                listener.exitResourceSpecification(self)




    def resourceSpecification(self):

        localctx = Java8Parser.ResourceSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_resourceSpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1822
            self.match(Java8Parser.LPAREN)
            self.state = 1823
            self.resourceList()
            self.state = 1825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1824
                self.match(Java8Parser.SEMI)


            self.state = 1827
            self.match(Java8Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.ResourceContext)
            else:
                return self.getTypedRuleContext(Java8Parser.ResourceContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.SEMI)
            else:
                return self.getToken(Java8Parser.SEMI, i)

        def getRuleIndex(self):
            return Java8Parser.RULE_resourceList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResourceList" ):
                listener.enterResourceList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResourceList" ):
                listener.exitResourceList(self)




    def resourceList(self):

        localctx = Java8Parser.ResourceListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_resourceList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1829
            self.resource()
            self.state = 1834
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1830
                    self.match(Java8Parser.SEMI)
                    self.state = 1831
                    self.resource() 
                self.state = 1836
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unannType(self):
            return self.getTypedRuleContext(Java8Parser.UnannTypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(Java8Parser.VariableDeclaratorIdContext,0)


        def ASSIGN(self):
            return self.getToken(Java8Parser.ASSIGN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def variableModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.VariableModifierContext)
            else:
                return self.getTypedRuleContext(Java8Parser.VariableModifierContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_resource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResource" ):
                listener.enterResource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResource" ):
                listener.exitResource(self)




    def resource(self):

        localctx = Java8Parser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_resource)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==18 or _la==103:
                self.state = 1837
                self.variableModifier()
                self.state = 1842
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1843
            self.unannType()
            self.state = 1844
            self.variableDeclaratorId()
            self.state = 1845
            self.match(Java8Parser.ASSIGN)
            self.state = 1846
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryNoNewArray_lfno_primary(self):
            return self.getTypedRuleContext(Java8Parser.PrimaryNoNewArray_lfno_primaryContext,0)


        def arrayCreationExpression(self):
            return self.getTypedRuleContext(Java8Parser.ArrayCreationExpressionContext,0)


        def primaryNoNewArray_lf_primary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.PrimaryNoNewArray_lf_primaryContext)
            else:
                return self.getTypedRuleContext(Java8Parser.PrimaryNoNewArray_lf_primaryContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = Java8Parser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_primary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1848
                self.primaryNoNewArray_lfno_primary()
                pass

            elif la_ == 2:
                self.state = 1849
                self.arrayCreationExpression()
                pass


            self.state = 1855
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,190,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1852
                    self.primaryNoNewArray_lf_primary() 
                self.state = 1857
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,190,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryNoNewArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(Java8Parser.LiteralContext,0)


        def typeName(self):
            return self.getTypedRuleContext(Java8Parser.TypeNameContext,0)


        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def CLASS(self):
            return self.getToken(Java8Parser.CLASS, 0)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.LBRACK)
            else:
                return self.getToken(Java8Parser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.RBRACK)
            else:
                return self.getToken(Java8Parser.RBRACK, i)

        def VOID(self):
            return self.getToken(Java8Parser.VOID, 0)

        def THIS(self):
            return self.getToken(Java8Parser.THIS, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def classInstanceCreationExpression(self):
            return self.getTypedRuleContext(Java8Parser.ClassInstanceCreationExpressionContext,0)


        def fieldAccess(self):
            return self.getTypedRuleContext(Java8Parser.FieldAccessContext,0)


        def arrayAccess(self):
            return self.getTypedRuleContext(Java8Parser.ArrayAccessContext,0)


        def methodInvocation(self):
            return self.getTypedRuleContext(Java8Parser.MethodInvocationContext,0)


        def methodReference(self):
            return self.getTypedRuleContext(Java8Parser.MethodReferenceContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_primaryNoNewArray

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryNoNewArray" ):
                listener.enterPrimaryNoNewArray(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryNoNewArray" ):
                listener.exitPrimaryNoNewArray(self)




    def primaryNoNewArray(self):

        localctx = Java8Parser.PrimaryNoNewArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_primaryNoNewArray)
        self._la = 0 # Token type
        try:
            self.state = 1887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1858
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1859
                self.typeName()
                self.state = 1864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==61:
                    self.state = 1860
                    self.match(Java8Parser.LBRACK)
                    self.state = 1861
                    self.match(Java8Parser.RBRACK)
                    self.state = 1866
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1867
                self.match(Java8Parser.DOT)
                self.state = 1868
                self.match(Java8Parser.CLASS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1870
                self.match(Java8Parser.VOID)
                self.state = 1871
                self.match(Java8Parser.DOT)
                self.state = 1872
                self.match(Java8Parser.CLASS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1873
                self.match(Java8Parser.THIS)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1874
                self.typeName()
                self.state = 1875
                self.match(Java8Parser.DOT)
                self.state = 1876
                self.match(Java8Parser.THIS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1878
                self.match(Java8Parser.LPAREN)
                self.state = 1879
                self.expression()
                self.state = 1880
                self.match(Java8Parser.RPAREN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1882
                self.classInstanceCreationExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1883
                self.fieldAccess()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1884
                self.arrayAccess()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1885
                self.methodInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1886
                self.methodReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryNoNewArray_lf_arrayAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Java8Parser.RULE_primaryNoNewArray_lf_arrayAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryNoNewArray_lf_arrayAccess" ):
                listener.enterPrimaryNoNewArray_lf_arrayAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryNoNewArray_lf_arrayAccess" ):
                listener.exitPrimaryNoNewArray_lf_arrayAccess(self)




    def primaryNoNewArray_lf_arrayAccess(self):

        localctx = Java8Parser.PrimaryNoNewArray_lf_arrayAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_primaryNoNewArray_lf_arrayAccess)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryNoNewArray_lfno_arrayAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(Java8Parser.LiteralContext,0)


        def typeName(self):
            return self.getTypedRuleContext(Java8Parser.TypeNameContext,0)


        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def CLASS(self):
            return self.getToken(Java8Parser.CLASS, 0)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.LBRACK)
            else:
                return self.getToken(Java8Parser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.RBRACK)
            else:
                return self.getToken(Java8Parser.RBRACK, i)

        def VOID(self):
            return self.getToken(Java8Parser.VOID, 0)

        def THIS(self):
            return self.getToken(Java8Parser.THIS, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def classInstanceCreationExpression(self):
            return self.getTypedRuleContext(Java8Parser.ClassInstanceCreationExpressionContext,0)


        def fieldAccess(self):
            return self.getTypedRuleContext(Java8Parser.FieldAccessContext,0)


        def methodInvocation(self):
            return self.getTypedRuleContext(Java8Parser.MethodInvocationContext,0)


        def methodReference(self):
            return self.getTypedRuleContext(Java8Parser.MethodReferenceContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_primaryNoNewArray_lfno_arrayAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryNoNewArray_lfno_arrayAccess" ):
                listener.enterPrimaryNoNewArray_lfno_arrayAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryNoNewArray_lfno_arrayAccess" ):
                listener.exitPrimaryNoNewArray_lfno_arrayAccess(self)




    def primaryNoNewArray_lfno_arrayAccess(self):

        localctx = Java8Parser.PrimaryNoNewArray_lfno_arrayAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_primaryNoNewArray_lfno_arrayAccess)
        self._la = 0 # Token type
        try:
            self.state = 1919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1891
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1892
                self.typeName()
                self.state = 1897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==61:
                    self.state = 1893
                    self.match(Java8Parser.LBRACK)
                    self.state = 1894
                    self.match(Java8Parser.RBRACK)
                    self.state = 1899
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1900
                self.match(Java8Parser.DOT)
                self.state = 1901
                self.match(Java8Parser.CLASS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1903
                self.match(Java8Parser.VOID)
                self.state = 1904
                self.match(Java8Parser.DOT)
                self.state = 1905
                self.match(Java8Parser.CLASS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1906
                self.match(Java8Parser.THIS)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1907
                self.typeName()
                self.state = 1908
                self.match(Java8Parser.DOT)
                self.state = 1909
                self.match(Java8Parser.THIS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1911
                self.match(Java8Parser.LPAREN)
                self.state = 1912
                self.expression()
                self.state = 1913
                self.match(Java8Parser.RPAREN)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1915
                self.classInstanceCreationExpression()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1916
                self.fieldAccess()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1917
                self.methodInvocation()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1918
                self.methodReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryNoNewArray_lf_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classInstanceCreationExpression_lf_primary(self):
            return self.getTypedRuleContext(Java8Parser.ClassInstanceCreationExpression_lf_primaryContext,0)


        def fieldAccess_lf_primary(self):
            return self.getTypedRuleContext(Java8Parser.FieldAccess_lf_primaryContext,0)


        def arrayAccess_lf_primary(self):
            return self.getTypedRuleContext(Java8Parser.ArrayAccess_lf_primaryContext,0)


        def methodInvocation_lf_primary(self):
            return self.getTypedRuleContext(Java8Parser.MethodInvocation_lf_primaryContext,0)


        def methodReference_lf_primary(self):
            return self.getTypedRuleContext(Java8Parser.MethodReference_lf_primaryContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_primaryNoNewArray_lf_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryNoNewArray_lf_primary" ):
                listener.enterPrimaryNoNewArray_lf_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryNoNewArray_lf_primary" ):
                listener.exitPrimaryNoNewArray_lf_primary(self)




    def primaryNoNewArray_lf_primary(self):

        localctx = Java8Parser.PrimaryNoNewArray_lf_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_primaryNoNewArray_lf_primary)
        try:
            self.state = 1926
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1921
                self.classInstanceCreationExpression_lf_primary()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1922
                self.fieldAccess_lf_primary()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1923
                self.arrayAccess_lf_primary()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1924
                self.methodInvocation_lf_primary()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1925
                self.methodReference_lf_primary()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Java8Parser.RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary" ):
                listener.enterPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary" ):
                listener.exitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(self)




    def primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(self):

        localctx = Java8Parser.PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classInstanceCreationExpression_lf_primary(self):
            return self.getTypedRuleContext(Java8Parser.ClassInstanceCreationExpression_lf_primaryContext,0)


        def fieldAccess_lf_primary(self):
            return self.getTypedRuleContext(Java8Parser.FieldAccess_lf_primaryContext,0)


        def methodInvocation_lf_primary(self):
            return self.getTypedRuleContext(Java8Parser.MethodInvocation_lf_primaryContext,0)


        def methodReference_lf_primary(self):
            return self.getTypedRuleContext(Java8Parser.MethodReference_lf_primaryContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary" ):
                listener.enterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary" ):
                listener.exitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(self)




    def primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(self):

        localctx = Java8Parser.PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary)
        try:
            self.state = 1934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1930
                self.classInstanceCreationExpression_lf_primary()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1931
                self.fieldAccess_lf_primary()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1932
                self.methodInvocation_lf_primary()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1933
                self.methodReference_lf_primary()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryNoNewArray_lfno_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(Java8Parser.LiteralContext,0)


        def typeName(self):
            return self.getTypedRuleContext(Java8Parser.TypeNameContext,0)


        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def CLASS(self):
            return self.getToken(Java8Parser.CLASS, 0)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.LBRACK)
            else:
                return self.getToken(Java8Parser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.RBRACK)
            else:
                return self.getToken(Java8Parser.RBRACK, i)

        def unannPrimitiveType(self):
            return self.getTypedRuleContext(Java8Parser.UnannPrimitiveTypeContext,0)


        def VOID(self):
            return self.getToken(Java8Parser.VOID, 0)

        def THIS(self):
            return self.getToken(Java8Parser.THIS, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def classInstanceCreationExpression_lfno_primary(self):
            return self.getTypedRuleContext(Java8Parser.ClassInstanceCreationExpression_lfno_primaryContext,0)


        def fieldAccess_lfno_primary(self):
            return self.getTypedRuleContext(Java8Parser.FieldAccess_lfno_primaryContext,0)


        def arrayAccess_lfno_primary(self):
            return self.getTypedRuleContext(Java8Parser.ArrayAccess_lfno_primaryContext,0)


        def methodInvocation_lfno_primary(self):
            return self.getTypedRuleContext(Java8Parser.MethodInvocation_lfno_primaryContext,0)


        def methodReference_lfno_primary(self):
            return self.getTypedRuleContext(Java8Parser.MethodReference_lfno_primaryContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_primaryNoNewArray_lfno_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryNoNewArray_lfno_primary" ):
                listener.enterPrimaryNoNewArray_lfno_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryNoNewArray_lfno_primary" ):
                listener.exitPrimaryNoNewArray_lfno_primary(self)




    def primaryNoNewArray_lfno_primary(self):

        localctx = Java8Parser.PrimaryNoNewArray_lfno_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_primaryNoNewArray_lfno_primary)
        self._la = 0 # Token type
        try:
            self.state = 1976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1936
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1937
                self.typeName()
                self.state = 1942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==61:
                    self.state = 1938
                    self.match(Java8Parser.LBRACK)
                    self.state = 1939
                    self.match(Java8Parser.RBRACK)
                    self.state = 1944
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1945
                self.match(Java8Parser.DOT)
                self.state = 1946
                self.match(Java8Parser.CLASS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1948
                self.unannPrimitiveType()
                self.state = 1953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==61:
                    self.state = 1949
                    self.match(Java8Parser.LBRACK)
                    self.state = 1950
                    self.match(Java8Parser.RBRACK)
                    self.state = 1955
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1956
                self.match(Java8Parser.DOT)
                self.state = 1957
                self.match(Java8Parser.CLASS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1959
                self.match(Java8Parser.VOID)
                self.state = 1960
                self.match(Java8Parser.DOT)
                self.state = 1961
                self.match(Java8Parser.CLASS)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1962
                self.match(Java8Parser.THIS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1963
                self.typeName()
                self.state = 1964
                self.match(Java8Parser.DOT)
                self.state = 1965
                self.match(Java8Parser.THIS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1967
                self.match(Java8Parser.LPAREN)
                self.state = 1968
                self.expression()
                self.state = 1969
                self.match(Java8Parser.RPAREN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1971
                self.classInstanceCreationExpression_lfno_primary()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1972
                self.fieldAccess_lfno_primary()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1973
                self.arrayAccess_lfno_primary()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1974
                self.methodInvocation_lfno_primary()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1975
                self.methodReference_lfno_primary()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return Java8Parser.RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary" ):
                listener.enterPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary" ):
                listener.exitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(self)




    def primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(self):

        localctx = Java8Parser.PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary)
        try:
            self.enterOuterAlt(localctx, 1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(Java8Parser.LiteralContext,0)


        def typeName(self):
            return self.getTypedRuleContext(Java8Parser.TypeNameContext,0)


        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def CLASS(self):
            return self.getToken(Java8Parser.CLASS, 0)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.LBRACK)
            else:
                return self.getToken(Java8Parser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.RBRACK)
            else:
                return self.getToken(Java8Parser.RBRACK, i)

        def unannPrimitiveType(self):
            return self.getTypedRuleContext(Java8Parser.UnannPrimitiveTypeContext,0)


        def VOID(self):
            return self.getToken(Java8Parser.VOID, 0)

        def THIS(self):
            return self.getToken(Java8Parser.THIS, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def classInstanceCreationExpression_lfno_primary(self):
            return self.getTypedRuleContext(Java8Parser.ClassInstanceCreationExpression_lfno_primaryContext,0)


        def fieldAccess_lfno_primary(self):
            return self.getTypedRuleContext(Java8Parser.FieldAccess_lfno_primaryContext,0)


        def methodInvocation_lfno_primary(self):
            return self.getTypedRuleContext(Java8Parser.MethodInvocation_lfno_primaryContext,0)


        def methodReference_lfno_primary(self):
            return self.getTypedRuleContext(Java8Parser.MethodReference_lfno_primaryContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary" ):
                listener.enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary" ):
                listener.exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(self)




    def primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(self):

        localctx = Java8Parser.PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary)
        self._la = 0 # Token type
        try:
            self.state = 2019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1980
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1981
                self.typeName()
                self.state = 1986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==61:
                    self.state = 1982
                    self.match(Java8Parser.LBRACK)
                    self.state = 1983
                    self.match(Java8Parser.RBRACK)
                    self.state = 1988
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1989
                self.match(Java8Parser.DOT)
                self.state = 1990
                self.match(Java8Parser.CLASS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1992
                self.unannPrimitiveType()
                self.state = 1997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==61:
                    self.state = 1993
                    self.match(Java8Parser.LBRACK)
                    self.state = 1994
                    self.match(Java8Parser.RBRACK)
                    self.state = 1999
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2000
                self.match(Java8Parser.DOT)
                self.state = 2001
                self.match(Java8Parser.CLASS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2003
                self.match(Java8Parser.VOID)
                self.state = 2004
                self.match(Java8Parser.DOT)
                self.state = 2005
                self.match(Java8Parser.CLASS)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2006
                self.match(Java8Parser.THIS)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2007
                self.typeName()
                self.state = 2008
                self.match(Java8Parser.DOT)
                self.state = 2009
                self.match(Java8Parser.THIS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2011
                self.match(Java8Parser.LPAREN)
                self.state = 2012
                self.expression()
                self.state = 2013
                self.match(Java8Parser.RPAREN)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2015
                self.classInstanceCreationExpression_lfno_primary()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2016
                self.fieldAccess_lfno_primary()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2017
                self.methodInvocation_lfno_primary()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2018
                self.methodReference_lfno_primary()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassInstanceCreationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(Java8Parser.NEW, 0)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.Identifier)
            else:
                return self.getToken(Java8Parser.Identifier, i)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AnnotationContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.DOT)
            else:
                return self.getToken(Java8Parser.DOT, i)

        def typeArgumentsOrDiamond(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsOrDiamondContext,0)


        def argumentList(self):
            return self.getTypedRuleContext(Java8Parser.ArgumentListContext,0)


        def classBody(self):
            return self.getTypedRuleContext(Java8Parser.ClassBodyContext,0)


        def expressionName(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionNameContext,0)


        def primary(self):
            return self.getTypedRuleContext(Java8Parser.PrimaryContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_classInstanceCreationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassInstanceCreationExpression" ):
                listener.enterClassInstanceCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassInstanceCreationExpression" ):
                listener.exitClassInstanceCreationExpression(self)




    def classInstanceCreationExpression(self):

        localctx = Java8Parser.ClassInstanceCreationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_classInstanceCreationExpression)
        self._la = 0 # Token type
        try:
            self.state = 2104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2021
                self.match(Java8Parser.NEW)
                self.state = 2023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2022
                    self.typeArguments()


                self.state = 2028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==103:
                    self.state = 2025
                    self.annotation()
                    self.state = 2030
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2031
                self.match(Java8Parser.Identifier)
                self.state = 2042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==65:
                    self.state = 2032
                    self.match(Java8Parser.DOT)
                    self.state = 2036
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==103:
                        self.state = 2033
                        self.annotation()
                        self.state = 2038
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2039
                    self.match(Java8Parser.Identifier)
                    self.state = 2044
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2045
                    self.typeArgumentsOrDiamond()


                self.state = 2048
                self.match(Java8Parser.LPAREN)
                self.state = 2050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 2049
                    self.argumentList()


                self.state = 2052
                self.match(Java8Parser.RPAREN)
                self.state = 2054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 2053
                    self.classBody()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2056
                self.expressionName()
                self.state = 2057
                self.match(Java8Parser.DOT)
                self.state = 2058
                self.match(Java8Parser.NEW)
                self.state = 2060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2059
                    self.typeArguments()


                self.state = 2065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==103:
                    self.state = 2062
                    self.annotation()
                    self.state = 2067
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2068
                self.match(Java8Parser.Identifier)
                self.state = 2070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2069
                    self.typeArgumentsOrDiamond()


                self.state = 2072
                self.match(Java8Parser.LPAREN)
                self.state = 2074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 2073
                    self.argumentList()


                self.state = 2076
                self.match(Java8Parser.RPAREN)
                self.state = 2078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 2077
                    self.classBody()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2080
                self.primary()
                self.state = 2081
                self.match(Java8Parser.DOT)
                self.state = 2082
                self.match(Java8Parser.NEW)
                self.state = 2084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2083
                    self.typeArguments()


                self.state = 2089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==103:
                    self.state = 2086
                    self.annotation()
                    self.state = 2091
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2092
                self.match(Java8Parser.Identifier)
                self.state = 2094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2093
                    self.typeArgumentsOrDiamond()


                self.state = 2096
                self.match(Java8Parser.LPAREN)
                self.state = 2098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 2097
                    self.argumentList()


                self.state = 2100
                self.match(Java8Parser.RPAREN)
                self.state = 2102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 2101
                    self.classBody()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassInstanceCreationExpression_lf_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def NEW(self):
            return self.getToken(Java8Parser.NEW, 0)

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AnnotationContext,i)


        def typeArgumentsOrDiamond(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsOrDiamondContext,0)


        def argumentList(self):
            return self.getTypedRuleContext(Java8Parser.ArgumentListContext,0)


        def classBody(self):
            return self.getTypedRuleContext(Java8Parser.ClassBodyContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_classInstanceCreationExpression_lf_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassInstanceCreationExpression_lf_primary" ):
                listener.enterClassInstanceCreationExpression_lf_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassInstanceCreationExpression_lf_primary" ):
                listener.exitClassInstanceCreationExpression_lf_primary(self)




    def classInstanceCreationExpression_lf_primary(self):

        localctx = Java8Parser.ClassInstanceCreationExpression_lf_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_classInstanceCreationExpression_lf_primary)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2106
            self.match(Java8Parser.DOT)
            self.state = 2107
            self.match(Java8Parser.NEW)
            self.state = 2109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 2108
                self.typeArguments()


            self.state = 2114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==103:
                self.state = 2111
                self.annotation()
                self.state = 2116
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2117
            self.match(Java8Parser.Identifier)
            self.state = 2119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 2118
                self.typeArgumentsOrDiamond()


            self.state = 2121
            self.match(Java8Parser.LPAREN)
            self.state = 2123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                self.state = 2122
                self.argumentList()


            self.state = 2125
            self.match(Java8Parser.RPAREN)
            self.state = 2127
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.state = 2126
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassInstanceCreationExpression_lfno_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(Java8Parser.NEW, 0)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.Identifier)
            else:
                return self.getToken(Java8Parser.Identifier, i)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AnnotationContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.DOT)
            else:
                return self.getToken(Java8Parser.DOT, i)

        def typeArgumentsOrDiamond(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsOrDiamondContext,0)


        def argumentList(self):
            return self.getTypedRuleContext(Java8Parser.ArgumentListContext,0)


        def classBody(self):
            return self.getTypedRuleContext(Java8Parser.ClassBodyContext,0)


        def expressionName(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionNameContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_classInstanceCreationExpression_lfno_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassInstanceCreationExpression_lfno_primary" ):
                listener.enterClassInstanceCreationExpression_lfno_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassInstanceCreationExpression_lfno_primary" ):
                listener.exitClassInstanceCreationExpression_lfno_primary(self)




    def classInstanceCreationExpression_lfno_primary(self):

        localctx = Java8Parser.ClassInstanceCreationExpression_lfno_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_classInstanceCreationExpression_lfno_primary)
        self._la = 0 # Token type
        try:
            self.state = 2188
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [31]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2129
                self.match(Java8Parser.NEW)
                self.state = 2131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2130
                    self.typeArguments()


                self.state = 2136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==103:
                    self.state = 2133
                    self.annotation()
                    self.state = 2138
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2139
                self.match(Java8Parser.Identifier)
                self.state = 2150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==65:
                    self.state = 2140
                    self.match(Java8Parser.DOT)
                    self.state = 2144
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==103:
                        self.state = 2141
                        self.annotation()
                        self.state = 2146
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2147
                    self.match(Java8Parser.Identifier)
                    self.state = 2152
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2153
                    self.typeArgumentsOrDiamond()


                self.state = 2156
                self.match(Java8Parser.LPAREN)
                self.state = 2158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 2157
                    self.argumentList()


                self.state = 2160
                self.match(Java8Parser.RPAREN)
                self.state = 2162
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                if la_ == 1:
                    self.state = 2161
                    self.classBody()


                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2164
                self.expressionName()
                self.state = 2165
                self.match(Java8Parser.DOT)
                self.state = 2166
                self.match(Java8Parser.NEW)
                self.state = 2168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2167
                    self.typeArguments()


                self.state = 2173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==103:
                    self.state = 2170
                    self.annotation()
                    self.state = 2175
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2176
                self.match(Java8Parser.Identifier)
                self.state = 2178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2177
                    self.typeArgumentsOrDiamond()


                self.state = 2180
                self.match(Java8Parser.LPAREN)
                self.state = 2182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 2181
                    self.argumentList()


                self.state = 2184
                self.match(Java8Parser.RPAREN)
                self.state = 2186
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
                if la_ == 1:
                    self.state = 2185
                    self.classBody()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeArguments(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsContext,0)


        def LT(self):
            return self.getToken(Java8Parser.LT, 0)

        def GT(self):
            return self.getToken(Java8Parser.GT, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_typeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgumentsOrDiamond" ):
                listener.enterTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgumentsOrDiamond" ):
                listener.exitTypeArgumentsOrDiamond(self)




    def typeArgumentsOrDiamond(self):

        localctx = Java8Parser.TypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_typeArgumentsOrDiamond)
        try:
            self.state = 2193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,239,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2190
                self.typeArguments()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2191
                self.match(Java8Parser.LT)
                self.state = 2192
                self.match(Java8Parser.GT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self):
            return self.getTypedRuleContext(Java8Parser.PrimaryContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.DOT)
            else:
                return self.getToken(Java8Parser.DOT, i)

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def SUPER(self):
            return self.getToken(Java8Parser.SUPER, 0)

        def typeName(self):
            return self.getTypedRuleContext(Java8Parser.TypeNameContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_fieldAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldAccess" ):
                listener.enterFieldAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldAccess" ):
                listener.exitFieldAccess(self)




    def fieldAccess(self):

        localctx = Java8Parser.FieldAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_fieldAccess)
        try:
            self.state = 2208
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2195
                self.primary()
                self.state = 2196
                self.match(Java8Parser.DOT)
                self.state = 2197
                self.match(Java8Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2199
                self.match(Java8Parser.SUPER)
                self.state = 2200
                self.match(Java8Parser.DOT)
                self.state = 2201
                self.match(Java8Parser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2202
                self.typeName()
                self.state = 2203
                self.match(Java8Parser.DOT)
                self.state = 2204
                self.match(Java8Parser.SUPER)
                self.state = 2205
                self.match(Java8Parser.DOT)
                self.state = 2206
                self.match(Java8Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldAccess_lf_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_fieldAccess_lf_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldAccess_lf_primary" ):
                listener.enterFieldAccess_lf_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldAccess_lf_primary" ):
                listener.exitFieldAccess_lf_primary(self)




    def fieldAccess_lf_primary(self):

        localctx = Java8Parser.FieldAccess_lf_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_fieldAccess_lf_primary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2210
            self.match(Java8Parser.DOT)
            self.state = 2211
            self.match(Java8Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldAccess_lfno_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER(self):
            return self.getToken(Java8Parser.SUPER, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.DOT)
            else:
                return self.getToken(Java8Parser.DOT, i)

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def typeName(self):
            return self.getTypedRuleContext(Java8Parser.TypeNameContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_fieldAccess_lfno_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldAccess_lfno_primary" ):
                listener.enterFieldAccess_lfno_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldAccess_lfno_primary" ):
                listener.exitFieldAccess_lfno_primary(self)




    def fieldAccess_lfno_primary(self):

        localctx = Java8Parser.FieldAccess_lfno_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_fieldAccess_lfno_primary)
        try:
            self.state = 2222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2213
                self.match(Java8Parser.SUPER)
                self.state = 2214
                self.match(Java8Parser.DOT)
                self.state = 2215
                self.match(Java8Parser.Identifier)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2216
                self.typeName()
                self.state = 2217
                self.match(Java8Parser.DOT)
                self.state = 2218
                self.match(Java8Parser.SUPER)
                self.state = 2219
                self.match(Java8Parser.DOT)
                self.state = 2220
                self.match(Java8Parser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionNameContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.LBRACK)
            else:
                return self.getToken(Java8Parser.LBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Java8Parser.ExpressionContext,i)


        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.RBRACK)
            else:
                return self.getToken(Java8Parser.RBRACK, i)

        def primaryNoNewArray_lfno_arrayAccess(self):
            return self.getTypedRuleContext(Java8Parser.PrimaryNoNewArray_lfno_arrayAccessContext,0)


        def primaryNoNewArray_lf_arrayAccess(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.PrimaryNoNewArray_lf_arrayAccessContext)
            else:
                return self.getTypedRuleContext(Java8Parser.PrimaryNoNewArray_lf_arrayAccessContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_arrayAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAccess" ):
                listener.enterArrayAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAccess" ):
                listener.exitArrayAccess(self)




    def arrayAccess(self):

        localctx = Java8Parser.ArrayAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_arrayAccess)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 2224
                self.expressionName()
                self.state = 2225
                self.match(Java8Parser.LBRACK)
                self.state = 2226
                self.expression()
                self.state = 2227
                self.match(Java8Parser.RBRACK)
                pass

            elif la_ == 2:
                self.state = 2229
                self.primaryNoNewArray_lfno_arrayAccess()
                self.state = 2230
                self.match(Java8Parser.LBRACK)
                self.state = 2231
                self.expression()
                self.state = 2232
                self.match(Java8Parser.RBRACK)
                pass


            self.state = 2243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61:
                self.state = 2236
                self.primaryNoNewArray_lf_arrayAccess()
                self.state = 2237
                self.match(Java8Parser.LBRACK)
                self.state = 2238
                self.expression()
                self.state = 2239
                self.match(Java8Parser.RBRACK)
                self.state = 2245
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayAccess_lf_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(self):
            return self.getTypedRuleContext(Java8Parser.PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.LBRACK)
            else:
                return self.getToken(Java8Parser.LBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Java8Parser.ExpressionContext,i)


        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.RBRACK)
            else:
                return self.getToken(Java8Parser.RBRACK, i)

        def primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext)
            else:
                return self.getTypedRuleContext(Java8Parser.PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_arrayAccess_lf_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAccess_lf_primary" ):
                listener.enterArrayAccess_lf_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAccess_lf_primary" ):
                listener.exitArrayAccess_lf_primary(self)




    def arrayAccess_lf_primary(self):

        localctx = Java8Parser.ArrayAccess_lf_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_arrayAccess_lf_primary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2246
            self.primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary()
            self.state = 2247
            self.match(Java8Parser.LBRACK)
            self.state = 2248
            self.expression()
            self.state = 2249
            self.match(Java8Parser.RBRACK)
            self.state = 2258
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,244,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2251
                    self.primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary()
                    self.state = 2252
                    self.match(Java8Parser.LBRACK)
                    self.state = 2253
                    self.expression()
                    self.state = 2254
                    self.match(Java8Parser.RBRACK) 
                self.state = 2260
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,244,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayAccess_lfno_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionNameContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.LBRACK)
            else:
                return self.getToken(Java8Parser.LBRACK, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Java8Parser.ExpressionContext,i)


        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.RBRACK)
            else:
                return self.getToken(Java8Parser.RBRACK, i)

        def primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(self):
            return self.getTypedRuleContext(Java8Parser.PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext,0)


        def primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext)
            else:
                return self.getTypedRuleContext(Java8Parser.PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_arrayAccess_lfno_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAccess_lfno_primary" ):
                listener.enterArrayAccess_lfno_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAccess_lfno_primary" ):
                listener.exitArrayAccess_lfno_primary(self)




    def arrayAccess_lfno_primary(self):

        localctx = Java8Parser.ArrayAccess_lfno_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_arrayAccess_lfno_primary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2271
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.state = 2261
                self.expressionName()
                self.state = 2262
                self.match(Java8Parser.LBRACK)
                self.state = 2263
                self.expression()
                self.state = 2264
                self.match(Java8Parser.RBRACK)
                pass

            elif la_ == 2:
                self.state = 2266
                self.primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary()
                self.state = 2267
                self.match(Java8Parser.LBRACK)
                self.state = 2268
                self.expression()
                self.state = 2269
                self.match(Java8Parser.RBRACK)
                pass


            self.state = 2280
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,246,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2273
                    self.primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary()
                    self.state = 2274
                    self.match(Java8Parser.LBRACK)
                    self.state = 2275
                    self.expression()
                    self.state = 2276
                    self.match(Java8Parser.RBRACK) 
                self.state = 2282
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,246,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodName(self):
            return self.getTypedRuleContext(Java8Parser.MethodNameContext,0)


        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(Java8Parser.ArgumentListContext,0)


        def typeName(self):
            return self.getTypedRuleContext(Java8Parser.TypeNameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.DOT)
            else:
                return self.getToken(Java8Parser.DOT, i)

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsContext,0)


        def expressionName(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionNameContext,0)


        def primary(self):
            return self.getTypedRuleContext(Java8Parser.PrimaryContext,0)


        def SUPER(self):
            return self.getToken(Java8Parser.SUPER, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_methodInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodInvocation" ):
                listener.enterMethodInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodInvocation" ):
                listener.exitMethodInvocation(self)




    def methodInvocation(self):

        localctx = Java8Parser.MethodInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_methodInvocation)
        self._la = 0 # Token type
        try:
            self.state = 2351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2283
                self.methodName()
                self.state = 2284
                self.match(Java8Parser.LPAREN)
                self.state = 2286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 2285
                    self.argumentList()


                self.state = 2288
                self.match(Java8Parser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2290
                self.typeName()
                self.state = 2291
                self.match(Java8Parser.DOT)
                self.state = 2293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2292
                    self.typeArguments()


                self.state = 2295
                self.match(Java8Parser.Identifier)
                self.state = 2296
                self.match(Java8Parser.LPAREN)
                self.state = 2298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 2297
                    self.argumentList()


                self.state = 2300
                self.match(Java8Parser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2302
                self.expressionName()
                self.state = 2303
                self.match(Java8Parser.DOT)
                self.state = 2305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2304
                    self.typeArguments()


                self.state = 2307
                self.match(Java8Parser.Identifier)
                self.state = 2308
                self.match(Java8Parser.LPAREN)
                self.state = 2310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 2309
                    self.argumentList()


                self.state = 2312
                self.match(Java8Parser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2314
                self.primary()
                self.state = 2315
                self.match(Java8Parser.DOT)
                self.state = 2317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2316
                    self.typeArguments()


                self.state = 2319
                self.match(Java8Parser.Identifier)
                self.state = 2320
                self.match(Java8Parser.LPAREN)
                self.state = 2322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 2321
                    self.argumentList()


                self.state = 2324
                self.match(Java8Parser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2326
                self.match(Java8Parser.SUPER)
                self.state = 2327
                self.match(Java8Parser.DOT)
                self.state = 2329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2328
                    self.typeArguments()


                self.state = 2331
                self.match(Java8Parser.Identifier)
                self.state = 2332
                self.match(Java8Parser.LPAREN)
                self.state = 2334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 2333
                    self.argumentList()


                self.state = 2336
                self.match(Java8Parser.RPAREN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2337
                self.typeName()
                self.state = 2338
                self.match(Java8Parser.DOT)
                self.state = 2339
                self.match(Java8Parser.SUPER)
                self.state = 2340
                self.match(Java8Parser.DOT)
                self.state = 2342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2341
                    self.typeArguments()


                self.state = 2344
                self.match(Java8Parser.Identifier)
                self.state = 2345
                self.match(Java8Parser.LPAREN)
                self.state = 2347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 2346
                    self.argumentList()


                self.state = 2349
                self.match(Java8Parser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodInvocation_lf_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsContext,0)


        def argumentList(self):
            return self.getTypedRuleContext(Java8Parser.ArgumentListContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_methodInvocation_lf_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodInvocation_lf_primary" ):
                listener.enterMethodInvocation_lf_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodInvocation_lf_primary" ):
                listener.exitMethodInvocation_lf_primary(self)




    def methodInvocation_lf_primary(self):

        localctx = Java8Parser.MethodInvocation_lf_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_methodInvocation_lf_primary)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2353
            self.match(Java8Parser.DOT)
            self.state = 2355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 2354
                self.typeArguments()


            self.state = 2357
            self.match(Java8Parser.Identifier)
            self.state = 2358
            self.match(Java8Parser.LPAREN)
            self.state = 2360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                self.state = 2359
                self.argumentList()


            self.state = 2362
            self.match(Java8Parser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodInvocation_lfno_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodName(self):
            return self.getTypedRuleContext(Java8Parser.MethodNameContext,0)


        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def argumentList(self):
            return self.getTypedRuleContext(Java8Parser.ArgumentListContext,0)


        def typeName(self):
            return self.getTypedRuleContext(Java8Parser.TypeNameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.DOT)
            else:
                return self.getToken(Java8Parser.DOT, i)

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsContext,0)


        def expressionName(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionNameContext,0)


        def SUPER(self):
            return self.getToken(Java8Parser.SUPER, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_methodInvocation_lfno_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodInvocation_lfno_primary" ):
                listener.enterMethodInvocation_lfno_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodInvocation_lfno_primary" ):
                listener.exitMethodInvocation_lfno_primary(self)




    def methodInvocation_lfno_primary(self):

        localctx = Java8Parser.MethodInvocation_lfno_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_methodInvocation_lfno_primary)
        self._la = 0 # Token type
        try:
            self.state = 2420
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2364
                self.methodName()
                self.state = 2365
                self.match(Java8Parser.LPAREN)
                self.state = 2367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 2366
                    self.argumentList()


                self.state = 2369
                self.match(Java8Parser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2371
                self.typeName()
                self.state = 2372
                self.match(Java8Parser.DOT)
                self.state = 2374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2373
                    self.typeArguments()


                self.state = 2376
                self.match(Java8Parser.Identifier)
                self.state = 2377
                self.match(Java8Parser.LPAREN)
                self.state = 2379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 2378
                    self.argumentList()


                self.state = 2381
                self.match(Java8Parser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2383
                self.expressionName()
                self.state = 2384
                self.match(Java8Parser.DOT)
                self.state = 2386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2385
                    self.typeArguments()


                self.state = 2388
                self.match(Java8Parser.Identifier)
                self.state = 2389
                self.match(Java8Parser.LPAREN)
                self.state = 2391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 2390
                    self.argumentList()


                self.state = 2393
                self.match(Java8Parser.RPAREN)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2395
                self.match(Java8Parser.SUPER)
                self.state = 2396
                self.match(Java8Parser.DOT)
                self.state = 2398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2397
                    self.typeArguments()


                self.state = 2400
                self.match(Java8Parser.Identifier)
                self.state = 2401
                self.match(Java8Parser.LPAREN)
                self.state = 2403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 2402
                    self.argumentList()


                self.state = 2405
                self.match(Java8Parser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2406
                self.typeName()
                self.state = 2407
                self.match(Java8Parser.DOT)
                self.state = 2408
                self.match(Java8Parser.SUPER)
                self.state = 2409
                self.match(Java8Parser.DOT)
                self.state = 2411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2410
                    self.typeArguments()


                self.state = 2413
                self.match(Java8Parser.Identifier)
                self.state = 2414
                self.match(Java8Parser.LPAREN)
                self.state = 2416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 286270087177978152) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 25769819139) != 0):
                    self.state = 2415
                    self.argumentList()


                self.state = 2418
                self.match(Java8Parser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(Java8Parser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.COMMA)
            else:
                return self.getToken(Java8Parser.COMMA, i)

        def getRuleIndex(self):
            return Java8Parser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)




    def argumentList(self):

        localctx = Java8Parser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2422
            self.expression()
            self.state = 2427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==64:
                self.state = 2423
                self.match(Java8Parser.COMMA)
                self.state = 2424
                self.expression()
                self.state = 2429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodReferenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionNameContext,0)


        def COLONCOLON(self):
            return self.getToken(Java8Parser.COLONCOLON, 0)

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsContext,0)


        def referenceType(self):
            return self.getTypedRuleContext(Java8Parser.ReferenceTypeContext,0)


        def primary(self):
            return self.getTypedRuleContext(Java8Parser.PrimaryContext,0)


        def SUPER(self):
            return self.getToken(Java8Parser.SUPER, 0)

        def typeName(self):
            return self.getTypedRuleContext(Java8Parser.TypeNameContext,0)


        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def classType(self):
            return self.getTypedRuleContext(Java8Parser.ClassTypeContext,0)


        def NEW(self):
            return self.getToken(Java8Parser.NEW, 0)

        def arrayType(self):
            return self.getTypedRuleContext(Java8Parser.ArrayTypeContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_methodReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodReference" ):
                listener.enterMethodReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodReference" ):
                listener.exitMethodReference(self)




    def methodReference(self):

        localctx = Java8Parser.MethodReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_methodReference)
        self._la = 0 # Token type
        try:
            self.state = 2477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2430
                self.expressionName()
                self.state = 2431
                self.match(Java8Parser.COLONCOLON)
                self.state = 2433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2432
                    self.typeArguments()


                self.state = 2435
                self.match(Java8Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2437
                self.referenceType()
                self.state = 2438
                self.match(Java8Parser.COLONCOLON)
                self.state = 2440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2439
                    self.typeArguments()


                self.state = 2442
                self.match(Java8Parser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2444
                self.primary()
                self.state = 2445
                self.match(Java8Parser.COLONCOLON)
                self.state = 2447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2446
                    self.typeArguments()


                self.state = 2449
                self.match(Java8Parser.Identifier)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2451
                self.match(Java8Parser.SUPER)
                self.state = 2452
                self.match(Java8Parser.COLONCOLON)
                self.state = 2454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2453
                    self.typeArguments()


                self.state = 2456
                self.match(Java8Parser.Identifier)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2457
                self.typeName()
                self.state = 2458
                self.match(Java8Parser.DOT)
                self.state = 2459
                self.match(Java8Parser.SUPER)
                self.state = 2460
                self.match(Java8Parser.COLONCOLON)
                self.state = 2462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2461
                    self.typeArguments()


                self.state = 2464
                self.match(Java8Parser.Identifier)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2466
                self.classType()
                self.state = 2467
                self.match(Java8Parser.COLONCOLON)
                self.state = 2469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2468
                    self.typeArguments()


                self.state = 2471
                self.match(Java8Parser.NEW)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2473
                self.arrayType()
                self.state = 2474
                self.match(Java8Parser.COLONCOLON)
                self.state = 2475
                self.match(Java8Parser.NEW)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodReference_lf_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLONCOLON(self):
            return self.getToken(Java8Parser.COLONCOLON, 0)

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_methodReference_lf_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodReference_lf_primary" ):
                listener.enterMethodReference_lf_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodReference_lf_primary" ):
                listener.exitMethodReference_lf_primary(self)




    def methodReference_lf_primary(self):

        localctx = Java8Parser.MethodReference_lf_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_methodReference_lf_primary)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2479
            self.match(Java8Parser.COLONCOLON)
            self.state = 2481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 2480
                self.typeArguments()


            self.state = 2483
            self.match(Java8Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodReference_lfno_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionNameContext,0)


        def COLONCOLON(self):
            return self.getToken(Java8Parser.COLONCOLON, 0)

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(Java8Parser.TypeArgumentsContext,0)


        def referenceType(self):
            return self.getTypedRuleContext(Java8Parser.ReferenceTypeContext,0)


        def SUPER(self):
            return self.getToken(Java8Parser.SUPER, 0)

        def typeName(self):
            return self.getTypedRuleContext(Java8Parser.TypeNameContext,0)


        def DOT(self):
            return self.getToken(Java8Parser.DOT, 0)

        def classType(self):
            return self.getTypedRuleContext(Java8Parser.ClassTypeContext,0)


        def NEW(self):
            return self.getToken(Java8Parser.NEW, 0)

        def arrayType(self):
            return self.getTypedRuleContext(Java8Parser.ArrayTypeContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_methodReference_lfno_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodReference_lfno_primary" ):
                listener.enterMethodReference_lfno_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodReference_lfno_primary" ):
                listener.exitMethodReference_lfno_primary(self)




    def methodReference_lfno_primary(self):

        localctx = Java8Parser.MethodReference_lfno_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_methodReference_lfno_primary)
        self._la = 0 # Token type
        try:
            self.state = 2525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2485
                self.expressionName()
                self.state = 2486
                self.match(Java8Parser.COLONCOLON)
                self.state = 2488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2487
                    self.typeArguments()


                self.state = 2490
                self.match(Java8Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2492
                self.referenceType()
                self.state = 2493
                self.match(Java8Parser.COLONCOLON)
                self.state = 2495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2494
                    self.typeArguments()


                self.state = 2497
                self.match(Java8Parser.Identifier)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2499
                self.match(Java8Parser.SUPER)
                self.state = 2500
                self.match(Java8Parser.COLONCOLON)
                self.state = 2502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2501
                    self.typeArguments()


                self.state = 2504
                self.match(Java8Parser.Identifier)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2505
                self.typeName()
                self.state = 2506
                self.match(Java8Parser.DOT)
                self.state = 2507
                self.match(Java8Parser.SUPER)
                self.state = 2508
                self.match(Java8Parser.COLONCOLON)
                self.state = 2510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2509
                    self.typeArguments()


                self.state = 2512
                self.match(Java8Parser.Identifier)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2514
                self.classType()
                self.state = 2515
                self.match(Java8Parser.COLONCOLON)
                self.state = 2517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 2516
                    self.typeArguments()


                self.state = 2519
                self.match(Java8Parser.NEW)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2521
                self.arrayType()
                self.state = 2522
                self.match(Java8Parser.COLONCOLON)
                self.state = 2523
                self.match(Java8Parser.NEW)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayCreationExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEW(self):
            return self.getToken(Java8Parser.NEW, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(Java8Parser.PrimitiveTypeContext,0)


        def dimExprs(self):
            return self.getTypedRuleContext(Java8Parser.DimExprsContext,0)


        def dims(self):
            return self.getTypedRuleContext(Java8Parser.DimsContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(Java8Parser.ClassOrInterfaceTypeContext,0)


        def arrayInitializer(self):
            return self.getTypedRuleContext(Java8Parser.ArrayInitializerContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_arrayCreationExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreationExpression" ):
                listener.enterArrayCreationExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreationExpression" ):
                listener.exitArrayCreationExpression(self)




    def arrayCreationExpression(self):

        localctx = Java8Parser.ArrayCreationExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_arrayCreationExpression)
        try:
            self.state = 2549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2527
                self.match(Java8Parser.NEW)
                self.state = 2528
                self.primitiveType()
                self.state = 2529
                self.dimExprs()
                self.state = 2531
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
                if la_ == 1:
                    self.state = 2530
                    self.dims()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2533
                self.match(Java8Parser.NEW)
                self.state = 2534
                self.classOrInterfaceType()
                self.state = 2535
                self.dimExprs()
                self.state = 2537
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
                if la_ == 1:
                    self.state = 2536
                    self.dims()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2539
                self.match(Java8Parser.NEW)
                self.state = 2540
                self.primitiveType()
                self.state = 2541
                self.dims()
                self.state = 2542
                self.arrayInitializer()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2544
                self.match(Java8Parser.NEW)
                self.state = 2545
                self.classOrInterfaceType()
                self.state = 2546
                self.dims()
                self.state = 2547
                self.arrayInitializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DimExprsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dimExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.DimExprContext)
            else:
                return self.getTypedRuleContext(Java8Parser.DimExprContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_dimExprs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimExprs" ):
                listener.enterDimExprs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimExprs" ):
                listener.exitDimExprs(self)




    def dimExprs(self):

        localctx = Java8Parser.DimExprsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_dimExprs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2551
            self.dimExpr()
            self.state = 2555
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,289,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2552
                    self.dimExpr() 
                self.state = 2557
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,289,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DimExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self):
            return self.getToken(Java8Parser.LBRACK, 0)

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def RBRACK(self):
            return self.getToken(Java8Parser.RBRACK, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AnnotationContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AnnotationContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_dimExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimExpr" ):
                listener.enterDimExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimExpr" ):
                listener.exitDimExpr(self)




    def dimExpr(self):

        localctx = Java8Parser.DimExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_dimExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==103:
                self.state = 2558
                self.annotation()
                self.state = 2563
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2564
            self.match(Java8Parser.LBRACK)
            self.state = 2565
            self.expression()
            self.state = 2566
            self.match(Java8Parser.RBRACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = Java8Parser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2568
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaExpression(self):
            return self.getTypedRuleContext(Java8Parser.LambdaExpressionContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(Java8Parser.AssignmentExpressionContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = Java8Parser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_expression)
        try:
            self.state = 2572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2570
                self.lambdaExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2571
                self.assignmentExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameters(self):
            return self.getTypedRuleContext(Java8Parser.LambdaParametersContext,0)


        def ARROW(self):
            return self.getToken(Java8Parser.ARROW, 0)

        def lambdaBody(self):
            return self.getTypedRuleContext(Java8Parser.LambdaBodyContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_lambdaExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaExpression" ):
                listener.enterLambdaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaExpression" ):
                listener.exitLambdaExpression(self)




    def lambdaExpression(self):

        localctx = Java8Parser.LambdaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_lambdaExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2574
            self.lambdaParameters()
            self.state = 2575
            self.match(Java8Parser.ARROW)
            self.state = 2576
            self.lambdaBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(Java8Parser.Identifier, 0)

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(Java8Parser.FormalParameterListContext,0)


        def inferredFormalParameterList(self):
            return self.getTypedRuleContext(Java8Parser.InferredFormalParameterListContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_lambdaParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters" ):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters" ):
                listener.exitLambdaParameters(self)




    def lambdaParameters(self):

        localctx = Java8Parser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_lambdaParameters)
        self._la = 0 # Token type
        try:
            self.state = 2588
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2578
                self.match(Java8Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2579
                self.match(Java8Parser.LPAREN)
                self.state = 2581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 138111369512) != 0) or _la==102 or _la==103:
                    self.state = 2580
                    self.formalParameterList()


                self.state = 2583
                self.match(Java8Parser.RPAREN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2584
                self.match(Java8Parser.LPAREN)
                self.state = 2585
                self.inferredFormalParameterList()
                self.state = 2586
                self.match(Java8Parser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InferredFormalParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.Identifier)
            else:
                return self.getToken(Java8Parser.Identifier, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.COMMA)
            else:
                return self.getToken(Java8Parser.COMMA, i)

        def getRuleIndex(self):
            return Java8Parser.RULE_inferredFormalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInferredFormalParameterList" ):
                listener.enterInferredFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInferredFormalParameterList" ):
                listener.exitInferredFormalParameterList(self)




    def inferredFormalParameterList(self):

        localctx = Java8Parser.InferredFormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_inferredFormalParameterList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2590
            self.match(Java8Parser.Identifier)
            self.state = 2595
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==64:
                self.state = 2591
                self.match(Java8Parser.COMMA)
                self.state = 2592
                self.match(Java8Parser.Identifier)
                self.state = 2597
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(Java8Parser.BlockContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_lambdaBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaBody" ):
                listener.enterLambdaBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaBody" ):
                listener.exitLambdaBody(self)




    def lambdaBody(self):

        localctx = Java8Parser.LambdaBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_lambdaBody)
        try:
            self.state = 2600
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 5, 8, 14, 20, 27, 29, 31, 37, 40, 43, 48, 51, 52, 53, 54, 55, 56, 57, 69, 70, 79, 80, 81, 82, 102, 103]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2598
                self.expression()
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2599
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(Java8Parser.ConditionalExpressionContext,0)


        def assignment(self):
            return self.getTypedRuleContext(Java8Parser.AssignmentContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)




    def assignmentExpression(self):

        localctx = Java8Parser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_assignmentExpression)
        try:
            self.state = 2604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2602
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2603
                self.assignment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def leftHandSide(self):
            return self.getTypedRuleContext(Java8Parser.LeftHandSideContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(Java8Parser.AssignmentOperatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = Java8Parser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2606
            self.leftHandSide()
            self.state = 2607
            self.assignmentOperator()
            self.state = 2608
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeftHandSideContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionName(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionNameContext,0)


        def fieldAccess(self):
            return self.getTypedRuleContext(Java8Parser.FieldAccessContext,0)


        def arrayAccess(self):
            return self.getTypedRuleContext(Java8Parser.ArrayAccessContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_leftHandSide

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeftHandSide" ):
                listener.enterLeftHandSide(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeftHandSide" ):
                listener.exitLeftHandSide(self)




    def leftHandSide(self):

        localctx = Java8Parser.LeftHandSideContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_leftHandSide)
        try:
            self.state = 2613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2610
                self.expressionName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2611
                self.fieldAccess()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2612
                self.arrayAccess()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(Java8Parser.ASSIGN, 0)

        def MUL_ASSIGN(self):
            return self.getToken(Java8Parser.MUL_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(Java8Parser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(Java8Parser.MOD_ASSIGN, 0)

        def ADD_ASSIGN(self):
            return self.getToken(Java8Parser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(Java8Parser.SUB_ASSIGN, 0)

        def LSHIFT_ASSIGN(self):
            return self.getToken(Java8Parser.LSHIFT_ASSIGN, 0)

        def RSHIFT_ASSIGN(self):
            return self.getToken(Java8Parser.RSHIFT_ASSIGN, 0)

        def URSHIFT_ASSIGN(self):
            return self.getToken(Java8Parser.URSHIFT_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(Java8Parser.AND_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(Java8Parser.XOR_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(Java8Parser.OR_ASSIGN, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = Java8Parser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2615
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 68685922305) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalOrExpression(self):
            return self.getTypedRuleContext(Java8Parser.ConditionalOrExpressionContext,0)


        def QUESTION(self):
            return self.getToken(Java8Parser.QUESTION, 0)

        def expression(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(Java8Parser.COLON, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(Java8Parser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = Java8Parser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_conditionalExpression)
        try:
            self.state = 2624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2617
                self.conditionalOrExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2618
                self.conditionalOrExpression(0)
                self.state = 2619
                self.match(Java8Parser.QUESTION)
                self.state = 2620
                self.expression()
                self.state = 2621
                self.match(Java8Parser.COLON)
                self.state = 2622
                self.conditionalExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalAndExpression(self):
            return self.getTypedRuleContext(Java8Parser.ConditionalAndExpressionContext,0)


        def conditionalOrExpression(self):
            return self.getTypedRuleContext(Java8Parser.ConditionalOrExpressionContext,0)


        def OR(self):
            return self.getToken(Java8Parser.OR, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_conditionalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalOrExpression" ):
                listener.enterConditionalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalOrExpression" ):
                listener.exitConditionalOrExpression(self)



    def conditionalOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java8Parser.ConditionalOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 432
        self.enterRecursionRule(localctx, 432, self.RULE_conditionalOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2627
            self.conditionalAndExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2634
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,299,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Java8Parser.ConditionalOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_conditionalOrExpression)
                    self.state = 2629
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2630
                    self.match(Java8Parser.OR)
                    self.state = 2631
                    self.conditionalAndExpression(0) 
                self.state = 2636
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,299,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConditionalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self):
            return self.getTypedRuleContext(Java8Parser.InclusiveOrExpressionContext,0)


        def conditionalAndExpression(self):
            return self.getTypedRuleContext(Java8Parser.ConditionalAndExpressionContext,0)


        def AND(self):
            return self.getToken(Java8Parser.AND, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_conditionalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalAndExpression" ):
                listener.enterConditionalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalAndExpression" ):
                listener.exitConditionalAndExpression(self)



    def conditionalAndExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java8Parser.ConditionalAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 434
        self.enterRecursionRule(localctx, 434, self.RULE_conditionalAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2638
            self.inclusiveOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2645
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,300,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Java8Parser.ConditionalAndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_conditionalAndExpression)
                    self.state = 2640
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2641
                    self.match(Java8Parser.AND)
                    self.state = 2642
                    self.inclusiveOrExpression(0) 
                self.state = 2647
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,300,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self):
            return self.getTypedRuleContext(Java8Parser.ExclusiveOrExpressionContext,0)


        def inclusiveOrExpression(self):
            return self.getTypedRuleContext(Java8Parser.InclusiveOrExpressionContext,0)


        def BITOR(self):
            return self.getToken(Java8Parser.BITOR, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)



    def inclusiveOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java8Parser.InclusiveOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 436
        self.enterRecursionRule(localctx, 436, self.RULE_inclusiveOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2649
            self.exclusiveOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2656
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,301,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Java8Parser.InclusiveOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_inclusiveOrExpression)
                    self.state = 2651
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2652
                    self.match(Java8Parser.BITOR)
                    self.state = 2653
                    self.exclusiveOrExpression(0) 
                self.state = 2658
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,301,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self):
            return self.getTypedRuleContext(Java8Parser.AndExpressionContext,0)


        def exclusiveOrExpression(self):
            return self.getTypedRuleContext(Java8Parser.ExclusiveOrExpressionContext,0)


        def CARET(self):
            return self.getToken(Java8Parser.CARET, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)



    def exclusiveOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java8Parser.ExclusiveOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 438
        self.enterRecursionRule(localctx, 438, self.RULE_exclusiveOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2660
            self.andExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2667
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,302,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Java8Parser.ExclusiveOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusiveOrExpression)
                    self.state = 2662
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2663
                    self.match(Java8Parser.CARET)
                    self.state = 2664
                    self.andExpression(0) 
                self.state = 2669
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,302,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self):
            return self.getTypedRuleContext(Java8Parser.EqualityExpressionContext,0)


        def andExpression(self):
            return self.getTypedRuleContext(Java8Parser.AndExpressionContext,0)


        def BITAND(self):
            return self.getToken(Java8Parser.BITAND, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)



    def andExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java8Parser.AndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 440
        self.enterRecursionRule(localctx, 440, self.RULE_andExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2671
            self.equalityExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2678
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,303,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = Java8Parser.AndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_andExpression)
                    self.state = 2673
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2674
                    self.match(Java8Parser.BITAND)
                    self.state = 2675
                    self.equalityExpression(0) 
                self.state = 2680
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,303,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self):
            return self.getTypedRuleContext(Java8Parser.RelationalExpressionContext,0)


        def equalityExpression(self):
            return self.getTypedRuleContext(Java8Parser.EqualityExpressionContext,0)


        def EQUAL(self):
            return self.getToken(Java8Parser.EQUAL, 0)

        def NOTEQUAL(self):
            return self.getToken(Java8Parser.NOTEQUAL, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)



    def equalityExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java8Parser.EqualityExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 442
        self.enterRecursionRule(localctx, 442, self.RULE_equalityExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2682
            self.relationalExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2692
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,305,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2690
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
                    if la_ == 1:
                        localctx = Java8Parser.EqualityExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                        self.state = 2684
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2685
                        self.match(Java8Parser.EQUAL)
                        self.state = 2686
                        self.relationalExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = Java8Parser.EqualityExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                        self.state = 2687
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2688
                        self.match(Java8Parser.NOTEQUAL)
                        self.state = 2689
                        self.relationalExpression(0)
                        pass

             
                self.state = 2694
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,305,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self):
            return self.getTypedRuleContext(Java8Parser.ShiftExpressionContext,0)


        def relationalExpression(self):
            return self.getTypedRuleContext(Java8Parser.RelationalExpressionContext,0)


        def LT(self):
            return self.getToken(Java8Parser.LT, 0)

        def GT(self):
            return self.getToken(Java8Parser.GT, 0)

        def LE(self):
            return self.getToken(Java8Parser.LE, 0)

        def GE(self):
            return self.getToken(Java8Parser.GE, 0)

        def INSTANCEOF(self):
            return self.getToken(Java8Parser.INSTANCEOF, 0)

        def referenceType(self):
            return self.getTypedRuleContext(Java8Parser.ReferenceTypeContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)



    def relationalExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java8Parser.RelationalExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 444
        self.enterRecursionRule(localctx, 444, self.RULE_relationalExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2696
            self.shiftExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2715
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,307,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2713
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
                    if la_ == 1:
                        localctx = Java8Parser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 2698
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 2699
                        self.match(Java8Parser.LT)
                        self.state = 2700
                        self.shiftExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = Java8Parser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 2701
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 2702
                        self.match(Java8Parser.GT)
                        self.state = 2703
                        self.shiftExpression(0)
                        pass

                    elif la_ == 3:
                        localctx = Java8Parser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 2704
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2705
                        self.match(Java8Parser.LE)
                        self.state = 2706
                        self.shiftExpression(0)
                        pass

                    elif la_ == 4:
                        localctx = Java8Parser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 2707
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2708
                        self.match(Java8Parser.GE)
                        self.state = 2709
                        self.shiftExpression(0)
                        pass

                    elif la_ == 5:
                        localctx = Java8Parser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 2710
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2711
                        self.match(Java8Parser.INSTANCEOF)
                        self.state = 2712
                        self.referenceType()
                        pass

             
                self.state = 2717
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,307,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self):
            return self.getTypedRuleContext(Java8Parser.AdditiveExpressionContext,0)


        def shiftExpression(self):
            return self.getTypedRuleContext(Java8Parser.ShiftExpressionContext,0)


        def LT(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.LT)
            else:
                return self.getToken(Java8Parser.LT, i)

        def GT(self, i:int=None):
            if i is None:
                return self.getTokens(Java8Parser.GT)
            else:
                return self.getToken(Java8Parser.GT, i)

        def getRuleIndex(self):
            return Java8Parser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)



    def shiftExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java8Parser.ShiftExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 446
        self.enterRecursionRule(localctx, 446, self.RULE_shiftExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2719
            self.additiveExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2736
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,309,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2734
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
                    if la_ == 1:
                        localctx = Java8Parser.ShiftExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftExpression)
                        self.state = 2721
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2722
                        self.match(Java8Parser.LT)
                        self.state = 2723
                        self.match(Java8Parser.LT)
                        self.state = 2724
                        self.additiveExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = Java8Parser.ShiftExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftExpression)
                        self.state = 2725
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2726
                        self.match(Java8Parser.GT)
                        self.state = 2727
                        self.match(Java8Parser.GT)
                        self.state = 2728
                        self.additiveExpression(0)
                        pass

                    elif la_ == 3:
                        localctx = Java8Parser.ShiftExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftExpression)
                        self.state = 2729
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2730
                        self.match(Java8Parser.GT)
                        self.state = 2731
                        self.match(Java8Parser.GT)
                        self.state = 2732
                        self.match(Java8Parser.GT)
                        self.state = 2733
                        self.additiveExpression(0)
                        pass

             
                self.state = 2738
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,309,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(Java8Parser.MultiplicativeExpressionContext,0)


        def additiveExpression(self):
            return self.getTypedRuleContext(Java8Parser.AdditiveExpressionContext,0)


        def ADD(self):
            return self.getToken(Java8Parser.ADD, 0)

        def SUB(self):
            return self.getToken(Java8Parser.SUB, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)



    def additiveExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java8Parser.AdditiveExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 448
        self.enterRecursionRule(localctx, 448, self.RULE_additiveExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2740
            self.multiplicativeExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 2750
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,311,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2748
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
                    if la_ == 1:
                        localctx = Java8Parser.AdditiveExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                        self.state = 2742
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2743
                        self.match(Java8Parser.ADD)
                        self.state = 2744
                        self.multiplicativeExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = Java8Parser.AdditiveExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                        self.state = 2745
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2746
                        self.match(Java8Parser.SUB)
                        self.state = 2747
                        self.multiplicativeExpression(0)
                        pass

             
                self.state = 2752
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,311,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(Java8Parser.UnaryExpressionContext,0)


        def multiplicativeExpression(self):
            return self.getTypedRuleContext(Java8Parser.MultiplicativeExpressionContext,0)


        def MUL(self):
            return self.getToken(Java8Parser.MUL, 0)

        def DIV(self):
            return self.getToken(Java8Parser.DIV, 0)

        def MOD(self):
            return self.getToken(Java8Parser.MOD, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)



    def multiplicativeExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = Java8Parser.MultiplicativeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 450
        self.enterRecursionRule(localctx, 450, self.RULE_multiplicativeExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2754
            self.unaryExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2767
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,313,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2765
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
                    if la_ == 1:
                        localctx = Java8Parser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 2756
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2757
                        self.match(Java8Parser.MUL)
                        self.state = 2758
                        self.unaryExpression()
                        pass

                    elif la_ == 2:
                        localctx = Java8Parser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 2759
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2760
                        self.match(Java8Parser.DIV)
                        self.state = 2761
                        self.unaryExpression()
                        pass

                    elif la_ == 3:
                        localctx = Java8Parser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 2762
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2763
                        self.match(Java8Parser.MOD)
                        self.state = 2764
                        self.unaryExpression()
                        pass

             
                self.state = 2769
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,313,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preIncrementExpression(self):
            return self.getTypedRuleContext(Java8Parser.PreIncrementExpressionContext,0)


        def preDecrementExpression(self):
            return self.getTypedRuleContext(Java8Parser.PreDecrementExpressionContext,0)


        def ADD(self):
            return self.getToken(Java8Parser.ADD, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(Java8Parser.UnaryExpressionContext,0)


        def SUB(self):
            return self.getToken(Java8Parser.SUB, 0)

        def unaryExpressionNotPlusMinus(self):
            return self.getTypedRuleContext(Java8Parser.UnaryExpressionNotPlusMinusContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = Java8Parser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_unaryExpression)
        try:
            self.state = 2777
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2770
                self.preIncrementExpression()
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2771
                self.preDecrementExpression()
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2772
                self.match(Java8Parser.ADD)
                self.state = 2773
                self.unaryExpression()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2774
                self.match(Java8Parser.SUB)
                self.state = 2775
                self.unaryExpression()
                pass
            elif token in [3, 5, 8, 14, 20, 27, 29, 31, 37, 40, 43, 48, 51, 52, 53, 54, 55, 56, 57, 69, 70, 102, 103]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2776
                self.unaryExpressionNotPlusMinus()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreIncrementExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INC(self):
            return self.getToken(Java8Parser.INC, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(Java8Parser.UnaryExpressionContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_preIncrementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreIncrementExpression" ):
                listener.enterPreIncrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreIncrementExpression" ):
                listener.exitPreIncrementExpression(self)




    def preIncrementExpression(self):

        localctx = Java8Parser.PreIncrementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_preIncrementExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2779
            self.match(Java8Parser.INC)
            self.state = 2780
            self.unaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreDecrementExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEC(self):
            return self.getToken(Java8Parser.DEC, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(Java8Parser.UnaryExpressionContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_preDecrementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreDecrementExpression" ):
                listener.enterPreDecrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreDecrementExpression" ):
                listener.exitPreDecrementExpression(self)




    def preDecrementExpression(self):

        localctx = Java8Parser.PreDecrementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_preDecrementExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2782
            self.match(Java8Parser.DEC)
            self.state = 2783
            self.unaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionNotPlusMinusContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(Java8Parser.PostfixExpressionContext,0)


        def TILDE(self):
            return self.getToken(Java8Parser.TILDE, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(Java8Parser.UnaryExpressionContext,0)


        def BANG(self):
            return self.getToken(Java8Parser.BANG, 0)

        def castExpression(self):
            return self.getTypedRuleContext(Java8Parser.CastExpressionContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_unaryExpressionNotPlusMinus

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpressionNotPlusMinus" ):
                listener.enterUnaryExpressionNotPlusMinus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpressionNotPlusMinus" ):
                listener.exitUnaryExpressionNotPlusMinus(self)




    def unaryExpressionNotPlusMinus(self):

        localctx = Java8Parser.UnaryExpressionNotPlusMinusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_unaryExpressionNotPlusMinus)
        try:
            self.state = 2791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2785
                self.postfixExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2786
                self.match(Java8Parser.TILDE)
                self.state = 2787
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2788
                self.match(Java8Parser.BANG)
                self.state = 2789
                self.unaryExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2790
                self.castExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primary(self):
            return self.getTypedRuleContext(Java8Parser.PrimaryContext,0)


        def expressionName(self):
            return self.getTypedRuleContext(Java8Parser.ExpressionNameContext,0)


        def postIncrementExpression_lf_postfixExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.PostIncrementExpression_lf_postfixExpressionContext)
            else:
                return self.getTypedRuleContext(Java8Parser.PostIncrementExpression_lf_postfixExpressionContext,i)


        def postDecrementExpression_lf_postfixExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.PostDecrementExpression_lf_postfixExpressionContext)
            else:
                return self.getTypedRuleContext(Java8Parser.PostDecrementExpression_lf_postfixExpressionContext,i)


        def getRuleIndex(self):
            return Java8Parser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)




    def postfixExpression(self):

        localctx = Java8Parser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_postfixExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.state = 2793
                self.primary()
                pass

            elif la_ == 2:
                self.state = 2794
                self.expressionName()
                pass


            self.state = 2801
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,318,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2799
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [79]:
                        self.state = 2797
                        self.postIncrementExpression_lf_postfixExpression()
                        pass
                    elif token in [80]:
                        self.state = 2798
                        self.postDecrementExpression_lf_postfixExpression()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2803
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,318,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostIncrementExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(Java8Parser.PostfixExpressionContext,0)


        def INC(self):
            return self.getToken(Java8Parser.INC, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_postIncrementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostIncrementExpression" ):
                listener.enterPostIncrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostIncrementExpression" ):
                listener.exitPostIncrementExpression(self)




    def postIncrementExpression(self):

        localctx = Java8Parser.PostIncrementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_postIncrementExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2804
            self.postfixExpression()
            self.state = 2805
            self.match(Java8Parser.INC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostIncrementExpression_lf_postfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INC(self):
            return self.getToken(Java8Parser.INC, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_postIncrementExpression_lf_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostIncrementExpression_lf_postfixExpression" ):
                listener.enterPostIncrementExpression_lf_postfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostIncrementExpression_lf_postfixExpression" ):
                listener.exitPostIncrementExpression_lf_postfixExpression(self)




    def postIncrementExpression_lf_postfixExpression(self):

        localctx = Java8Parser.PostIncrementExpression_lf_postfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_postIncrementExpression_lf_postfixExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2807
            self.match(Java8Parser.INC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostDecrementExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(Java8Parser.PostfixExpressionContext,0)


        def DEC(self):
            return self.getToken(Java8Parser.DEC, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_postDecrementExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostDecrementExpression" ):
                listener.enterPostDecrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostDecrementExpression" ):
                listener.exitPostDecrementExpression(self)




    def postDecrementExpression(self):

        localctx = Java8Parser.PostDecrementExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_postDecrementExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2809
            self.postfixExpression()
            self.state = 2810
            self.match(Java8Parser.DEC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostDecrementExpression_lf_postfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEC(self):
            return self.getToken(Java8Parser.DEC, 0)

        def getRuleIndex(self):
            return Java8Parser.RULE_postDecrementExpression_lf_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostDecrementExpression_lf_postfixExpression" ):
                listener.enterPostDecrementExpression_lf_postfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostDecrementExpression_lf_postfixExpression" ):
                listener.exitPostDecrementExpression_lf_postfixExpression(self)




    def postDecrementExpression_lf_postfixExpression(self):

        localctx = Java8Parser.PostDecrementExpression_lf_postfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_postDecrementExpression_lf_postfixExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2812
            self.match(Java8Parser.DEC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(Java8Parser.LPAREN, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(Java8Parser.PrimitiveTypeContext,0)


        def RPAREN(self):
            return self.getToken(Java8Parser.RPAREN, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(Java8Parser.UnaryExpressionContext,0)


        def referenceType(self):
            return self.getTypedRuleContext(Java8Parser.ReferenceTypeContext,0)


        def unaryExpressionNotPlusMinus(self):
            return self.getTypedRuleContext(Java8Parser.UnaryExpressionNotPlusMinusContext,0)


        def additionalBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(Java8Parser.AdditionalBoundContext)
            else:
                return self.getTypedRuleContext(Java8Parser.AdditionalBoundContext,i)


        def lambdaExpression(self):
            return self.getTypedRuleContext(Java8Parser.LambdaExpressionContext,0)


        def getRuleIndex(self):
            return Java8Parser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)




    def castExpression(self):

        localctx = Java8Parser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_castExpression)
        self._la = 0 # Token type
        try:
            self.state = 2841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2814
                self.match(Java8Parser.LPAREN)
                self.state = 2815
                self.primitiveType()
                self.state = 2816
                self.match(Java8Parser.RPAREN)
                self.state = 2817
                self.unaryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2819
                self.match(Java8Parser.LPAREN)
                self.state = 2820
                self.referenceType()
                self.state = 2824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==85:
                    self.state = 2821
                    self.additionalBound()
                    self.state = 2826
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2827
                self.match(Java8Parser.RPAREN)
                self.state = 2828
                self.unaryExpressionNotPlusMinus()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2830
                self.match(Java8Parser.LPAREN)
                self.state = 2831
                self.referenceType()
                self.state = 2835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==85:
                    self.state = 2832
                    self.additionalBound()
                    self.state = 2837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2838
                self.match(Java8Parser.RPAREN)
                self.state = 2839
                self.lambdaExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[25] = self.packageName_sempred
        self._predicates[27] = self.packageOrTypeName_sempred
        self._predicates[30] = self.ambiguousName_sempred
        self._predicates[216] = self.conditionalOrExpression_sempred
        self._predicates[217] = self.conditionalAndExpression_sempred
        self._predicates[218] = self.inclusiveOrExpression_sempred
        self._predicates[219] = self.exclusiveOrExpression_sempred
        self._predicates[220] = self.andExpression_sempred
        self._predicates[221] = self.equalityExpression_sempred
        self._predicates[222] = self.relationalExpression_sempred
        self._predicates[223] = self.shiftExpression_sempred
        self._predicates[224] = self.additiveExpression_sempred
        self._predicates[225] = self.multiplicativeExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def packageName_sempred(self, localctx:PackageNameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def packageOrTypeName_sempred(self, localctx:PackageOrTypeNameContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def ambiguousName_sempred(self, localctx:AmbiguousNameContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def conditionalOrExpression_sempred(self, localctx:ConditionalOrExpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def conditionalAndExpression_sempred(self, localctx:ConditionalAndExpressionContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def inclusiveOrExpression_sempred(self, localctx:InclusiveOrExpressionContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def exclusiveOrExpression_sempred(self, localctx:ExclusiveOrExpressionContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         

    def andExpression_sempred(self, localctx:AndExpressionContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         

    def equalityExpression_sempred(self, localctx:EqualityExpressionContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

    def relationalExpression_sempred(self, localctx:RelationalExpressionContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         

    def shiftExpression_sempred(self, localctx:ShiftExpressionContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         

    def additiveExpression_sempred(self, localctx:AdditiveExpressionContext, predIndex:int):
            if predIndex == 18:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 1)
         

    def multiplicativeExpression_sempred(self, localctx:MultiplicativeExpressionContext, predIndex:int):
            if predIndex == 20:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 1)
         




